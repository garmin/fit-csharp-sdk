#region Copyright
/////////////////////////////////////////////////////////////////////////////////////////////
// Copyright 2024 Garmin International, Inc.
// Licensed under the Flexible and Interoperable Data Transfer (FIT) Protocol License; you
// may not use this file except in compliance with the Flexible and Interoperable Data
// Transfer (FIT) Protocol License.
/////////////////////////////////////////////////////////////////////////////////////////////
// ****WARNING****  This file is auto-generated!  Do NOT edit this file.
// Profile Version = 21.158.0Release
// Tag = production/release/21.158.0-0-gc9428aa
/////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Text;
using System.IO;
using System.Linq;

namespace Dynastream.Fit
{
	/// <summary>
	/// Implements the Workout profile message.
	/// </summary>
	public class WorkoutMesg : Mesg
	{
		#region Fields
		#endregion

		/// <summary>
		/// Field Numbers for <see cref="WorkoutMesg"/>
		/// </summary>
		public sealed class FieldDefNum
		{
			public const byte MessageIndex = 254;
			public const byte Sport = 4;
			public const byte Capabilities = 5;
			public const byte NumValidSteps = 6;
			public const byte WktName = 8;
			public const byte SubSport = 11;
			public const byte PoolLength = 14;
			public const byte PoolLengthUnit = 15;
			public const byte WktDescription = 17;
			public const byte Invalid = Fit.FieldNumInvalid;
		}

		#region Constructors
		public WorkoutMesg() : base(Profile.GetMesg(MesgNum.Workout))
		{
		}

		public WorkoutMesg(Mesg mesg) : base(mesg)
		{
		}
		#endregion // Constructors

		#region Methods
		///<summary>
		/// Retrieves the MessageIndex field</summary>
		/// <returns>Returns nullable ushort representing the MessageIndex field</returns>
		public ushort? MessageIndex
		{
			get
			{
				Object val = GetFieldValue(254, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToUInt16(val));

			}
			set
			{
				SetFieldValue(254, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the Sport field</summary>
		/// <returns>Returns nullable Sport enum representing the Sport field</returns>
		public Sport? Sport
		{
			get
			{
				object obj = GetFieldValue(4, 0, Fit.SubfieldIndexMainField);
				Sport? value = obj == null ? (Sport?)null : (Sport)obj;
				return value;
			}
			set
			{
				SetFieldValue(4, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the Capabilities field</summary>
		/// <returns>Returns nullable uint representing the Capabilities field</returns>
		public uint? Capabilities
		{
			get
			{
				Object val = GetFieldValue(5, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToUInt32(val));

			}
			set
			{
				SetFieldValue(5, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the NumValidSteps field
		/// Comment: number of valid steps</summary>
		/// <returns>Returns nullable ushort representing the NumValidSteps field</returns>
		public ushort? NumValidSteps
		{
			get
			{
				Object val = GetFieldValue(6, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToUInt16(val));

			}
			set
			{
				SetFieldValue(6, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the WktName field</summary>
		/// <returns>Returns byte[] representing the WktName field</returns>
		public byte[] WktName
		{
			get
			{
				byte[] data = (byte[])GetFieldValue(8, 0, Fit.SubfieldIndexMainField);
				return data.Take(data.Length - 1).ToArray();
			}
			set
			{
				SetFieldValue(8, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the WktName field</summary>
		/// <returns>Returns String representing the WktName field</returns>
		public String GetWktNameAsString()
		{
			byte[] data = (byte[])GetFieldValue(8, 0, Fit.SubfieldIndexMainField);
			return data != null ? Encoding.UTF8.GetString(data, 0, data.Length - 1) : null;
		}

		///<summary>
		/// Set WktName field</summary>
		/// <param name="wktName_"> field value to be set</param>
		public void SetWktName(String wktName_)
		{
			byte[] data = Encoding.UTF8.GetBytes(wktName_);
			byte[] zdata = new byte[data.Length + 1];
			data.CopyTo(zdata, 0);
			SetFieldValue(8, 0, zdata, Fit.SubfieldIndexMainField);
		}

		///<summary>
		/// Retrieves the SubSport field</summary>
		/// <returns>Returns nullable SubSport enum representing the SubSport field</returns>
		public SubSport? SubSport
		{
			get
			{
				object obj = GetFieldValue(11, 0, Fit.SubfieldIndexMainField);
				SubSport? value = obj == null ? (SubSport?)null : (SubSport)obj;
				return value;
			}
			set
			{
				SetFieldValue(11, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the PoolLength field
		/// Units: m</summary>
		/// <returns>Returns nullable float representing the PoolLength field</returns>
		public float? PoolLength
		{
			get
			{
				Object val = GetFieldValue(14, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToSingle(val));

			}
			set
			{
				SetFieldValue(14, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the PoolLengthUnit field</summary>
		/// <returns>Returns nullable DisplayMeasure enum representing the PoolLengthUnit field</returns>
		public DisplayMeasure? PoolLengthUnit
		{
			get
			{
				object obj = GetFieldValue(15, 0, Fit.SubfieldIndexMainField);
				DisplayMeasure? value = obj == null ? (DisplayMeasure?)null : (DisplayMeasure)obj;
				return value;
			}
			set
			{
				SetFieldValue(15, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the WktDescription field
		/// Comment: Description of the workout</summary>
		/// <returns>Returns byte[] representing the WktDescription field</returns>
		public byte[] WktDescription
		{
			get
			{
				byte[] data = (byte[])GetFieldValue(17, 0, Fit.SubfieldIndexMainField);
				return data.Take(data.Length - 1).ToArray();
			}
			set
			{
				SetFieldValue(17, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the WktDescription field
		/// Comment: Description of the workout</summary>
		/// <returns>Returns String representing the WktDescription field</returns>
		public String GetWktDescriptionAsString()
		{
			byte[] data = (byte[])GetFieldValue(17, 0, Fit.SubfieldIndexMainField);
			return data != null ? Encoding.UTF8.GetString(data, 0, data.Length - 1) : null;
		}

		///<summary>
		/// Set WktDescription field
		/// Comment: Description of the workout</summary>
		/// <param name="wktDescription_"> field value to be set</param>
		public void SetWktDescription(String wktDescription_)
		{
			byte[] data = Encoding.UTF8.GetBytes(wktDescription_);
			byte[] zdata = new byte[data.Length + 1];
			data.CopyTo(zdata, 0);
			SetFieldValue(17, 0, zdata, Fit.SubfieldIndexMainField);
		}

		#endregion // Methods
	} // Class
} // namespace
