#region Copyright
/////////////////////////////////////////////////////////////////////////////////////////////
// Copyright 2024 Garmin International, Inc.
// Licensed under the Flexible and Interoperable Data Transfer (FIT) Protocol License; you
// may not use this file except in compliance with the Flexible and Interoperable Data
// Transfer (FIT) Protocol License.
/////////////////////////////////////////////////////////////////////////////////////////////
// ****WARNING****  This file is auto-generated!  Do NOT edit this file.
// Profile Version = 21.158.0Release
// Tag = production/release/21.158.0-0-gc9428aa
/////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Text;
using System.IO;
using System.Linq;

namespace Dynastream.Fit
{
	/// <summary>
	/// Implements the BikeProfile profile message.
	/// </summary>
	public class BikeProfileMesg : Mesg
	{
		#region Fields
		#endregion

		/// <summary>
		/// Field Numbers for <see cref="BikeProfileMesg"/>
		/// </summary>
		public sealed class FieldDefNum
		{
			public const byte MessageIndex = 254;
			public const byte Name = 0;
			public const byte Sport = 1;
			public const byte SubSport = 2;
			public const byte Odometer = 3;
			public const byte BikeSpdAntId = 4;
			public const byte BikeCadAntId = 5;
			public const byte BikeSpdcadAntId = 6;
			public const byte BikePowerAntId = 7;
			public const byte CustomWheelsize = 8;
			public const byte AutoWheelsize = 9;
			public const byte BikeWeight = 10;
			public const byte PowerCalFactor = 11;
			public const byte AutoWheelCal = 12;
			public const byte AutoPowerZero = 13;
			public const byte Id = 14;
			public const byte SpdEnabled = 15;
			public const byte CadEnabled = 16;
			public const byte SpdcadEnabled = 17;
			public const byte PowerEnabled = 18;
			public const byte CrankLength = 19;
			public const byte Enabled = 20;
			public const byte BikeSpdAntIdTransType = 21;
			public const byte BikeCadAntIdTransType = 22;
			public const byte BikeSpdcadAntIdTransType = 23;
			public const byte BikePowerAntIdTransType = 24;
			public const byte OdometerRollover = 37;
			public const byte FrontGearNum = 38;
			public const byte FrontGear = 39;
			public const byte RearGearNum = 40;
			public const byte RearGear = 41;
			public const byte ShimanoDi2Enabled = 44;
			public const byte Invalid = Fit.FieldNumInvalid;
		}

		#region Constructors
		public BikeProfileMesg() : base(Profile.GetMesg(MesgNum.BikeProfile))
		{
		}

		public BikeProfileMesg(Mesg mesg) : base(mesg)
		{
		}
		#endregion // Constructors

		#region Methods
		///<summary>
		/// Retrieves the MessageIndex field</summary>
		/// <returns>Returns nullable ushort representing the MessageIndex field</returns>
		public ushort? MessageIndex
		{
			get
			{
				Object val = GetFieldValue(254, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToUInt16(val));

			}
			set
			{
				SetFieldValue(254, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the Name field</summary>
		/// <returns>Returns byte[] representing the Name field</returns>
		public byte[] Name
		{
			get
			{
				byte[] data = (byte[])GetFieldValue(0, 0, Fit.SubfieldIndexMainField);
				return data.Take(data.Length - 1).ToArray();
			}
			set
			{
				SetFieldValue(0, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the Name field</summary>
		/// <returns>Returns String representing the Name field</returns>
		public String GetNameAsString()
		{
			byte[] data = (byte[])GetFieldValue(0, 0, Fit.SubfieldIndexMainField);
			return data != null ? Encoding.UTF8.GetString(data, 0, data.Length - 1) : null;
		}

		///<summary>
		/// Set Name field</summary>
		/// <param name="name_"> field value to be set</param>
		public void SetName(String name_)
		{
			byte[] data = Encoding.UTF8.GetBytes(name_);
			byte[] zdata = new byte[data.Length + 1];
			data.CopyTo(zdata, 0);
			SetFieldValue(0, 0, zdata, Fit.SubfieldIndexMainField);
		}

		///<summary>
		/// Retrieves the Sport field</summary>
		/// <returns>Returns nullable Sport enum representing the Sport field</returns>
		public Sport? Sport
		{
			get
			{
				object obj = GetFieldValue(1, 0, Fit.SubfieldIndexMainField);
				Sport? value = obj == null ? (Sport?)null : (Sport)obj;
				return value;
			}
			set
			{
				SetFieldValue(1, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the SubSport field</summary>
		/// <returns>Returns nullable SubSport enum representing the SubSport field</returns>
		public SubSport? SubSport
		{
			get
			{
				object obj = GetFieldValue(2, 0, Fit.SubfieldIndexMainField);
				SubSport? value = obj == null ? (SubSport?)null : (SubSport)obj;
				return value;
			}
			set
			{
				SetFieldValue(2, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the Odometer field
		/// Units: m</summary>
		/// <returns>Returns nullable float representing the Odometer field</returns>
		public float? Odometer
		{
			get
			{
				Object val = GetFieldValue(3, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToSingle(val));

			}
			set
			{
				SetFieldValue(3, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the BikeSpdAntId field</summary>
		/// <returns>Returns nullable ushort representing the BikeSpdAntId field</returns>
		public ushort? BikeSpdAntId
		{
			get
			{
				Object val = GetFieldValue(4, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToUInt16(val));

			}
			set
			{
				SetFieldValue(4, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the BikeCadAntId field</summary>
		/// <returns>Returns nullable ushort representing the BikeCadAntId field</returns>
		public ushort? BikeCadAntId
		{
			get
			{
				Object val = GetFieldValue(5, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToUInt16(val));

			}
			set
			{
				SetFieldValue(5, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the BikeSpdcadAntId field</summary>
		/// <returns>Returns nullable ushort representing the BikeSpdcadAntId field</returns>
		public ushort? BikeSpdcadAntId
		{
			get
			{
				Object val = GetFieldValue(6, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToUInt16(val));

			}
			set
			{
				SetFieldValue(6, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the BikePowerAntId field</summary>
		/// <returns>Returns nullable ushort representing the BikePowerAntId field</returns>
		public ushort? BikePowerAntId
		{
			get
			{
				Object val = GetFieldValue(7, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToUInt16(val));

			}
			set
			{
				SetFieldValue(7, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the CustomWheelsize field
		/// Units: m</summary>
		/// <returns>Returns nullable float representing the CustomWheelsize field</returns>
		public float? CustomWheelsize
		{
			get
			{
				Object val = GetFieldValue(8, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToSingle(val));

			}
			set
			{
				SetFieldValue(8, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the AutoWheelsize field
		/// Units: m</summary>
		/// <returns>Returns nullable float representing the AutoWheelsize field</returns>
		public float? AutoWheelsize
		{
			get
			{
				Object val = GetFieldValue(9, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToSingle(val));

			}
			set
			{
				SetFieldValue(9, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the BikeWeight field
		/// Units: kg</summary>
		/// <returns>Returns nullable float representing the BikeWeight field</returns>
		public float? BikeWeight
		{
			get
			{
				Object val = GetFieldValue(10, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToSingle(val));

			}
			set
			{
				SetFieldValue(10, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the PowerCalFactor field
		/// Units: %</summary>
		/// <returns>Returns nullable float representing the PowerCalFactor field</returns>
		public float? PowerCalFactor
		{
			get
			{
				Object val = GetFieldValue(11, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToSingle(val));

			}
			set
			{
				SetFieldValue(11, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the AutoWheelCal field</summary>
		/// <returns>Returns nullable Bool enum representing the AutoWheelCal field</returns>
		public Bool? AutoWheelCal
		{
			get
			{
				object obj = GetFieldValue(12, 0, Fit.SubfieldIndexMainField);
				Bool? value = obj == null ? (Bool?)null : (Bool)obj;
				return value;
			}
			set
			{
				SetFieldValue(12, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the AutoPowerZero field</summary>
		/// <returns>Returns nullable Bool enum representing the AutoPowerZero field</returns>
		public Bool? AutoPowerZero
		{
			get
			{
				object obj = GetFieldValue(13, 0, Fit.SubfieldIndexMainField);
				Bool? value = obj == null ? (Bool?)null : (Bool)obj;
				return value;
			}
			set
			{
				SetFieldValue(13, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the Id field</summary>
		/// <returns>Returns nullable byte representing the Id field</returns>
		public byte? Id
		{
			get
			{
				Object val = GetFieldValue(14, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToByte(val));

			}
			set
			{
				SetFieldValue(14, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the SpdEnabled field</summary>
		/// <returns>Returns nullable Bool enum representing the SpdEnabled field</returns>
		public Bool? SpdEnabled
		{
			get
			{
				object obj = GetFieldValue(15, 0, Fit.SubfieldIndexMainField);
				Bool? value = obj == null ? (Bool?)null : (Bool)obj;
				return value;
			}
			set
			{
				SetFieldValue(15, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the CadEnabled field</summary>
		/// <returns>Returns nullable Bool enum representing the CadEnabled field</returns>
		public Bool? CadEnabled
		{
			get
			{
				object obj = GetFieldValue(16, 0, Fit.SubfieldIndexMainField);
				Bool? value = obj == null ? (Bool?)null : (Bool)obj;
				return value;
			}
			set
			{
				SetFieldValue(16, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the SpdcadEnabled field</summary>
		/// <returns>Returns nullable Bool enum representing the SpdcadEnabled field</returns>
		public Bool? SpdcadEnabled
		{
			get
			{
				object obj = GetFieldValue(17, 0, Fit.SubfieldIndexMainField);
				Bool? value = obj == null ? (Bool?)null : (Bool)obj;
				return value;
			}
			set
			{
				SetFieldValue(17, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the PowerEnabled field</summary>
		/// <returns>Returns nullable Bool enum representing the PowerEnabled field</returns>
		public Bool? PowerEnabled
		{
			get
			{
				object obj = GetFieldValue(18, 0, Fit.SubfieldIndexMainField);
				Bool? value = obj == null ? (Bool?)null : (Bool)obj;
				return value;
			}
			set
			{
				SetFieldValue(18, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the CrankLength field
		/// Units: mm</summary>
		/// <returns>Returns nullable float representing the CrankLength field</returns>
		public float? CrankLength
		{
			get
			{
				Object val = GetFieldValue(19, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToSingle(val));

			}
			set
			{
				SetFieldValue(19, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the Enabled field</summary>
		/// <returns>Returns nullable Bool enum representing the Enabled field</returns>
		public Bool? Enabled
		{
			get
			{
				object obj = GetFieldValue(20, 0, Fit.SubfieldIndexMainField);
				Bool? value = obj == null ? (Bool?)null : (Bool)obj;
				return value;
			}
			set
			{
				SetFieldValue(20, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the BikeSpdAntIdTransType field</summary>
		/// <returns>Returns nullable byte representing the BikeSpdAntIdTransType field</returns>
		public byte? BikeSpdAntIdTransType
		{
			get
			{
				Object val = GetFieldValue(21, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToByte(val));

			}
			set
			{
				SetFieldValue(21, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the BikeCadAntIdTransType field</summary>
		/// <returns>Returns nullable byte representing the BikeCadAntIdTransType field</returns>
		public byte? BikeCadAntIdTransType
		{
			get
			{
				Object val = GetFieldValue(22, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToByte(val));

			}
			set
			{
				SetFieldValue(22, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the BikeSpdcadAntIdTransType field</summary>
		/// <returns>Returns nullable byte representing the BikeSpdcadAntIdTransType field</returns>
		public byte? BikeSpdcadAntIdTransType
		{
			get
			{
				Object val = GetFieldValue(23, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToByte(val));

			}
			set
			{
				SetFieldValue(23, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the BikePowerAntIdTransType field</summary>
		/// <returns>Returns nullable byte representing the BikePowerAntIdTransType field</returns>
		public byte? BikePowerAntIdTransType
		{
			get
			{
				Object val = GetFieldValue(24, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToByte(val));

			}
			set
			{
				SetFieldValue(24, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the OdometerRollover field
		/// Comment: Rollover counter that can be used to extend the odometer</summary>
		/// <returns>Returns nullable byte representing the OdometerRollover field</returns>
		public byte? OdometerRollover
		{
			get
			{
				Object val = GetFieldValue(37, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToByte(val));

			}
			set
			{
				SetFieldValue(37, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the FrontGearNum field
		/// Comment: Number of front gears</summary>
		/// <returns>Returns nullable byte representing the FrontGearNum field</returns>
		public byte? FrontGearNum
		{
			get
			{
				Object val = GetFieldValue(38, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToByte(val));

			}
			set
			{
				SetFieldValue(38, 0, value, Fit.SubfieldIndexMainField);
			}
		}


		/// <summary>
		///
		/// </summary>
		/// <returns>returns number of elements in field FrontGear</returns>
		public int GetNumFrontGear()
		{
			return GetNumFieldValues(39, Fit.SubfieldIndexMainField);
		}

		///<summary>
		/// Retrieves the FrontGear field
		/// Comment: Number of teeth on each gear 0 is innermost</summary>
		/// <param name="index">0 based index of FrontGear element to retrieve</param>
		/// <returns>Returns nullable byte representing the FrontGear field</returns>
		public byte? GetFrontGear(int index)
		{
			Object val = GetFieldValue(39, index, Fit.SubfieldIndexMainField);
			if (val == null)
			{
				return null;
			}

			return (Convert.ToByte(val));

		}

		/// <summary>
		/// Set FrontGear field
		/// Comment: Number of teeth on each gear 0 is innermost</summary>
		/// <param name="index">0 based index of front_gear</param>
		/// <param name="frontGear_">Nullable field value to be set</param>
		public void SetFrontGear(int index, byte? frontGear_)
		{
			SetFieldValue(39, index, frontGear_, Fit.SubfieldIndexMainField);
		}

		///<summary>
		/// Retrieves the RearGearNum field
		/// Comment: Number of rear gears</summary>
		/// <returns>Returns nullable byte representing the RearGearNum field</returns>
		public byte? RearGearNum
		{
			get
			{
				Object val = GetFieldValue(40, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToByte(val));

			}
			set
			{
				SetFieldValue(40, 0, value, Fit.SubfieldIndexMainField);
			}
		}


		/// <summary>
		///
		/// </summary>
		/// <returns>returns number of elements in field RearGear</returns>
		public int GetNumRearGear()
		{
			return GetNumFieldValues(41, Fit.SubfieldIndexMainField);
		}

		///<summary>
		/// Retrieves the RearGear field
		/// Comment: Number of teeth on each gear 0 is innermost</summary>
		/// <param name="index">0 based index of RearGear element to retrieve</param>
		/// <returns>Returns nullable byte representing the RearGear field</returns>
		public byte? GetRearGear(int index)
		{
			Object val = GetFieldValue(41, index, Fit.SubfieldIndexMainField);
			if (val == null)
			{
				return null;
			}

			return (Convert.ToByte(val));

		}

		/// <summary>
		/// Set RearGear field
		/// Comment: Number of teeth on each gear 0 is innermost</summary>
		/// <param name="index">0 based index of rear_gear</param>
		/// <param name="rearGear_">Nullable field value to be set</param>
		public void SetRearGear(int index, byte? rearGear_)
		{
			SetFieldValue(41, index, rearGear_, Fit.SubfieldIndexMainField);
		}

		///<summary>
		/// Retrieves the ShimanoDi2Enabled field</summary>
		/// <returns>Returns nullable Bool enum representing the ShimanoDi2Enabled field</returns>
		public Bool? ShimanoDi2Enabled
		{
			get
			{
				object obj = GetFieldValue(44, 0, Fit.SubfieldIndexMainField);
				Bool? value = obj == null ? (Bool?)null : (Bool)obj;
				return value;
			}
			set
			{
				SetFieldValue(44, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		#endregion // Methods
	} // Class
} // namespace
