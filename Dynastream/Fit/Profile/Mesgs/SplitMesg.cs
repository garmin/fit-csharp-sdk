#region Copyright
/////////////////////////////////////////////////////////////////////////////////////////////
// Copyright 2024 Garmin International, Inc.
// Licensed under the Flexible and Interoperable Data Transfer (FIT) Protocol License; you
// may not use this file except in compliance with the Flexible and Interoperable Data
// Transfer (FIT) Protocol License.
/////////////////////////////////////////////////////////////////////////////////////////////
// ****WARNING****  This file is auto-generated!  Do NOT edit this file.
// Profile Version = 21.141.0Release
// Tag = production/release/21.141.0-0-g2aa27e1
/////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Text;
using System.IO;
using System.Linq;

namespace Dynastream.Fit
{
    /// <summary>
    /// Implements the Split profile message.
    /// </summary>
    public class SplitMesg : Mesg
    {
        #region Fields
        #endregion

        /// <summary>
        /// Field Numbers for <see cref="SplitMesg"/>
        /// </summary>
        public sealed class FieldDefNum
        {
            public const byte MessageIndex = 254;
            public const byte SplitType = 0;
            public const byte TotalElapsedTime = 1;
            public const byte TotalTimerTime = 2;
            public const byte TotalDistance = 3;
            public const byte AvgSpeed = 4;
            public const byte StartTime = 9;
            public const byte TotalAscent = 13;
            public const byte TotalDescent = 14;
            public const byte StartPositionLat = 21;
            public const byte StartPositionLong = 22;
            public const byte EndPositionLat = 23;
            public const byte EndPositionLong = 24;
            public const byte MaxSpeed = 25;
            public const byte AvgVertSpeed = 26;
            public const byte EndTime = 27;
            public const byte TotalCalories = 28;
            public const byte StartElevation = 74;
            public const byte TotalMovingTime = 110;
            public const byte Invalid = Fit.FieldNumInvalid;
        }

        #region Constructors
        public SplitMesg() : base(Profile.GetMesg(MesgNum.Split))
        {
        }

        public SplitMesg(Mesg mesg) : base(mesg)
        {
        }
        #endregion // Constructors

        #region Methods
        ///<summary>
        /// Retrieves the MessageIndex field</summary>
        /// <returns>Returns nullable ushort representing the MessageIndex field</returns>
        public ushort? GetMessageIndex()
        {
            Object val = GetFieldValue(254, 0, Fit.SubfieldIndexMainField);
            if(val == null)
            {
                return null;
            }

            return (Convert.ToUInt16(val));
            
        }

        /// <summary>
        /// Set MessageIndex field</summary>
        /// <param name="messageIndex_">Nullable field value to be set</param>
        public void SetMessageIndex(ushort? messageIndex_)
        {
            SetFieldValue(254, 0, messageIndex_, Fit.SubfieldIndexMainField);
        }
        
        ///<summary>
        /// Retrieves the SplitType field</summary>
        /// <returns>Returns nullable SplitType enum representing the SplitType field</returns>
        public SplitType? GetSplitType()
        {
            object obj = GetFieldValue(0, 0, Fit.SubfieldIndexMainField);
            SplitType? value = obj == null ? (SplitType?)null : (SplitType)obj;
            return value;
        }

        /// <summary>
        /// Set SplitType field</summary>
        /// <param name="splitType_">Nullable field value to be set</param>
        public void SetSplitType(SplitType? splitType_)
        {
            SetFieldValue(0, 0, splitType_, Fit.SubfieldIndexMainField);
        }
        
        ///<summary>
        /// Retrieves the TotalElapsedTime field
        /// Units: s</summary>
        /// <returns>Returns nullable float representing the TotalElapsedTime field</returns>
        public float? GetTotalElapsedTime()
        {
            Object val = GetFieldValue(1, 0, Fit.SubfieldIndexMainField);
            if(val == null)
            {
                return null;
            }

            return (Convert.ToSingle(val));
            
        }

        /// <summary>
        /// Set TotalElapsedTime field
        /// Units: s</summary>
        /// <param name="totalElapsedTime_">Nullable field value to be set</param>
        public void SetTotalElapsedTime(float? totalElapsedTime_)
        {
            SetFieldValue(1, 0, totalElapsedTime_, Fit.SubfieldIndexMainField);
        }
        
        ///<summary>
        /// Retrieves the TotalTimerTime field
        /// Units: s</summary>
        /// <returns>Returns nullable float representing the TotalTimerTime field</returns>
        public float? GetTotalTimerTime()
        {
            Object val = GetFieldValue(2, 0, Fit.SubfieldIndexMainField);
            if(val == null)
            {
                return null;
            }

            return (Convert.ToSingle(val));
            
        }

        /// <summary>
        /// Set TotalTimerTime field
        /// Units: s</summary>
        /// <param name="totalTimerTime_">Nullable field value to be set</param>
        public void SetTotalTimerTime(float? totalTimerTime_)
        {
            SetFieldValue(2, 0, totalTimerTime_, Fit.SubfieldIndexMainField);
        }
        
        ///<summary>
        /// Retrieves the TotalDistance field
        /// Units: m</summary>
        /// <returns>Returns nullable float representing the TotalDistance field</returns>
        public float? GetTotalDistance()
        {
            Object val = GetFieldValue(3, 0, Fit.SubfieldIndexMainField);
            if(val == null)
            {
                return null;
            }

            return (Convert.ToSingle(val));
            
        }

        /// <summary>
        /// Set TotalDistance field
        /// Units: m</summary>
        /// <param name="totalDistance_">Nullable field value to be set</param>
        public void SetTotalDistance(float? totalDistance_)
        {
            SetFieldValue(3, 0, totalDistance_, Fit.SubfieldIndexMainField);
        }
        
        ///<summary>
        /// Retrieves the AvgSpeed field
        /// Units: m/s</summary>
        /// <returns>Returns nullable float representing the AvgSpeed field</returns>
        public float? GetAvgSpeed()
        {
            Object val = GetFieldValue(4, 0, Fit.SubfieldIndexMainField);
            if(val == null)
            {
                return null;
            }

            return (Convert.ToSingle(val));
            
        }

        /// <summary>
        /// Set AvgSpeed field
        /// Units: m/s</summary>
        /// <param name="avgSpeed_">Nullable field value to be set</param>
        public void SetAvgSpeed(float? avgSpeed_)
        {
            SetFieldValue(4, 0, avgSpeed_, Fit.SubfieldIndexMainField);
        }
        
        ///<summary>
        /// Retrieves the StartTime field</summary>
        /// <returns>Returns DateTime representing the StartTime field</returns>
        public DateTime GetStartTime()
        {
            Object val = GetFieldValue(9, 0, Fit.SubfieldIndexMainField);
            if(val == null)
            {
                return null;
            }

            return TimestampToDateTime(Convert.ToUInt32(val));
            
        }

        /// <summary>
        /// Set StartTime field</summary>
        /// <param name="startTime_">Nullable field value to be set</param>
        public void SetStartTime(DateTime startTime_)
        {
            SetFieldValue(9, 0, startTime_.GetTimeStamp(), Fit.SubfieldIndexMainField);
        }
        
        ///<summary>
        /// Retrieves the TotalAscent field
        /// Units: m</summary>
        /// <returns>Returns nullable ushort representing the TotalAscent field</returns>
        public ushort? GetTotalAscent()
        {
            Object val = GetFieldValue(13, 0, Fit.SubfieldIndexMainField);
            if(val == null)
            {
                return null;
            }

            return (Convert.ToUInt16(val));
            
        }

        /// <summary>
        /// Set TotalAscent field
        /// Units: m</summary>
        /// <param name="totalAscent_">Nullable field value to be set</param>
        public void SetTotalAscent(ushort? totalAscent_)
        {
            SetFieldValue(13, 0, totalAscent_, Fit.SubfieldIndexMainField);
        }
        
        ///<summary>
        /// Retrieves the TotalDescent field
        /// Units: m</summary>
        /// <returns>Returns nullable ushort representing the TotalDescent field</returns>
        public ushort? GetTotalDescent()
        {
            Object val = GetFieldValue(14, 0, Fit.SubfieldIndexMainField);
            if(val == null)
            {
                return null;
            }

            return (Convert.ToUInt16(val));
            
        }

        /// <summary>
        /// Set TotalDescent field
        /// Units: m</summary>
        /// <param name="totalDescent_">Nullable field value to be set</param>
        public void SetTotalDescent(ushort? totalDescent_)
        {
            SetFieldValue(14, 0, totalDescent_, Fit.SubfieldIndexMainField);
        }
        
        ///<summary>
        /// Retrieves the StartPositionLat field
        /// Units: semicircles</summary>
        /// <returns>Returns nullable int representing the StartPositionLat field</returns>
        public int? GetStartPositionLat()
        {
            Object val = GetFieldValue(21, 0, Fit.SubfieldIndexMainField);
            if(val == null)
            {
                return null;
            }

            return (Convert.ToInt32(val));
            
        }

        /// <summary>
        /// Set StartPositionLat field
        /// Units: semicircles</summary>
        /// <param name="startPositionLat_">Nullable field value to be set</param>
        public void SetStartPositionLat(int? startPositionLat_)
        {
            SetFieldValue(21, 0, startPositionLat_, Fit.SubfieldIndexMainField);
        }
        
        ///<summary>
        /// Retrieves the StartPositionLong field
        /// Units: semicircles</summary>
        /// <returns>Returns nullable int representing the StartPositionLong field</returns>
        public int? GetStartPositionLong()
        {
            Object val = GetFieldValue(22, 0, Fit.SubfieldIndexMainField);
            if(val == null)
            {
                return null;
            }

            return (Convert.ToInt32(val));
            
        }

        /// <summary>
        /// Set StartPositionLong field
        /// Units: semicircles</summary>
        /// <param name="startPositionLong_">Nullable field value to be set</param>
        public void SetStartPositionLong(int? startPositionLong_)
        {
            SetFieldValue(22, 0, startPositionLong_, Fit.SubfieldIndexMainField);
        }
        
        ///<summary>
        /// Retrieves the EndPositionLat field
        /// Units: semicircles</summary>
        /// <returns>Returns nullable int representing the EndPositionLat field</returns>
        public int? GetEndPositionLat()
        {
            Object val = GetFieldValue(23, 0, Fit.SubfieldIndexMainField);
            if(val == null)
            {
                return null;
            }

            return (Convert.ToInt32(val));
            
        }

        /// <summary>
        /// Set EndPositionLat field
        /// Units: semicircles</summary>
        /// <param name="endPositionLat_">Nullable field value to be set</param>
        public void SetEndPositionLat(int? endPositionLat_)
        {
            SetFieldValue(23, 0, endPositionLat_, Fit.SubfieldIndexMainField);
        }
        
        ///<summary>
        /// Retrieves the EndPositionLong field
        /// Units: semicircles</summary>
        /// <returns>Returns nullable int representing the EndPositionLong field</returns>
        public int? GetEndPositionLong()
        {
            Object val = GetFieldValue(24, 0, Fit.SubfieldIndexMainField);
            if(val == null)
            {
                return null;
            }

            return (Convert.ToInt32(val));
            
        }

        /// <summary>
        /// Set EndPositionLong field
        /// Units: semicircles</summary>
        /// <param name="endPositionLong_">Nullable field value to be set</param>
        public void SetEndPositionLong(int? endPositionLong_)
        {
            SetFieldValue(24, 0, endPositionLong_, Fit.SubfieldIndexMainField);
        }
        
        ///<summary>
        /// Retrieves the MaxSpeed field
        /// Units: m/s</summary>
        /// <returns>Returns nullable float representing the MaxSpeed field</returns>
        public float? GetMaxSpeed()
        {
            Object val = GetFieldValue(25, 0, Fit.SubfieldIndexMainField);
            if(val == null)
            {
                return null;
            }

            return (Convert.ToSingle(val));
            
        }

        /// <summary>
        /// Set MaxSpeed field
        /// Units: m/s</summary>
        /// <param name="maxSpeed_">Nullable field value to be set</param>
        public void SetMaxSpeed(float? maxSpeed_)
        {
            SetFieldValue(25, 0, maxSpeed_, Fit.SubfieldIndexMainField);
        }
        
        ///<summary>
        /// Retrieves the AvgVertSpeed field
        /// Units: m/s</summary>
        /// <returns>Returns nullable float representing the AvgVertSpeed field</returns>
        public float? GetAvgVertSpeed()
        {
            Object val = GetFieldValue(26, 0, Fit.SubfieldIndexMainField);
            if(val == null)
            {
                return null;
            }

            return (Convert.ToSingle(val));
            
        }

        /// <summary>
        /// Set AvgVertSpeed field
        /// Units: m/s</summary>
        /// <param name="avgVertSpeed_">Nullable field value to be set</param>
        public void SetAvgVertSpeed(float? avgVertSpeed_)
        {
            SetFieldValue(26, 0, avgVertSpeed_, Fit.SubfieldIndexMainField);
        }
        
        ///<summary>
        /// Retrieves the EndTime field</summary>
        /// <returns>Returns DateTime representing the EndTime field</returns>
        public DateTime GetEndTime()
        {
            Object val = GetFieldValue(27, 0, Fit.SubfieldIndexMainField);
            if(val == null)
            {
                return null;
            }

            return TimestampToDateTime(Convert.ToUInt32(val));
            
        }

        /// <summary>
        /// Set EndTime field</summary>
        /// <param name="endTime_">Nullable field value to be set</param>
        public void SetEndTime(DateTime endTime_)
        {
            SetFieldValue(27, 0, endTime_.GetTimeStamp(), Fit.SubfieldIndexMainField);
        }
        
        ///<summary>
        /// Retrieves the TotalCalories field
        /// Units: kcal</summary>
        /// <returns>Returns nullable uint representing the TotalCalories field</returns>
        public uint? GetTotalCalories()
        {
            Object val = GetFieldValue(28, 0, Fit.SubfieldIndexMainField);
            if(val == null)
            {
                return null;
            }

            return (Convert.ToUInt32(val));
            
        }

        /// <summary>
        /// Set TotalCalories field
        /// Units: kcal</summary>
        /// <param name="totalCalories_">Nullable field value to be set</param>
        public void SetTotalCalories(uint? totalCalories_)
        {
            SetFieldValue(28, 0, totalCalories_, Fit.SubfieldIndexMainField);
        }
        
        ///<summary>
        /// Retrieves the StartElevation field
        /// Units: m</summary>
        /// <returns>Returns nullable float representing the StartElevation field</returns>
        public float? GetStartElevation()
        {
            Object val = GetFieldValue(74, 0, Fit.SubfieldIndexMainField);
            if(val == null)
            {
                return null;
            }

            return (Convert.ToSingle(val));
            
        }

        /// <summary>
        /// Set StartElevation field
        /// Units: m</summary>
        /// <param name="startElevation_">Nullable field value to be set</param>
        public void SetStartElevation(float? startElevation_)
        {
            SetFieldValue(74, 0, startElevation_, Fit.SubfieldIndexMainField);
        }
        
        ///<summary>
        /// Retrieves the TotalMovingTime field
        /// Units: s</summary>
        /// <returns>Returns nullable float representing the TotalMovingTime field</returns>
        public float? GetTotalMovingTime()
        {
            Object val = GetFieldValue(110, 0, Fit.SubfieldIndexMainField);
            if(val == null)
            {
                return null;
            }

            return (Convert.ToSingle(val));
            
        }

        /// <summary>
        /// Set TotalMovingTime field
        /// Units: s</summary>
        /// <param name="totalMovingTime_">Nullable field value to be set</param>
        public void SetTotalMovingTime(float? totalMovingTime_)
        {
            SetFieldValue(110, 0, totalMovingTime_, Fit.SubfieldIndexMainField);
        }
        
        #endregion // Methods
    } // Class
} // namespace
