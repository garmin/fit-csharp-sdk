#region Copyright
/////////////////////////////////////////////////////////////////////////////////////////////
// Copyright 2024 Garmin International, Inc.
// Licensed under the Flexible and Interoperable Data Transfer (FIT) Protocol License; you
// may not use this file except in compliance with the Flexible and Interoperable Data
// Transfer (FIT) Protocol License.
/////////////////////////////////////////////////////////////////////////////////////////////
// ****WARNING****  This file is auto-generated!  Do NOT edit this file.
// Profile Version = 21.158.0Release
// Tag = production/release/21.158.0-0-gc9428aa
/////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Text;
using System.IO;
using System.Linq;

namespace Dynastream.Fit
{
	/// <summary>
	/// Implements the WeatherConditions profile message.
	/// </summary>
	public class WeatherConditionsMesg : Mesg
	{
		#region Fields
		#endregion

		/// <summary>
		/// Field Numbers for <see cref="WeatherConditionsMesg"/>
		/// </summary>
		public sealed class FieldDefNum
		{
			public const byte Timestamp = 253;
			public const byte WeatherReport = 0;
			public const byte Temperature = 1;
			public const byte Condition = 2;
			public const byte WindDirection = 3;
			public const byte WindSpeed = 4;
			public const byte PrecipitationProbability = 5;
			public const byte TemperatureFeelsLike = 6;
			public const byte RelativeHumidity = 7;
			public const byte Location = 8;
			public const byte ObservedAtTime = 9;
			public const byte ObservedLocationLat = 10;
			public const byte ObservedLocationLong = 11;
			public const byte DayOfWeek = 12;
			public const byte HighTemperature = 13;
			public const byte LowTemperature = 14;
			public const byte Invalid = Fit.FieldNumInvalid;
		}

		#region Constructors
		public WeatherConditionsMesg() : base(Profile.GetMesg(MesgNum.WeatherConditions))
		{
		}

		public WeatherConditionsMesg(Mesg mesg) : base(mesg)
		{
		}
		#endregion // Constructors

		#region Methods
		///<summary>
		/// Retrieves the Timestamp field
		/// Comment: time of update for current conditions, else forecast time</summary>
		/// <returns>Returns DateTime representing the Timestamp field</returns>
		public DateTime Timestamp
		{
			get
			{
				Object val = GetFieldValue(253, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return TimestampToDateTime(Convert.ToUInt32(val));

			}
			set
			{
				SetFieldValue(253, 0, value.GetTimeStamp(), Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the WeatherReport field
		/// Comment: Current or forecast</summary>
		/// <returns>Returns nullable WeatherReport enum representing the WeatherReport field</returns>
		public WeatherReport? WeatherReport
		{
			get
			{
				object obj = GetFieldValue(0, 0, Fit.SubfieldIndexMainField);
				WeatherReport? value = obj == null ? (WeatherReport?)null : (WeatherReport)obj;
				return value;
			}
			set
			{
				SetFieldValue(0, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the Temperature field
		/// Units: C</summary>
		/// <returns>Returns nullable sbyte representing the Temperature field</returns>
		public sbyte? Temperature
		{
			get
			{
				Object val = GetFieldValue(1, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToSByte(val));

			}
			set
			{
				SetFieldValue(1, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the Condition field
		/// Comment: Corresponds to GSC Response weatherIcon field</summary>
		/// <returns>Returns nullable WeatherStatus enum representing the Condition field</returns>
		public WeatherStatus? Condition
		{
			get
			{
				object obj = GetFieldValue(2, 0, Fit.SubfieldIndexMainField);
				WeatherStatus? value = obj == null ? (WeatherStatus?)null : (WeatherStatus)obj;
				return value;
			}
			set
			{
				SetFieldValue(2, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the WindDirection field
		/// Units: degrees</summary>
		/// <returns>Returns nullable ushort representing the WindDirection field</returns>
		public ushort? WindDirection
		{
			get
			{
				Object val = GetFieldValue(3, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToUInt16(val));

			}
			set
			{
				SetFieldValue(3, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the WindSpeed field
		/// Units: m/s</summary>
		/// <returns>Returns nullable float representing the WindSpeed field</returns>
		public float? WindSpeed
		{
			get
			{
				Object val = GetFieldValue(4, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToSingle(val));

			}
			set
			{
				SetFieldValue(4, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the PrecipitationProbability field
		/// Comment: range 0-100</summary>
		/// <returns>Returns nullable byte representing the PrecipitationProbability field</returns>
		public byte? PrecipitationProbability
		{
			get
			{
				Object val = GetFieldValue(5, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToByte(val));

			}
			set
			{
				SetFieldValue(5, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the TemperatureFeelsLike field
		/// Units: C
		/// Comment: Heat Index if GCS heatIdx above or equal to 90F or wind chill if GCS windChill below or equal to 32F</summary>
		/// <returns>Returns nullable sbyte representing the TemperatureFeelsLike field</returns>
		public sbyte? TemperatureFeelsLike
		{
			get
			{
				Object val = GetFieldValue(6, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToSByte(val));

			}
			set
			{
				SetFieldValue(6, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the RelativeHumidity field</summary>
		/// <returns>Returns nullable byte representing the RelativeHumidity field</returns>
		public byte? RelativeHumidity
		{
			get
			{
				Object val = GetFieldValue(7, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToByte(val));

			}
			set
			{
				SetFieldValue(7, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the Location field
		/// Comment: string corresponding to GCS response location string</summary>
		/// <returns>Returns byte[] representing the Location field</returns>
		public byte[] Location
		{
			get
			{
				byte[] data = (byte[])GetFieldValue(8, 0, Fit.SubfieldIndexMainField);
				return data.Take(data.Length - 1).ToArray();
			}
			set
			{
				SetFieldValue(8, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the Location field
		/// Comment: string corresponding to GCS response location string</summary>
		/// <returns>Returns String representing the Location field</returns>
		public String GetLocationAsString()
		{
			byte[] data = (byte[])GetFieldValue(8, 0, Fit.SubfieldIndexMainField);
			return data != null ? Encoding.UTF8.GetString(data, 0, data.Length - 1) : null;
		}

		///<summary>
		/// Set Location field
		/// Comment: string corresponding to GCS response location string</summary>
		/// <param name="location_"> field value to be set</param>
		public void SetLocation(String location_)
		{
			byte[] data = Encoding.UTF8.GetBytes(location_);
			byte[] zdata = new byte[data.Length + 1];
			data.CopyTo(zdata, 0);
			SetFieldValue(8, 0, zdata, Fit.SubfieldIndexMainField);
		}

		///<summary>
		/// Retrieves the ObservedAtTime field</summary>
		/// <returns>Returns DateTime representing the ObservedAtTime field</returns>
		public DateTime ObservedAtTime
		{
			get
			{
				Object val = GetFieldValue(9, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return TimestampToDateTime(Convert.ToUInt32(val));

			}
			set
			{
				SetFieldValue(9, 0, value.GetTimeStamp(), Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the ObservedLocationLat field
		/// Units: semicircles</summary>
		/// <returns>Returns nullable int representing the ObservedLocationLat field</returns>
		public int? ObservedLocationLat
		{
			get
			{
				Object val = GetFieldValue(10, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToInt32(val));

			}
			set
			{
				SetFieldValue(10, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the ObservedLocationLong field
		/// Units: semicircles</summary>
		/// <returns>Returns nullable int representing the ObservedLocationLong field</returns>
		public int? ObservedLocationLong
		{
			get
			{
				Object val = GetFieldValue(11, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToInt32(val));

			}
			set
			{
				SetFieldValue(11, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the DayOfWeek field</summary>
		/// <returns>Returns nullable DayOfWeek enum representing the DayOfWeek field</returns>
		public DayOfWeek? DayOfWeek
		{
			get
			{
				object obj = GetFieldValue(12, 0, Fit.SubfieldIndexMainField);
				DayOfWeek? value = obj == null ? (DayOfWeek?)null : (DayOfWeek)obj;
				return value;
			}
			set
			{
				SetFieldValue(12, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the HighTemperature field
		/// Units: C</summary>
		/// <returns>Returns nullable sbyte representing the HighTemperature field</returns>
		public sbyte? HighTemperature
		{
			get
			{
				Object val = GetFieldValue(13, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToSByte(val));

			}
			set
			{
				SetFieldValue(13, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the LowTemperature field
		/// Units: C</summary>
		/// <returns>Returns nullable sbyte representing the LowTemperature field</returns>
		public sbyte? LowTemperature
		{
			get
			{
				Object val = GetFieldValue(14, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToSByte(val));

			}
			set
			{
				SetFieldValue(14, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		#endregion // Methods
	} // Class
} // namespace
