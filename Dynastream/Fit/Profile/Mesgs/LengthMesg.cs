#region Copyright
/////////////////////////////////////////////////////////////////////////////////////////////
// Copyright 2024 Garmin International, Inc.
// Licensed under the Flexible and Interoperable Data Transfer (FIT) Protocol License; you
// may not use this file except in compliance with the Flexible and Interoperable Data
// Transfer (FIT) Protocol License.
/////////////////////////////////////////////////////////////////////////////////////////////
// ****WARNING****  This file is auto-generated!  Do NOT edit this file.
// Profile Version = 21.158.0Release
// Tag = production/release/21.158.0-0-gc9428aa
/////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Text;
using System.IO;
using System.Linq;

namespace Dynastream.Fit
{
	/// <summary>
	/// Implements the Length profile message.
	/// </summary>
	public class LengthMesg : Mesg
	{
		#region Fields
		#endregion

		/// <summary>
		/// Field Numbers for <see cref="LengthMesg"/>
		/// </summary>
		public sealed class FieldDefNum
		{
			public const byte MessageIndex = 254;
			public const byte Timestamp = 253;
			public const byte Event = 0;
			public const byte EventType = 1;
			public const byte StartTime = 2;
			public const byte TotalElapsedTime = 3;
			public const byte TotalTimerTime = 4;
			public const byte TotalStrokes = 5;
			public const byte AvgSpeed = 6;
			public const byte SwimStroke = 7;
			public const byte AvgSwimmingCadence = 9;
			public const byte EventGroup = 10;
			public const byte TotalCalories = 11;
			public const byte LengthType = 12;
			public const byte PlayerScore = 18;
			public const byte OpponentScore = 19;
			public const byte StrokeCount = 20;
			public const byte ZoneCount = 21;
			public const byte EnhancedAvgRespirationRate = 22;
			public const byte EnhancedMaxRespirationRate = 23;
			public const byte AvgRespirationRate = 24;
			public const byte MaxRespirationRate = 25;
			public const byte Invalid = Fit.FieldNumInvalid;
		}

		#region Constructors
		public LengthMesg() : base(Profile.GetMesg(MesgNum.Length))
		{
		}

		public LengthMesg(Mesg mesg) : base(mesg)
		{
		}
		#endregion // Constructors

		#region Methods
		///<summary>
		/// Retrieves the MessageIndex field</summary>
		/// <returns>Returns nullable ushort representing the MessageIndex field</returns>
		public ushort? MessageIndex
		{
			get
			{
				Object val = GetFieldValue(254, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToUInt16(val));

			}
			set
			{
				SetFieldValue(254, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the Timestamp field</summary>
		/// <returns>Returns DateTime representing the Timestamp field</returns>
		public DateTime Timestamp
		{
			get
			{
				Object val = GetFieldValue(253, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return TimestampToDateTime(Convert.ToUInt32(val));

			}
			set
			{
				SetFieldValue(253, 0, value.GetTimeStamp(), Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the Event field</summary>
		/// <returns>Returns nullable Event enum representing the Event field</returns>
		public Event? Event
		{
			get
			{
				object obj = GetFieldValue(0, 0, Fit.SubfieldIndexMainField);
				Event? value = obj == null ? (Event?)null : (Event)obj;
				return value;
			}
			set
			{
				SetFieldValue(0, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the EventType field</summary>
		/// <returns>Returns nullable EventType enum representing the EventType field</returns>
		public EventType? EventType
		{
			get
			{
				object obj = GetFieldValue(1, 0, Fit.SubfieldIndexMainField);
				EventType? value = obj == null ? (EventType?)null : (EventType)obj;
				return value;
			}
			set
			{
				SetFieldValue(1, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the StartTime field</summary>
		/// <returns>Returns DateTime representing the StartTime field</returns>
		public DateTime StartTime
		{
			get
			{
				Object val = GetFieldValue(2, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return TimestampToDateTime(Convert.ToUInt32(val));

			}
			set
			{
				SetFieldValue(2, 0, value.GetTimeStamp(), Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the TotalElapsedTime field
		/// Units: s</summary>
		/// <returns>Returns nullable float representing the TotalElapsedTime field</returns>
		public float? TotalElapsedTime
		{
			get
			{
				Object val = GetFieldValue(3, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToSingle(val));

			}
			set
			{
				SetFieldValue(3, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the TotalTimerTime field
		/// Units: s</summary>
		/// <returns>Returns nullable float representing the TotalTimerTime field</returns>
		public float? TotalTimerTime
		{
			get
			{
				Object val = GetFieldValue(4, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToSingle(val));

			}
			set
			{
				SetFieldValue(4, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the TotalStrokes field
		/// Units: strokes</summary>
		/// <returns>Returns nullable ushort representing the TotalStrokes field</returns>
		public ushort? TotalStrokes
		{
			get
			{
				Object val = GetFieldValue(5, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToUInt16(val));

			}
			set
			{
				SetFieldValue(5, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the AvgSpeed field
		/// Units: m/s</summary>
		/// <returns>Returns nullable float representing the AvgSpeed field</returns>
		public float? AvgSpeed
		{
			get
			{
				Object val = GetFieldValue(6, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToSingle(val));

			}
			set
			{
				SetFieldValue(6, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the SwimStroke field
		/// Units: swim_stroke</summary>
		/// <returns>Returns nullable SwimStroke enum representing the SwimStroke field</returns>
		public SwimStroke? SwimStroke
		{
			get
			{
				object obj = GetFieldValue(7, 0, Fit.SubfieldIndexMainField);
				SwimStroke? value = obj == null ? (SwimStroke?)null : (SwimStroke)obj;
				return value;
			}
			set
			{
				SetFieldValue(7, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the AvgSwimmingCadence field
		/// Units: strokes/min</summary>
		/// <returns>Returns nullable byte representing the AvgSwimmingCadence field</returns>
		public byte? AvgSwimmingCadence
		{
			get
			{
				Object val = GetFieldValue(9, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToByte(val));

			}
			set
			{
				SetFieldValue(9, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the EventGroup field</summary>
		/// <returns>Returns nullable byte representing the EventGroup field</returns>
		public byte? EventGroup
		{
			get
			{
				Object val = GetFieldValue(10, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToByte(val));

			}
			set
			{
				SetFieldValue(10, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the TotalCalories field
		/// Units: kcal</summary>
		/// <returns>Returns nullable ushort representing the TotalCalories field</returns>
		public ushort? TotalCalories
		{
			get
			{
				Object val = GetFieldValue(11, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToUInt16(val));

			}
			set
			{
				SetFieldValue(11, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the LengthType field</summary>
		/// <returns>Returns nullable LengthType enum representing the LengthType field</returns>
		public LengthType? LengthType
		{
			get
			{
				object obj = GetFieldValue(12, 0, Fit.SubfieldIndexMainField);
				LengthType? value = obj == null ? (LengthType?)null : (LengthType)obj;
				return value;
			}
			set
			{
				SetFieldValue(12, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the PlayerScore field</summary>
		/// <returns>Returns nullable ushort representing the PlayerScore field</returns>
		public ushort? PlayerScore
		{
			get
			{
				Object val = GetFieldValue(18, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToUInt16(val));

			}
			set
			{
				SetFieldValue(18, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the OpponentScore field</summary>
		/// <returns>Returns nullable ushort representing the OpponentScore field</returns>
		public ushort? OpponentScore
		{
			get
			{
				Object val = GetFieldValue(19, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToUInt16(val));

			}
			set
			{
				SetFieldValue(19, 0, value, Fit.SubfieldIndexMainField);
			}
		}


		/// <summary>
		///
		/// </summary>
		/// <returns>returns number of elements in field StrokeCount</returns>
		public int GetNumStrokeCount()
		{
			return GetNumFieldValues(20, Fit.SubfieldIndexMainField);
		}

		///<summary>
		/// Retrieves the StrokeCount field
		/// Units: counts
		/// Comment: stroke_type enum used as the index</summary>
		/// <param name="index">0 based index of StrokeCount element to retrieve</param>
		/// <returns>Returns nullable ushort representing the StrokeCount field</returns>
		public ushort? GetStrokeCount(int index)
		{
			Object val = GetFieldValue(20, index, Fit.SubfieldIndexMainField);
			if (val == null)
			{
				return null;
			}

			return (Convert.ToUInt16(val));

		}

		/// <summary>
		/// Set StrokeCount field
		/// Units: counts
		/// Comment: stroke_type enum used as the index</summary>
		/// <param name="index">0 based index of stroke_count</param>
		/// <param name="strokeCount_">Nullable field value to be set</param>
		public void SetStrokeCount(int index, ushort? strokeCount_)
		{
			SetFieldValue(20, index, strokeCount_, Fit.SubfieldIndexMainField);
		}


		/// <summary>
		///
		/// </summary>
		/// <returns>returns number of elements in field ZoneCount</returns>
		public int GetNumZoneCount()
		{
			return GetNumFieldValues(21, Fit.SubfieldIndexMainField);
		}

		///<summary>
		/// Retrieves the ZoneCount field
		/// Units: counts
		/// Comment: zone number used as the index</summary>
		/// <param name="index">0 based index of ZoneCount element to retrieve</param>
		/// <returns>Returns nullable ushort representing the ZoneCount field</returns>
		public ushort? GetZoneCount(int index)
		{
			Object val = GetFieldValue(21, index, Fit.SubfieldIndexMainField);
			if (val == null)
			{
				return null;
			}

			return (Convert.ToUInt16(val));

		}

		/// <summary>
		/// Set ZoneCount field
		/// Units: counts
		/// Comment: zone number used as the index</summary>
		/// <param name="index">0 based index of zone_count</param>
		/// <param name="zoneCount_">Nullable field value to be set</param>
		public void SetZoneCount(int index, ushort? zoneCount_)
		{
			SetFieldValue(21, index, zoneCount_, Fit.SubfieldIndexMainField);
		}

		///<summary>
		/// Retrieves the EnhancedAvgRespirationRate field
		/// Units: Breaths/min</summary>
		/// <returns>Returns nullable float representing the EnhancedAvgRespirationRate field</returns>
		public float? EnhancedAvgRespirationRate
		{
			get
			{
				Object val = GetFieldValue(22, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToSingle(val));

			}
			set
			{
				SetFieldValue(22, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the EnhancedMaxRespirationRate field
		/// Units: Breaths/min</summary>
		/// <returns>Returns nullable float representing the EnhancedMaxRespirationRate field</returns>
		public float? EnhancedMaxRespirationRate
		{
			get
			{
				Object val = GetFieldValue(23, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToSingle(val));

			}
			set
			{
				SetFieldValue(23, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the AvgRespirationRate field</summary>
		/// <returns>Returns nullable byte representing the AvgRespirationRate field</returns>
		public byte? AvgRespirationRate
		{
			get
			{
				Object val = GetFieldValue(24, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToByte(val));

			}
			set
			{
				SetFieldValue(24, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the MaxRespirationRate field</summary>
		/// <returns>Returns nullable byte representing the MaxRespirationRate field</returns>
		public byte? MaxRespirationRate
		{
			get
			{
				Object val = GetFieldValue(25, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToByte(val));

			}
			set
			{
				SetFieldValue(25, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		#endregion // Methods
	} // Class
} // namespace
