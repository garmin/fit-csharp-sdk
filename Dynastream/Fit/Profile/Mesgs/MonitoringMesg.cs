#region Copyright
/////////////////////////////////////////////////////////////////////////////////////////////
// Copyright 2024 Garmin International, Inc.
// Licensed under the Flexible and Interoperable Data Transfer (FIT) Protocol License; you
// may not use this file except in compliance with the Flexible and Interoperable Data
// Transfer (FIT) Protocol License.
/////////////////////////////////////////////////////////////////////////////////////////////
// ****WARNING****  This file is auto-generated!  Do NOT edit this file.
// Profile Version = 21.158.0Release
// Tag = production/release/21.158.0-0-gc9428aa
/////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Text;
using System.IO;
using System.Linq;

namespace Dynastream.Fit
{
	/// <summary>
	/// Implements the Monitoring profile message.
	/// </summary>
	public class MonitoringMesg : Mesg
	{
		#region Fields
		static class CyclesSubfield
		{
			public static ushort Steps = 0;
			public static ushort Strokes = 1;
			public static ushort Subfields = 2;
			public static ushort Active = Fit.SubfieldIndexActiveSubfield;
			public static ushort MainField = Fit.SubfieldIndexMainField;
		}
		#endregion

		/// <summary>
		/// Field Numbers for <see cref="MonitoringMesg"/>
		/// </summary>
		public sealed class FieldDefNum
		{
			public const byte Timestamp = 253;
			public const byte DeviceIndex = 0;
			public const byte Calories = 1;
			public const byte Distance = 2;
			public const byte Cycles = 3;
			public const byte ActiveTime = 4;
			public const byte ActivityType = 5;
			public const byte ActivitySubtype = 6;
			public const byte ActivityLevel = 7;
			public const byte Distance16 = 8;
			public const byte Cycles16 = 9;
			public const byte ActiveTime16 = 10;
			public const byte LocalTimestamp = 11;
			public const byte Temperature = 12;
			public const byte TemperatureMin = 14;
			public const byte TemperatureMax = 15;
			public const byte ActivityTime = 16;
			public const byte ActiveCalories = 19;
			public const byte CurrentActivityTypeIntensity = 24;
			public const byte TimestampMin8 = 25;
			public const byte Timestamp16 = 26;
			public const byte HeartRate = 27;
			public const byte Intensity = 28;
			public const byte DurationMin = 29;
			public const byte Duration = 30;
			public const byte Ascent = 31;
			public const byte Descent = 32;
			public const byte ModerateActivityMinutes = 33;
			public const byte VigorousActivityMinutes = 34;
			public const byte Invalid = Fit.FieldNumInvalid;
		}

		#region Constructors
		public MonitoringMesg() : base(Profile.GetMesg(MesgNum.Monitoring))
		{
		}

		public MonitoringMesg(Mesg mesg) : base(mesg)
		{
		}
		#endregion // Constructors

		#region Methods
		///<summary>
		/// Retrieves the Timestamp field
		/// Units: s
		/// Comment: Must align to logging interval, for example, time must be 00:00:00 for daily log.</summary>
		/// <returns>Returns DateTime representing the Timestamp field</returns>
		public DateTime Timestamp
		{
			get
			{
				Object val = GetFieldValue(253, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return TimestampToDateTime(Convert.ToUInt32(val));

			}
			set
			{
				SetFieldValue(253, 0, value.GetTimeStamp(), Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the DeviceIndex field
		/// Comment: Associates this data to device_info message. Not required for file with single device (sensor).</summary>
		/// <returns>Returns nullable byte representing the DeviceIndex field</returns>
		public byte? DeviceIndex
		{
			get
			{
				Object val = GetFieldValue(0, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToByte(val));

			}
			set
			{
				SetFieldValue(0, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the Calories field
		/// Units: kcal
		/// Comment: Accumulated total calories. Maintained by MonitoringReader for each activity_type. See SDK documentation</summary>
		/// <returns>Returns nullable ushort representing the Calories field</returns>
		public ushort? Calories
		{
			get
			{
				Object val = GetFieldValue(1, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToUInt16(val));

			}
			set
			{
				SetFieldValue(1, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the Distance field
		/// Units: m
		/// Comment: Accumulated distance. Maintained by MonitoringReader for each activity_type. See SDK documentation.</summary>
		/// <returns>Returns nullable float representing the Distance field</returns>
		public float? Distance
		{
			get
			{
				Object val = GetFieldValue(2, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToSingle(val));

			}
			set
			{
				SetFieldValue(2, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the Cycles field
		/// Units: cycles
		/// Comment: Accumulated cycles. Maintained by MonitoringReader for each activity_type. See SDK documentation.</summary>
		/// <returns>Returns nullable float representing the Cycles field</returns>
		public float? Cycles
		{
			get
			{
				Object val = GetFieldValue(3, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToSingle(val));

			}
			set
			{
				SetFieldValue(3, 0, value, Fit.SubfieldIndexMainField);
			}
		}


		/// <summary>
		/// Retrieves the Steps subfield
		/// Units: steps</summary>
		/// <returns>Nullable uint representing the Steps subfield</returns>
		public uint? Steps
		{
			get
			{
				Object val = GetFieldValue(3, 0, CyclesSubfield.Steps);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToUInt32(val));

			}
			set
			{
				SetFieldValue(3, 0, value, CyclesSubfield.Steps);
			}
		}

		/// <summary>
		/// Retrieves the Strokes subfield
		/// Units: strokes</summary>
		/// <returns>Nullable float representing the Strokes subfield</returns>
		public float? Strokes
		{
			get
			{
				Object val = GetFieldValue(3, 0, CyclesSubfield.Strokes);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToSingle(val));

			}
			set
			{
				SetFieldValue(3, 0, value, CyclesSubfield.Strokes);
			}
		}
		///<summary>
		/// Retrieves the ActiveTime field
		/// Units: s</summary>
		/// <returns>Returns nullable float representing the ActiveTime field</returns>
		public float? ActiveTime
		{
			get
			{
				Object val = GetFieldValue(4, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToSingle(val));

			}
			set
			{
				SetFieldValue(4, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the ActivityType field</summary>
		/// <returns>Returns nullable ActivityType enum representing the ActivityType field</returns>
		public ActivityType? ActivityType
		{
			get
			{
				object obj = GetFieldValue(5, 0, Fit.SubfieldIndexMainField);
				ActivityType? value = obj == null ? (ActivityType?)null : (ActivityType)obj;
				return value;
			}
			set
			{
				SetFieldValue(5, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the ActivitySubtype field</summary>
		/// <returns>Returns nullable ActivitySubtype enum representing the ActivitySubtype field</returns>
		public ActivitySubtype? ActivitySubtype
		{
			get
			{
				object obj = GetFieldValue(6, 0, Fit.SubfieldIndexMainField);
				ActivitySubtype? value = obj == null ? (ActivitySubtype?)null : (ActivitySubtype)obj;
				return value;
			}
			set
			{
				SetFieldValue(6, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the ActivityLevel field</summary>
		/// <returns>Returns nullable ActivityLevel enum representing the ActivityLevel field</returns>
		public ActivityLevel? ActivityLevel
		{
			get
			{
				object obj = GetFieldValue(7, 0, Fit.SubfieldIndexMainField);
				ActivityLevel? value = obj == null ? (ActivityLevel?)null : (ActivityLevel)obj;
				return value;
			}
			set
			{
				SetFieldValue(7, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the Distance16 field
		/// Units: 100 * m</summary>
		/// <returns>Returns nullable ushort representing the Distance16 field</returns>
		public ushort? Distance16
		{
			get
			{
				Object val = GetFieldValue(8, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToUInt16(val));

			}
			set
			{
				SetFieldValue(8, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the Cycles16 field
		/// Units: 2 * cycles (steps)</summary>
		/// <returns>Returns nullable ushort representing the Cycles16 field</returns>
		public ushort? Cycles16
		{
			get
			{
				Object val = GetFieldValue(9, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToUInt16(val));

			}
			set
			{
				SetFieldValue(9, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the ActiveTime16 field
		/// Units: s</summary>
		/// <returns>Returns nullable ushort representing the ActiveTime16 field</returns>
		public ushort? ActiveTime16
		{
			get
			{
				Object val = GetFieldValue(10, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToUInt16(val));

			}
			set
			{
				SetFieldValue(10, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the LocalTimestamp field
		/// Comment: Must align to logging interval, for example, time must be 00:00:00 for daily log.</summary>
		/// <returns>Returns nullable uint representing the LocalTimestamp field</returns>
		public uint? LocalTimestamp
		{
			get
			{
				Object val = GetFieldValue(11, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToUInt32(val));

			}
			set
			{
				SetFieldValue(11, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the Temperature field
		/// Units: C
		/// Comment: Avg temperature during the logging interval ended at timestamp</summary>
		/// <returns>Returns nullable float representing the Temperature field</returns>
		public float? Temperature
		{
			get
			{
				Object val = GetFieldValue(12, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToSingle(val));

			}
			set
			{
				SetFieldValue(12, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the TemperatureMin field
		/// Units: C
		/// Comment: Min temperature during the logging interval ended at timestamp</summary>
		/// <returns>Returns nullable float representing the TemperatureMin field</returns>
		public float? TemperatureMin
		{
			get
			{
				Object val = GetFieldValue(14, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToSingle(val));

			}
			set
			{
				SetFieldValue(14, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the TemperatureMax field
		/// Units: C
		/// Comment: Max temperature during the logging interval ended at timestamp</summary>
		/// <returns>Returns nullable float representing the TemperatureMax field</returns>
		public float? TemperatureMax
		{
			get
			{
				Object val = GetFieldValue(15, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToSingle(val));

			}
			set
			{
				SetFieldValue(15, 0, value, Fit.SubfieldIndexMainField);
			}
		}


		/// <summary>
		///
		/// </summary>
		/// <returns>returns number of elements in field ActivityTime</returns>
		public int GetNumActivityTime()
		{
			return GetNumFieldValues(16, Fit.SubfieldIndexMainField);
		}

		///<summary>
		/// Retrieves the ActivityTime field
		/// Units: minutes
		/// Comment: Indexed using minute_activity_level enum</summary>
		/// <param name="index">0 based index of ActivityTime element to retrieve</param>
		/// <returns>Returns nullable ushort representing the ActivityTime field</returns>
		public ushort? GetActivityTime(int index)
		{
			Object val = GetFieldValue(16, index, Fit.SubfieldIndexMainField);
			if (val == null)
			{
				return null;
			}

			return (Convert.ToUInt16(val));

		}

		/// <summary>
		/// Set ActivityTime field
		/// Units: minutes
		/// Comment: Indexed using minute_activity_level enum</summary>
		/// <param name="index">0 based index of activity_time</param>
		/// <param name="activityTime_">Nullable field value to be set</param>
		public void SetActivityTime(int index, ushort? activityTime_)
		{
			SetFieldValue(16, index, activityTime_, Fit.SubfieldIndexMainField);
		}

		///<summary>
		/// Retrieves the ActiveCalories field
		/// Units: kcal</summary>
		/// <returns>Returns nullable ushort representing the ActiveCalories field</returns>
		public ushort? ActiveCalories
		{
			get
			{
				Object val = GetFieldValue(19, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToUInt16(val));

			}
			set
			{
				SetFieldValue(19, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the CurrentActivityTypeIntensity field
		/// Comment: Indicates single type / intensity for duration since last monitoring message.</summary>
		/// <returns>Returns nullable byte representing the CurrentActivityTypeIntensity field</returns>
		public byte? CurrentActivityTypeIntensity
		{
			get
			{
				Object val = GetFieldValue(24, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToByte(val));

			}
			set
			{
				SetFieldValue(24, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the TimestampMin8 field
		/// Units: min</summary>
		/// <returns>Returns nullable byte representing the TimestampMin8 field</returns>
		public byte? TimestampMin8
		{
			get
			{
				Object val = GetFieldValue(25, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToByte(val));

			}
			set
			{
				SetFieldValue(25, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the Timestamp16 field
		/// Units: s</summary>
		/// <returns>Returns nullable ushort representing the Timestamp16 field</returns>
		public ushort? Timestamp16
		{
			get
			{
				Object val = GetFieldValue(26, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToUInt16(val));

			}
			set
			{
				SetFieldValue(26, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the HeartRate field
		/// Units: bpm</summary>
		/// <returns>Returns nullable byte representing the HeartRate field</returns>
		public byte? HeartRate
		{
			get
			{
				Object val = GetFieldValue(27, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToByte(val));

			}
			set
			{
				SetFieldValue(27, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the Intensity field</summary>
		/// <returns>Returns nullable float representing the Intensity field</returns>
		public float? Intensity
		{
			get
			{
				Object val = GetFieldValue(28, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToSingle(val));

			}
			set
			{
				SetFieldValue(28, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the DurationMin field
		/// Units: min</summary>
		/// <returns>Returns nullable ushort representing the DurationMin field</returns>
		public ushort? DurationMin
		{
			get
			{
				Object val = GetFieldValue(29, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToUInt16(val));

			}
			set
			{
				SetFieldValue(29, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the Duration field
		/// Units: s</summary>
		/// <returns>Returns nullable uint representing the Duration field</returns>
		public uint? Duration
		{
			get
			{
				Object val = GetFieldValue(30, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToUInt32(val));

			}
			set
			{
				SetFieldValue(30, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the Ascent field
		/// Units: m</summary>
		/// <returns>Returns nullable float representing the Ascent field</returns>
		public float? Ascent
		{
			get
			{
				Object val = GetFieldValue(31, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToSingle(val));

			}
			set
			{
				SetFieldValue(31, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the Descent field
		/// Units: m</summary>
		/// <returns>Returns nullable float representing the Descent field</returns>
		public float? Descent
		{
			get
			{
				Object val = GetFieldValue(32, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToSingle(val));

			}
			set
			{
				SetFieldValue(32, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the ModerateActivityMinutes field
		/// Units: minutes</summary>
		/// <returns>Returns nullable ushort representing the ModerateActivityMinutes field</returns>
		public ushort? ModerateActivityMinutes
		{
			get
			{
				Object val = GetFieldValue(33, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToUInt16(val));

			}
			set
			{
				SetFieldValue(33, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the VigorousActivityMinutes field
		/// Units: minutes</summary>
		/// <returns>Returns nullable ushort representing the VigorousActivityMinutes field</returns>
		public ushort? VigorousActivityMinutes
		{
			get
			{
				Object val = GetFieldValue(34, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToUInt16(val));

			}
			set
			{
				SetFieldValue(34, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		#endregion // Methods
	} // Class
} // namespace
