#region Copyright
/////////////////////////////////////////////////////////////////////////////////////////////
// Copyright 2024 Garmin International, Inc.
// Licensed under the Flexible and Interoperable Data Transfer (FIT) Protocol License; you
// may not use this file except in compliance with the Flexible and Interoperable Data
// Transfer (FIT) Protocol License.
/////////////////////////////////////////////////////////////////////////////////////////////
// ****WARNING****  This file is auto-generated!  Do NOT edit this file.
// Profile Version = 21.158.0Release
// Tag = production/release/21.158.0-0-gc9428aa
/////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Text;
using System.IO;
using System.Linq;

namespace Dynastream.Fit
{
	/// <summary>
	/// Implements the SegmentPoint profile message.
	/// </summary>
	public class SegmentPointMesg : Mesg
	{
		#region Fields
		#endregion

		/// <summary>
		/// Field Numbers for <see cref="SegmentPointMesg"/>
		/// </summary>
		public sealed class FieldDefNum
		{
			public const byte MessageIndex = 254;
			public const byte PositionLat = 1;
			public const byte PositionLong = 2;
			public const byte Distance = 3;
			public const byte Altitude = 4;
			public const byte LeaderTime = 5;
			public const byte EnhancedAltitude = 6;
			public const byte Invalid = Fit.FieldNumInvalid;
		}

		#region Constructors
		public SegmentPointMesg() : base(Profile.GetMesg(MesgNum.SegmentPoint))
		{
		}

		public SegmentPointMesg(Mesg mesg) : base(mesg)
		{
		}
		#endregion // Constructors

		#region Methods
		///<summary>
		/// Retrieves the MessageIndex field</summary>
		/// <returns>Returns nullable ushort representing the MessageIndex field</returns>
		public ushort? MessageIndex
		{
			get
			{
				Object val = GetFieldValue(254, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToUInt16(val));

			}
			set
			{
				SetFieldValue(254, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the PositionLat field
		/// Units: semicircles</summary>
		/// <returns>Returns nullable int representing the PositionLat field</returns>
		public int? PositionLat
		{
			get
			{
				Object val = GetFieldValue(1, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToInt32(val));

			}
			set
			{
				SetFieldValue(1, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the PositionLong field
		/// Units: semicircles</summary>
		/// <returns>Returns nullable int representing the PositionLong field</returns>
		public int? PositionLong
		{
			get
			{
				Object val = GetFieldValue(2, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToInt32(val));

			}
			set
			{
				SetFieldValue(2, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the Distance field
		/// Units: m
		/// Comment: Accumulated distance along the segment at the described point</summary>
		/// <returns>Returns nullable float representing the Distance field</returns>
		public float? Distance
		{
			get
			{
				Object val = GetFieldValue(3, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToSingle(val));

			}
			set
			{
				SetFieldValue(3, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the Altitude field
		/// Units: m
		/// Comment: Accumulated altitude along the segment at the described point</summary>
		/// <returns>Returns nullable float representing the Altitude field</returns>
		public float? Altitude
		{
			get
			{
				Object val = GetFieldValue(4, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToSingle(val));

			}
			set
			{
				SetFieldValue(4, 0, value, Fit.SubfieldIndexMainField);
			}
		}


		/// <summary>
		///
		/// </summary>
		/// <returns>returns number of elements in field LeaderTime</returns>
		public int GetNumLeaderTime()
		{
			return GetNumFieldValues(5, Fit.SubfieldIndexMainField);
		}

		///<summary>
		/// Retrieves the LeaderTime field
		/// Units: s
		/// Comment: Accumualted time each leader board member required to reach the described point. This value is zero for all leader board members at the starting point of the segment.</summary>
		/// <param name="index">0 based index of LeaderTime element to retrieve</param>
		/// <returns>Returns nullable float representing the LeaderTime field</returns>
		public float? GetLeaderTime(int index)
		{
			Object val = GetFieldValue(5, index, Fit.SubfieldIndexMainField);
			if (val == null)
			{
				return null;
			}

			return (Convert.ToSingle(val));

		}

		/// <summary>
		/// Set LeaderTime field
		/// Units: s
		/// Comment: Accumualted time each leader board member required to reach the described point. This value is zero for all leader board members at the starting point of the segment.</summary>
		/// <param name="index">0 based index of leader_time</param>
		/// <param name="leaderTime_">Nullable field value to be set</param>
		public void SetLeaderTime(int index, float? leaderTime_)
		{
			SetFieldValue(5, index, leaderTime_, Fit.SubfieldIndexMainField);
		}

		///<summary>
		/// Retrieves the EnhancedAltitude field
		/// Units: m
		/// Comment: Accumulated altitude along the segment at the described point</summary>
		/// <returns>Returns nullable float representing the EnhancedAltitude field</returns>
		public float? EnhancedAltitude
		{
			get
			{
				Object val = GetFieldValue(6, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToSingle(val));

			}
			set
			{
				SetFieldValue(6, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		#endregion // Methods
	} // Class
} // namespace
