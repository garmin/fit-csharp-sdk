#region Copyright
/////////////////////////////////////////////////////////////////////////////////////////////
// Copyright 2025 Garmin International, Inc.
// Licensed under the Flexible and Interoperable Data Transfer (FIT) Protocol License; you
// may not use this file except in compliance with the Flexible and Interoperable Data
// Transfer (FIT) Protocol License.
/////////////////////////////////////////////////////////////////////////////////////////////
// ****WARNING****  This file is auto-generated!  Do NOT edit this file.
// Profile Version = 21.171.0Release
// Tag = production/release/21.171.0-0-g57fed75
/////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Text;
using System.IO;
using System.Linq;

namespace Dynastream.Fit
{
    /// <summary>
    /// Implements the TrainingSettings profile message.
    /// </summary>
    public class TrainingSettingsMesg : Mesg
    {
        #region Fields
        #endregion

        /// <summary>
        /// Field Numbers for <see cref="TrainingSettingsMesg"/>
        /// </summary>
        public sealed class FieldDefNum
        {
            public const byte TargetDistance = 31;
            public const byte TargetSpeed = 32;
            public const byte TargetTime = 33;
            public const byte PreciseTargetSpeed = 153;
            public const byte Invalid = Fit.FieldNumInvalid;
        }

        #region Constructors
        public TrainingSettingsMesg() : base(Profile.GetMesg(MesgNum.TrainingSettings))
        {
        }

        public TrainingSettingsMesg(Mesg mesg) : base(mesg)
        {
        }
        #endregion // Constructors

        #region Methods
        ///<summary>
        /// Retrieves the TargetDistance field
        /// Units: m</summary>
        /// <returns>Returns nullable float representing the TargetDistance field</returns>
        public float? GetTargetDistance()
        {
            Object val = GetFieldValue(31, 0, Fit.SubfieldIndexMainField);
            if(val == null)
            {
                return null;
            }

            return (Convert.ToSingle(val));
            
        }

        /// <summary>
        /// Set TargetDistance field
        /// Units: m</summary>
        /// <param name="targetDistance_">Nullable field value to be set</param>
        public void SetTargetDistance(float? targetDistance_)
        {
            SetFieldValue(31, 0, targetDistance_, Fit.SubfieldIndexMainField);
        }
        
        ///<summary>
        /// Retrieves the TargetSpeed field
        /// Units: m/s</summary>
        /// <returns>Returns nullable float representing the TargetSpeed field</returns>
        public float? GetTargetSpeed()
        {
            Object val = GetFieldValue(32, 0, Fit.SubfieldIndexMainField);
            if(val == null)
            {
                return null;
            }

            return (Convert.ToSingle(val));
            
        }

        /// <summary>
        /// Set TargetSpeed field
        /// Units: m/s</summary>
        /// <param name="targetSpeed_">Nullable field value to be set</param>
        public void SetTargetSpeed(float? targetSpeed_)
        {
            SetFieldValue(32, 0, targetSpeed_, Fit.SubfieldIndexMainField);
        }
        
        ///<summary>
        /// Retrieves the TargetTime field
        /// Units: s</summary>
        /// <returns>Returns nullable uint representing the TargetTime field</returns>
        public uint? GetTargetTime()
        {
            Object val = GetFieldValue(33, 0, Fit.SubfieldIndexMainField);
            if(val == null)
            {
                return null;
            }

            return (Convert.ToUInt32(val));
            
        }

        /// <summary>
        /// Set TargetTime field
        /// Units: s</summary>
        /// <param name="targetTime_">Nullable field value to be set</param>
        public void SetTargetTime(uint? targetTime_)
        {
            SetFieldValue(33, 0, targetTime_, Fit.SubfieldIndexMainField);
        }
        
        ///<summary>
        /// Retrieves the PreciseTargetSpeed field
        /// Units: m/s
        /// Comment: A more precise target speed field</summary>
        /// <returns>Returns nullable float representing the PreciseTargetSpeed field</returns>
        public float? GetPreciseTargetSpeed()
        {
            Object val = GetFieldValue(153, 0, Fit.SubfieldIndexMainField);
            if(val == null)
            {
                return null;
            }

            return (Convert.ToSingle(val));
            
        }

        /// <summary>
        /// Set PreciseTargetSpeed field
        /// Units: m/s
        /// Comment: A more precise target speed field</summary>
        /// <param name="preciseTargetSpeed_">Nullable field value to be set</param>
        public void SetPreciseTargetSpeed(float? preciseTargetSpeed_)
        {
            SetFieldValue(153, 0, preciseTargetSpeed_, Fit.SubfieldIndexMainField);
        }
        
        #endregion // Methods
    } // Class
} // namespace
