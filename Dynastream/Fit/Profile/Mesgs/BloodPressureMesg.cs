#region Copyright
/////////////////////////////////////////////////////////////////////////////////////////////
// Copyright 2024 Garmin International, Inc.
// Licensed under the Flexible and Interoperable Data Transfer (FIT) Protocol License; you
// may not use this file except in compliance with the Flexible and Interoperable Data
// Transfer (FIT) Protocol License.
/////////////////////////////////////////////////////////////////////////////////////////////
// ****WARNING****  This file is auto-generated!  Do NOT edit this file.
// Profile Version = 21.158.0Release
// Tag = production/release/21.158.0-0-gc9428aa
/////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Text;
using System.IO;
using System.Linq;

namespace Dynastream.Fit
{
	/// <summary>
	/// Implements the BloodPressure profile message.
	/// </summary>
	public class BloodPressureMesg : Mesg
	{
		#region Fields
		#endregion

		/// <summary>
		/// Field Numbers for <see cref="BloodPressureMesg"/>
		/// </summary>
		public sealed class FieldDefNum
		{
			public const byte Timestamp = 253;
			public const byte SystolicPressure = 0;
			public const byte DiastolicPressure = 1;
			public const byte MeanArterialPressure = 2;
			public const byte Map3SampleMean = 3;
			public const byte MapMorningValues = 4;
			public const byte MapEveningValues = 5;
			public const byte HeartRate = 6;
			public const byte HeartRateType = 7;
			public const byte Status = 8;
			public const byte UserProfileIndex = 9;
			public const byte Invalid = Fit.FieldNumInvalid;
		}

		#region Constructors
		public BloodPressureMesg() : base(Profile.GetMesg(MesgNum.BloodPressure))
		{
		}

		public BloodPressureMesg(Mesg mesg) : base(mesg)
		{
		}
		#endregion // Constructors

		#region Methods
		///<summary>
		/// Retrieves the Timestamp field
		/// Units: s</summary>
		/// <returns>Returns DateTime representing the Timestamp field</returns>
		public DateTime Timestamp
		{
			get
			{
				Object val = GetFieldValue(253, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return TimestampToDateTime(Convert.ToUInt32(val));

			}
			set
			{
				SetFieldValue(253, 0, value.GetTimeStamp(), Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the SystolicPressure field
		/// Units: mmHg</summary>
		/// <returns>Returns nullable ushort representing the SystolicPressure field</returns>
		public ushort? SystolicPressure
		{
			get
			{
				Object val = GetFieldValue(0, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToUInt16(val));

			}
			set
			{
				SetFieldValue(0, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the DiastolicPressure field
		/// Units: mmHg</summary>
		/// <returns>Returns nullable ushort representing the DiastolicPressure field</returns>
		public ushort? DiastolicPressure
		{
			get
			{
				Object val = GetFieldValue(1, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToUInt16(val));

			}
			set
			{
				SetFieldValue(1, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the MeanArterialPressure field
		/// Units: mmHg</summary>
		/// <returns>Returns nullable ushort representing the MeanArterialPressure field</returns>
		public ushort? MeanArterialPressure
		{
			get
			{
				Object val = GetFieldValue(2, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToUInt16(val));

			}
			set
			{
				SetFieldValue(2, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the Map3SampleMean field
		/// Units: mmHg</summary>
		/// <returns>Returns nullable ushort representing the Map3SampleMean field</returns>
		public ushort? Map3SampleMean
		{
			get
			{
				Object val = GetFieldValue(3, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToUInt16(val));

			}
			set
			{
				SetFieldValue(3, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the MapMorningValues field
		/// Units: mmHg</summary>
		/// <returns>Returns nullable ushort representing the MapMorningValues field</returns>
		public ushort? MapMorningValues
		{
			get
			{
				Object val = GetFieldValue(4, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToUInt16(val));

			}
			set
			{
				SetFieldValue(4, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the MapEveningValues field
		/// Units: mmHg</summary>
		/// <returns>Returns nullable ushort representing the MapEveningValues field</returns>
		public ushort? MapEveningValues
		{
			get
			{
				Object val = GetFieldValue(5, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToUInt16(val));

			}
			set
			{
				SetFieldValue(5, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the HeartRate field
		/// Units: bpm</summary>
		/// <returns>Returns nullable byte representing the HeartRate field</returns>
		public byte? HeartRate
		{
			get
			{
				Object val = GetFieldValue(6, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToByte(val));

			}
			set
			{
				SetFieldValue(6, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the HeartRateType field</summary>
		/// <returns>Returns nullable HrType enum representing the HeartRateType field</returns>
		public HrType? HeartRateType
		{
			get
			{
				object obj = GetFieldValue(7, 0, Fit.SubfieldIndexMainField);
				HrType? value = obj == null ? (HrType?)null : (HrType)obj;
				return value;
			}
			set
			{
				SetFieldValue(7, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the Status field</summary>
		/// <returns>Returns nullable BpStatus enum representing the Status field</returns>
		public BpStatus? Status
		{
			get
			{
				object obj = GetFieldValue(8, 0, Fit.SubfieldIndexMainField);
				BpStatus? value = obj == null ? (BpStatus?)null : (BpStatus)obj;
				return value;
			}
			set
			{
				SetFieldValue(8, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the UserProfileIndex field
		/// Comment: Associates this blood pressure message to a user. This corresponds to the index of the user profile message in the blood pressure file.</summary>
		/// <returns>Returns nullable ushort representing the UserProfileIndex field</returns>
		public ushort? UserProfileIndex
		{
			get
			{
				Object val = GetFieldValue(9, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToUInt16(val));

			}
			set
			{
				SetFieldValue(9, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		#endregion // Methods
	} // Class
} // namespace
