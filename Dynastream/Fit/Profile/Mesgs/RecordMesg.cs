#region Copyright
/////////////////////////////////////////////////////////////////////////////////////////////
// Copyright 2024 Garmin International, Inc.
// Licensed under the Flexible and Interoperable Data Transfer (FIT) Protocol License; you
// may not use this file except in compliance with the Flexible and Interoperable Data
// Transfer (FIT) Protocol License.
/////////////////////////////////////////////////////////////////////////////////////////////
// ****WARNING****  This file is auto-generated!  Do NOT edit this file.
// Profile Version = 21.158.0Release
// Tag = production/release/21.158.0-0-gc9428aa
/////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Text;
using System.IO;
using System.Linq;

namespace Dynastream.Fit
{
	/// <summary>
	/// Implements the Record profile message.
	/// </summary>
	public class RecordMesg : Mesg
	{
		#region Fields
		#endregion

		/// <summary>
		/// Field Numbers for <see cref="RecordMesg"/>
		/// </summary>
		public sealed class FieldDefNum
		{
			public const byte Timestamp = 253;
			public const byte PositionLat = 0;
			public const byte PositionLong = 1;
			public const byte Altitude = 2;
			public const byte HeartRate = 3;
			public const byte Cadence = 4;
			public const byte Distance = 5;
			public const byte Speed = 6;
			public const byte Power = 7;
			public const byte CompressedSpeedDistance = 8;
			public const byte Grade = 9;
			public const byte Resistance = 10;
			public const byte TimeFromCourse = 11;
			public const byte CycleLength = 12;
			public const byte Temperature = 13;
			public const byte Speed1s = 17;
			public const byte Cycles = 18;
			public const byte TotalCycles = 19;
			public const byte CompressedAccumulatedPower = 28;
			public const byte AccumulatedPower = 29;
			public const byte LeftRightBalance = 30;
			public const byte GpsAccuracy = 31;
			public const byte VerticalSpeed = 32;
			public const byte Calories = 33;
			public const byte VerticalOscillation = 39;
			public const byte StanceTimePercent = 40;
			public const byte StanceTime = 41;
			public const byte ActivityType = 42;
			public const byte LeftTorqueEffectiveness = 43;
			public const byte RightTorqueEffectiveness = 44;
			public const byte LeftPedalSmoothness = 45;
			public const byte RightPedalSmoothness = 46;
			public const byte CombinedPedalSmoothness = 47;
			public const byte Time128 = 48;
			public const byte StrokeType = 49;
			public const byte Zone = 50;
			public const byte BallSpeed = 51;
			public const byte Cadence256 = 52;
			public const byte FractionalCadence = 53;
			public const byte TotalHemoglobinConc = 54;
			public const byte TotalHemoglobinConcMin = 55;
			public const byte TotalHemoglobinConcMax = 56;
			public const byte SaturatedHemoglobinPercent = 57;
			public const byte SaturatedHemoglobinPercentMin = 58;
			public const byte SaturatedHemoglobinPercentMax = 59;
			public const byte DeviceIndex = 62;
			public const byte LeftPco = 67;
			public const byte RightPco = 68;
			public const byte LeftPowerPhase = 69;
			public const byte LeftPowerPhasePeak = 70;
			public const byte RightPowerPhase = 71;
			public const byte RightPowerPhasePeak = 72;
			public const byte EnhancedSpeed = 73;
			public const byte EnhancedAltitude = 78;
			public const byte BatterySoc = 81;
			public const byte MotorPower = 82;
			public const byte VerticalRatio = 83;
			public const byte StanceTimeBalance = 84;
			public const byte StepLength = 85;
			public const byte CycleLength16 = 87;
			public const byte AbsolutePressure = 91;
			public const byte Depth = 92;
			public const byte NextStopDepth = 93;
			public const byte NextStopTime = 94;
			public const byte TimeToSurface = 95;
			public const byte NdlTime = 96;
			public const byte CnsLoad = 97;
			public const byte N2Load = 98;
			public const byte RespirationRate = 99;
			public const byte EnhancedRespirationRate = 108;
			public const byte Grit = 114;
			public const byte Flow = 115;
			public const byte CurrentStress = 116;
			public const byte EbikeTravelRange = 117;
			public const byte EbikeBatteryLevel = 118;
			public const byte EbikeAssistMode = 119;
			public const byte EbikeAssistLevelPercent = 120;
			public const byte AirTimeRemaining = 123;
			public const byte PressureSac = 124;
			public const byte VolumeSac = 125;
			public const byte Rmv = 126;
			public const byte AscentRate = 127;
			public const byte Po2 = 129;
			public const byte CoreTemperature = 139;
			public const byte Invalid = Fit.FieldNumInvalid;
		}

		#region Constructors
		public RecordMesg() : base(Profile.GetMesg(MesgNum.Record))
		{
		}

		public RecordMesg(Mesg mesg) : base(mesg)
		{
		}
		#endregion // Constructors

		#region Methods
		///<summary>
		/// Retrieves the Timestamp field
		/// Units: s</summary>
		/// <returns>Returns DateTime representing the Timestamp field</returns>
		public DateTime Timestamp
		{
			get
			{
				Object val = GetFieldValue(253, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return TimestampToDateTime(Convert.ToUInt32(val));

			}
			set
			{
				SetFieldValue(253, 0, value.GetTimeStamp(), Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the PositionLat field
		/// Units: semicircles</summary>
		/// <returns>Returns nullable int representing the PositionLat field</returns>
		public int? PositionLat
		{
			get
			{
				Object val = GetFieldValue(0, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToInt32(val));

			}
			set
			{
				SetFieldValue(0, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the PositionLong field
		/// Units: semicircles</summary>
		/// <returns>Returns nullable int representing the PositionLong field</returns>
		public int? PositionLong
		{
			get
			{
				Object val = GetFieldValue(1, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToInt32(val));

			}
			set
			{
				SetFieldValue(1, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the Altitude field
		/// Units: m</summary>
		/// <returns>Returns nullable float representing the Altitude field</returns>
		public float? Altitude
		{
			get
			{
				Object val = GetFieldValue(2, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToSingle(val));

			}
			set
			{
				SetFieldValue(2, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the HeartRate field
		/// Units: bpm</summary>
		/// <returns>Returns nullable byte representing the HeartRate field</returns>
		public byte? HeartRate
		{
			get
			{
				Object val = GetFieldValue(3, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToByte(val));

			}
			set
			{
				SetFieldValue(3, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the Cadence field
		/// Units: rpm</summary>
		/// <returns>Returns nullable byte representing the Cadence field</returns>
		public byte? Cadence
		{
			get
			{
				Object val = GetFieldValue(4, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToByte(val));

			}
			set
			{
				SetFieldValue(4, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the Distance field
		/// Units: m</summary>
		/// <returns>Returns nullable float representing the Distance field</returns>
		public float? Distance
		{
			get
			{
				Object val = GetFieldValue(5, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToSingle(val));

			}
			set
			{
				SetFieldValue(5, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the Speed field
		/// Units: m/s</summary>
		/// <returns>Returns nullable float representing the Speed field</returns>
		public float? Speed
		{
			get
			{
				Object val = GetFieldValue(6, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToSingle(val));

			}
			set
			{
				SetFieldValue(6, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the Power field
		/// Units: watts</summary>
		/// <returns>Returns nullable ushort representing the Power field</returns>
		public ushort? Power
		{
			get
			{
				Object val = GetFieldValue(7, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToUInt16(val));

			}
			set
			{
				SetFieldValue(7, 0, value, Fit.SubfieldIndexMainField);
			}
		}


		/// <summary>
		///
		/// </summary>
		/// <returns>returns number of elements in field CompressedSpeedDistance</returns>
		public int GetNumCompressedSpeedDistance()
		{
			return GetNumFieldValues(8, Fit.SubfieldIndexMainField);
		}

		///<summary>
		/// Retrieves the CompressedSpeedDistance field</summary>
		/// <param name="index">0 based index of CompressedSpeedDistance element to retrieve</param>
		/// <returns>Returns nullable byte representing the CompressedSpeedDistance field</returns>
		public byte? GetCompressedSpeedDistance(int index)
		{
			Object val = GetFieldValue(8, index, Fit.SubfieldIndexMainField);
			if (val == null)
			{
				return null;
			}

			return (Convert.ToByte(val));

		}

		/// <summary>
		/// Set CompressedSpeedDistance field</summary>
		/// <param name="index">0 based index of compressed_speed_distance</param>
		/// <param name="compressedSpeedDistance_">Nullable field value to be set</param>
		public void SetCompressedSpeedDistance(int index, byte? compressedSpeedDistance_)
		{
			SetFieldValue(8, index, compressedSpeedDistance_, Fit.SubfieldIndexMainField);
		}

		///<summary>
		/// Retrieves the Grade field
		/// Units: %</summary>
		/// <returns>Returns nullable float representing the Grade field</returns>
		public float? Grade
		{
			get
			{
				Object val = GetFieldValue(9, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToSingle(val));

			}
			set
			{
				SetFieldValue(9, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the Resistance field
		/// Comment: Relative. 0 is none 254 is Max.</summary>
		/// <returns>Returns nullable byte representing the Resistance field</returns>
		public byte? Resistance
		{
			get
			{
				Object val = GetFieldValue(10, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToByte(val));

			}
			set
			{
				SetFieldValue(10, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the TimeFromCourse field
		/// Units: s</summary>
		/// <returns>Returns nullable float representing the TimeFromCourse field</returns>
		public float? TimeFromCourse
		{
			get
			{
				Object val = GetFieldValue(11, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToSingle(val));

			}
			set
			{
				SetFieldValue(11, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the CycleLength field
		/// Units: m</summary>
		/// <returns>Returns nullable float representing the CycleLength field</returns>
		public float? CycleLength
		{
			get
			{
				Object val = GetFieldValue(12, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToSingle(val));

			}
			set
			{
				SetFieldValue(12, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the Temperature field
		/// Units: C</summary>
		/// <returns>Returns nullable sbyte representing the Temperature field</returns>
		public sbyte? Temperature
		{
			get
			{
				Object val = GetFieldValue(13, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToSByte(val));

			}
			set
			{
				SetFieldValue(13, 0, value, Fit.SubfieldIndexMainField);
			}
		}


		/// <summary>
		///
		/// </summary>
		/// <returns>returns number of elements in field Speed1s</returns>
		public int GetNumSpeed1s()
		{
			return GetNumFieldValues(17, Fit.SubfieldIndexMainField);
		}

		///<summary>
		/// Retrieves the Speed1s field
		/// Units: m/s
		/// Comment: Speed at 1s intervals. Timestamp field indicates time of last array element.</summary>
		/// <param name="index">0 based index of Speed1s element to retrieve</param>
		/// <returns>Returns nullable float representing the Speed1s field</returns>
		public float? GetSpeed1s(int index)
		{
			Object val = GetFieldValue(17, index, Fit.SubfieldIndexMainField);
			if (val == null)
			{
				return null;
			}

			return (Convert.ToSingle(val));

		}

		/// <summary>
		/// Set Speed1s field
		/// Units: m/s
		/// Comment: Speed at 1s intervals. Timestamp field indicates time of last array element.</summary>
		/// <param name="index">0 based index of speed_1s</param>
		/// <param name="speed1s_">Nullable field value to be set</param>
		public void SetSpeed1s(int index, float? speed1s_)
		{
			SetFieldValue(17, index, speed1s_, Fit.SubfieldIndexMainField);
		}

		///<summary>
		/// Retrieves the Cycles field
		/// Units: cycles</summary>
		/// <returns>Returns nullable byte representing the Cycles field</returns>
		public byte? Cycles
		{
			get
			{
				Object val = GetFieldValue(18, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToByte(val));

			}
			set
			{
				SetFieldValue(18, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the TotalCycles field
		/// Units: cycles</summary>
		/// <returns>Returns nullable uint representing the TotalCycles field</returns>
		public uint? TotalCycles
		{
			get
			{
				Object val = GetFieldValue(19, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToUInt32(val));

			}
			set
			{
				SetFieldValue(19, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the CompressedAccumulatedPower field
		/// Units: watts</summary>
		/// <returns>Returns nullable ushort representing the CompressedAccumulatedPower field</returns>
		public ushort? CompressedAccumulatedPower
		{
			get
			{
				Object val = GetFieldValue(28, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToUInt16(val));

			}
			set
			{
				SetFieldValue(28, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the AccumulatedPower field
		/// Units: watts</summary>
		/// <returns>Returns nullable uint representing the AccumulatedPower field</returns>
		public uint? AccumulatedPower
		{
			get
			{
				Object val = GetFieldValue(29, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToUInt32(val));

			}
			set
			{
				SetFieldValue(29, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the LeftRightBalance field</summary>
		/// <returns>Returns nullable byte representing the LeftRightBalance field</returns>
		public byte? LeftRightBalance
		{
			get
			{
				Object val = GetFieldValue(30, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToByte(val));

			}
			set
			{
				SetFieldValue(30, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the GpsAccuracy field
		/// Units: m</summary>
		/// <returns>Returns nullable byte representing the GpsAccuracy field</returns>
		public byte? GpsAccuracy
		{
			get
			{
				Object val = GetFieldValue(31, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToByte(val));

			}
			set
			{
				SetFieldValue(31, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the VerticalSpeed field
		/// Units: m/s</summary>
		/// <returns>Returns nullable float representing the VerticalSpeed field</returns>
		public float? VerticalSpeed
		{
			get
			{
				Object val = GetFieldValue(32, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToSingle(val));

			}
			set
			{
				SetFieldValue(32, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the Calories field
		/// Units: kcal</summary>
		/// <returns>Returns nullable ushort representing the Calories field</returns>
		public ushort? Calories
		{
			get
			{
				Object val = GetFieldValue(33, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToUInt16(val));

			}
			set
			{
				SetFieldValue(33, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the VerticalOscillation field
		/// Units: mm</summary>
		/// <returns>Returns nullable float representing the VerticalOscillation field</returns>
		public float? VerticalOscillation
		{
			get
			{
				Object val = GetFieldValue(39, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToSingle(val));

			}
			set
			{
				SetFieldValue(39, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the StanceTimePercent field
		/// Units: percent</summary>
		/// <returns>Returns nullable float representing the StanceTimePercent field</returns>
		public float? StanceTimePercent
		{
			get
			{
				Object val = GetFieldValue(40, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToSingle(val));

			}
			set
			{
				SetFieldValue(40, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the StanceTime field
		/// Units: ms</summary>
		/// <returns>Returns nullable float representing the StanceTime field</returns>
		public float? StanceTime
		{
			get
			{
				Object val = GetFieldValue(41, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToSingle(val));

			}
			set
			{
				SetFieldValue(41, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the ActivityType field</summary>
		/// <returns>Returns nullable ActivityType enum representing the ActivityType field</returns>
		public ActivityType? ActivityType
		{
			get
			{
				object obj = GetFieldValue(42, 0, Fit.SubfieldIndexMainField);
				ActivityType? value = obj == null ? (ActivityType?)null : (ActivityType)obj;
				return value;
			}
			set
			{
				SetFieldValue(42, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the LeftTorqueEffectiveness field
		/// Units: percent</summary>
		/// <returns>Returns nullable float representing the LeftTorqueEffectiveness field</returns>
		public float? LeftTorqueEffectiveness
		{
			get
			{
				Object val = GetFieldValue(43, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToSingle(val));

			}
			set
			{
				SetFieldValue(43, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the RightTorqueEffectiveness field
		/// Units: percent</summary>
		/// <returns>Returns nullable float representing the RightTorqueEffectiveness field</returns>
		public float? RightTorqueEffectiveness
		{
			get
			{
				Object val = GetFieldValue(44, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToSingle(val));

			}
			set
			{
				SetFieldValue(44, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the LeftPedalSmoothness field
		/// Units: percent</summary>
		/// <returns>Returns nullable float representing the LeftPedalSmoothness field</returns>
		public float? LeftPedalSmoothness
		{
			get
			{
				Object val = GetFieldValue(45, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToSingle(val));

			}
			set
			{
				SetFieldValue(45, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the RightPedalSmoothness field
		/// Units: percent</summary>
		/// <returns>Returns nullable float representing the RightPedalSmoothness field</returns>
		public float? RightPedalSmoothness
		{
			get
			{
				Object val = GetFieldValue(46, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToSingle(val));

			}
			set
			{
				SetFieldValue(46, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the CombinedPedalSmoothness field
		/// Units: percent</summary>
		/// <returns>Returns nullable float representing the CombinedPedalSmoothness field</returns>
		public float? CombinedPedalSmoothness
		{
			get
			{
				Object val = GetFieldValue(47, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToSingle(val));

			}
			set
			{
				SetFieldValue(47, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the Time128 field
		/// Units: s</summary>
		/// <returns>Returns nullable float representing the Time128 field</returns>
		public float? Time128
		{
			get
			{
				Object val = GetFieldValue(48, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToSingle(val));

			}
			set
			{
				SetFieldValue(48, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the StrokeType field</summary>
		/// <returns>Returns nullable StrokeType enum representing the StrokeType field</returns>
		public StrokeType? StrokeType
		{
			get
			{
				object obj = GetFieldValue(49, 0, Fit.SubfieldIndexMainField);
				StrokeType? value = obj == null ? (StrokeType?)null : (StrokeType)obj;
				return value;
			}
			set
			{
				SetFieldValue(49, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the Zone field</summary>
		/// <returns>Returns nullable byte representing the Zone field</returns>
		public byte? Zone
		{
			get
			{
				Object val = GetFieldValue(50, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToByte(val));

			}
			set
			{
				SetFieldValue(50, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the BallSpeed field
		/// Units: m/s</summary>
		/// <returns>Returns nullable float representing the BallSpeed field</returns>
		public float? BallSpeed
		{
			get
			{
				Object val = GetFieldValue(51, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToSingle(val));

			}
			set
			{
				SetFieldValue(51, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the Cadence256 field
		/// Units: rpm
		/// Comment: Log cadence and fractional cadence for backwards compatability</summary>
		/// <returns>Returns nullable float representing the Cadence256 field</returns>
		public float? Cadence256
		{
			get
			{
				Object val = GetFieldValue(52, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToSingle(val));

			}
			set
			{
				SetFieldValue(52, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the FractionalCadence field
		/// Units: rpm</summary>
		/// <returns>Returns nullable float representing the FractionalCadence field</returns>
		public float? FractionalCadence
		{
			get
			{
				Object val = GetFieldValue(53, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToSingle(val));

			}
			set
			{
				SetFieldValue(53, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the TotalHemoglobinConc field
		/// Units: g/dL
		/// Comment: Total saturated and unsaturated hemoglobin</summary>
		/// <returns>Returns nullable float representing the TotalHemoglobinConc field</returns>
		public float? TotalHemoglobinConc
		{
			get
			{
				Object val = GetFieldValue(54, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToSingle(val));

			}
			set
			{
				SetFieldValue(54, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the TotalHemoglobinConcMin field
		/// Units: g/dL
		/// Comment: Min saturated and unsaturated hemoglobin</summary>
		/// <returns>Returns nullable float representing the TotalHemoglobinConcMin field</returns>
		public float? TotalHemoglobinConcMin
		{
			get
			{
				Object val = GetFieldValue(55, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToSingle(val));

			}
			set
			{
				SetFieldValue(55, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the TotalHemoglobinConcMax field
		/// Units: g/dL
		/// Comment: Max saturated and unsaturated hemoglobin</summary>
		/// <returns>Returns nullable float representing the TotalHemoglobinConcMax field</returns>
		public float? TotalHemoglobinConcMax
		{
			get
			{
				Object val = GetFieldValue(56, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToSingle(val));

			}
			set
			{
				SetFieldValue(56, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the SaturatedHemoglobinPercent field
		/// Units: %
		/// Comment: Percentage of hemoglobin saturated with oxygen</summary>
		/// <returns>Returns nullable float representing the SaturatedHemoglobinPercent field</returns>
		public float? SaturatedHemoglobinPercent
		{
			get
			{
				Object val = GetFieldValue(57, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToSingle(val));

			}
			set
			{
				SetFieldValue(57, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the SaturatedHemoglobinPercentMin field
		/// Units: %
		/// Comment: Min percentage of hemoglobin saturated with oxygen</summary>
		/// <returns>Returns nullable float representing the SaturatedHemoglobinPercentMin field</returns>
		public float? SaturatedHemoglobinPercentMin
		{
			get
			{
				Object val = GetFieldValue(58, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToSingle(val));

			}
			set
			{
				SetFieldValue(58, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the SaturatedHemoglobinPercentMax field
		/// Units: %
		/// Comment: Max percentage of hemoglobin saturated with oxygen</summary>
		/// <returns>Returns nullable float representing the SaturatedHemoglobinPercentMax field</returns>
		public float? SaturatedHemoglobinPercentMax
		{
			get
			{
				Object val = GetFieldValue(59, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToSingle(val));

			}
			set
			{
				SetFieldValue(59, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the DeviceIndex field</summary>
		/// <returns>Returns nullable byte representing the DeviceIndex field</returns>
		public byte? DeviceIndex
		{
			get
			{
				Object val = GetFieldValue(62, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToByte(val));

			}
			set
			{
				SetFieldValue(62, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the LeftPco field
		/// Units: mm
		/// Comment: Left platform center offset</summary>
		/// <returns>Returns nullable sbyte representing the LeftPco field</returns>
		public sbyte? LeftPco
		{
			get
			{
				Object val = GetFieldValue(67, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToSByte(val));

			}
			set
			{
				SetFieldValue(67, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the RightPco field
		/// Units: mm
		/// Comment: Right platform center offset</summary>
		/// <returns>Returns nullable sbyte representing the RightPco field</returns>
		public sbyte? RightPco
		{
			get
			{
				Object val = GetFieldValue(68, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToSByte(val));

			}
			set
			{
				SetFieldValue(68, 0, value, Fit.SubfieldIndexMainField);
			}
		}


		/// <summary>
		///
		/// </summary>
		/// <returns>returns number of elements in field LeftPowerPhase</returns>
		public int GetNumLeftPowerPhase()
		{
			return GetNumFieldValues(69, Fit.SubfieldIndexMainField);
		}

		///<summary>
		/// Retrieves the LeftPowerPhase field
		/// Units: degrees
		/// Comment: Left power phase angles. Data value indexes defined by power_phase_type.</summary>
		/// <param name="index">0 based index of LeftPowerPhase element to retrieve</param>
		/// <returns>Returns nullable float representing the LeftPowerPhase field</returns>
		public float? GetLeftPowerPhase(int index)
		{
			Object val = GetFieldValue(69, index, Fit.SubfieldIndexMainField);
			if (val == null)
			{
				return null;
			}

			return (Convert.ToSingle(val));

		}

		/// <summary>
		/// Set LeftPowerPhase field
		/// Units: degrees
		/// Comment: Left power phase angles. Data value indexes defined by power_phase_type.</summary>
		/// <param name="index">0 based index of left_power_phase</param>
		/// <param name="leftPowerPhase_">Nullable field value to be set</param>
		public void SetLeftPowerPhase(int index, float? leftPowerPhase_)
		{
			SetFieldValue(69, index, leftPowerPhase_, Fit.SubfieldIndexMainField);
		}


		/// <summary>
		///
		/// </summary>
		/// <returns>returns number of elements in field LeftPowerPhasePeak</returns>
		public int GetNumLeftPowerPhasePeak()
		{
			return GetNumFieldValues(70, Fit.SubfieldIndexMainField);
		}

		///<summary>
		/// Retrieves the LeftPowerPhasePeak field
		/// Units: degrees
		/// Comment: Left power phase peak angles. Data value indexes defined by power_phase_type.</summary>
		/// <param name="index">0 based index of LeftPowerPhasePeak element to retrieve</param>
		/// <returns>Returns nullable float representing the LeftPowerPhasePeak field</returns>
		public float? GetLeftPowerPhasePeak(int index)
		{
			Object val = GetFieldValue(70, index, Fit.SubfieldIndexMainField);
			if (val == null)
			{
				return null;
			}

			return (Convert.ToSingle(val));

		}

		/// <summary>
		/// Set LeftPowerPhasePeak field
		/// Units: degrees
		/// Comment: Left power phase peak angles. Data value indexes defined by power_phase_type.</summary>
		/// <param name="index">0 based index of left_power_phase_peak</param>
		/// <param name="leftPowerPhasePeak_">Nullable field value to be set</param>
		public void SetLeftPowerPhasePeak(int index, float? leftPowerPhasePeak_)
		{
			SetFieldValue(70, index, leftPowerPhasePeak_, Fit.SubfieldIndexMainField);
		}


		/// <summary>
		///
		/// </summary>
		/// <returns>returns number of elements in field RightPowerPhase</returns>
		public int GetNumRightPowerPhase()
		{
			return GetNumFieldValues(71, Fit.SubfieldIndexMainField);
		}

		///<summary>
		/// Retrieves the RightPowerPhase field
		/// Units: degrees
		/// Comment: Right power phase angles. Data value indexes defined by power_phase_type.</summary>
		/// <param name="index">0 based index of RightPowerPhase element to retrieve</param>
		/// <returns>Returns nullable float representing the RightPowerPhase field</returns>
		public float? GetRightPowerPhase(int index)
		{
			Object val = GetFieldValue(71, index, Fit.SubfieldIndexMainField);
			if (val == null)
			{
				return null;
			}

			return (Convert.ToSingle(val));

		}

		/// <summary>
		/// Set RightPowerPhase field
		/// Units: degrees
		/// Comment: Right power phase angles. Data value indexes defined by power_phase_type.</summary>
		/// <param name="index">0 based index of right_power_phase</param>
		/// <param name="rightPowerPhase_">Nullable field value to be set</param>
		public void SetRightPowerPhase(int index, float? rightPowerPhase_)
		{
			SetFieldValue(71, index, rightPowerPhase_, Fit.SubfieldIndexMainField);
		}


		/// <summary>
		///
		/// </summary>
		/// <returns>returns number of elements in field RightPowerPhasePeak</returns>
		public int GetNumRightPowerPhasePeak()
		{
			return GetNumFieldValues(72, Fit.SubfieldIndexMainField);
		}

		///<summary>
		/// Retrieves the RightPowerPhasePeak field
		/// Units: degrees
		/// Comment: Right power phase peak angles. Data value indexes defined by power_phase_type.</summary>
		/// <param name="index">0 based index of RightPowerPhasePeak element to retrieve</param>
		/// <returns>Returns nullable float representing the RightPowerPhasePeak field</returns>
		public float? GetRightPowerPhasePeak(int index)
		{
			Object val = GetFieldValue(72, index, Fit.SubfieldIndexMainField);
			if (val == null)
			{
				return null;
			}

			return (Convert.ToSingle(val));

		}

		/// <summary>
		/// Set RightPowerPhasePeak field
		/// Units: degrees
		/// Comment: Right power phase peak angles. Data value indexes defined by power_phase_type.</summary>
		/// <param name="index">0 based index of right_power_phase_peak</param>
		/// <param name="rightPowerPhasePeak_">Nullable field value to be set</param>
		public void SetRightPowerPhasePeak(int index, float? rightPowerPhasePeak_)
		{
			SetFieldValue(72, index, rightPowerPhasePeak_, Fit.SubfieldIndexMainField);
		}

		///<summary>
		/// Retrieves the EnhancedSpeed field
		/// Units: m/s</summary>
		/// <returns>Returns nullable float representing the EnhancedSpeed field</returns>
		public float? EnhancedSpeed
		{
			get
			{
				Object val = GetFieldValue(73, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToSingle(val));

			}
			set
			{
				SetFieldValue(73, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the EnhancedAltitude field
		/// Units: m</summary>
		/// <returns>Returns nullable float representing the EnhancedAltitude field</returns>
		public float? EnhancedAltitude
		{
			get
			{
				Object val = GetFieldValue(78, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToSingle(val));

			}
			set
			{
				SetFieldValue(78, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the BatterySoc field
		/// Units: percent
		/// Comment: lev battery state of charge</summary>
		/// <returns>Returns nullable float representing the BatterySoc field</returns>
		public float? BatterySoc
		{
			get
			{
				Object val = GetFieldValue(81, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToSingle(val));

			}
			set
			{
				SetFieldValue(81, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the MotorPower field
		/// Units: watts
		/// Comment: lev motor power</summary>
		/// <returns>Returns nullable ushort representing the MotorPower field</returns>
		public ushort? MotorPower
		{
			get
			{
				Object val = GetFieldValue(82, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToUInt16(val));

			}
			set
			{
				SetFieldValue(82, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the VerticalRatio field
		/// Units: percent</summary>
		/// <returns>Returns nullable float representing the VerticalRatio field</returns>
		public float? VerticalRatio
		{
			get
			{
				Object val = GetFieldValue(83, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToSingle(val));

			}
			set
			{
				SetFieldValue(83, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the StanceTimeBalance field
		/// Units: percent</summary>
		/// <returns>Returns nullable float representing the StanceTimeBalance field</returns>
		public float? StanceTimeBalance
		{
			get
			{
				Object val = GetFieldValue(84, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToSingle(val));

			}
			set
			{
				SetFieldValue(84, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the StepLength field
		/// Units: mm</summary>
		/// <returns>Returns nullable float representing the StepLength field</returns>
		public float? StepLength
		{
			get
			{
				Object val = GetFieldValue(85, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToSingle(val));

			}
			set
			{
				SetFieldValue(85, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the CycleLength16 field
		/// Units: m
		/// Comment: Supports larger cycle sizes needed for paddlesports. Max cycle size: 655.35</summary>
		/// <returns>Returns nullable float representing the CycleLength16 field</returns>
		public float? CycleLength16
		{
			get
			{
				Object val = GetFieldValue(87, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToSingle(val));

			}
			set
			{
				SetFieldValue(87, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the AbsolutePressure field
		/// Units: Pa
		/// Comment: Includes atmospheric pressure</summary>
		/// <returns>Returns nullable uint representing the AbsolutePressure field</returns>
		public uint? AbsolutePressure
		{
			get
			{
				Object val = GetFieldValue(91, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToUInt32(val));

			}
			set
			{
				SetFieldValue(91, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the Depth field
		/// Units: m
		/// Comment: 0 if above water</summary>
		/// <returns>Returns nullable float representing the Depth field</returns>
		public float? Depth
		{
			get
			{
				Object val = GetFieldValue(92, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToSingle(val));

			}
			set
			{
				SetFieldValue(92, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the NextStopDepth field
		/// Units: m
		/// Comment: 0 if above water</summary>
		/// <returns>Returns nullable float representing the NextStopDepth field</returns>
		public float? NextStopDepth
		{
			get
			{
				Object val = GetFieldValue(93, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToSingle(val));

			}
			set
			{
				SetFieldValue(93, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the NextStopTime field
		/// Units: s</summary>
		/// <returns>Returns nullable uint representing the NextStopTime field</returns>
		public uint? NextStopTime
		{
			get
			{
				Object val = GetFieldValue(94, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToUInt32(val));

			}
			set
			{
				SetFieldValue(94, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the TimeToSurface field
		/// Units: s</summary>
		/// <returns>Returns nullable uint representing the TimeToSurface field</returns>
		public uint? TimeToSurface
		{
			get
			{
				Object val = GetFieldValue(95, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToUInt32(val));

			}
			set
			{
				SetFieldValue(95, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the NdlTime field
		/// Units: s</summary>
		/// <returns>Returns nullable uint representing the NdlTime field</returns>
		public uint? NdlTime
		{
			get
			{
				Object val = GetFieldValue(96, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToUInt32(val));

			}
			set
			{
				SetFieldValue(96, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the CnsLoad field
		/// Units: percent</summary>
		/// <returns>Returns nullable byte representing the CnsLoad field</returns>
		public byte? CnsLoad
		{
			get
			{
				Object val = GetFieldValue(97, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToByte(val));

			}
			set
			{
				SetFieldValue(97, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the N2Load field
		/// Units: percent</summary>
		/// <returns>Returns nullable ushort representing the N2Load field</returns>
		public ushort? N2Load
		{
			get
			{
				Object val = GetFieldValue(98, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToUInt16(val));

			}
			set
			{
				SetFieldValue(98, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the RespirationRate field
		/// Units: s</summary>
		/// <returns>Returns nullable byte representing the RespirationRate field</returns>
		public byte? RespirationRate
		{
			get
			{
				Object val = GetFieldValue(99, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToByte(val));

			}
			set
			{
				SetFieldValue(99, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the EnhancedRespirationRate field
		/// Units: Breaths/min</summary>
		/// <returns>Returns nullable float representing the EnhancedRespirationRate field</returns>
		public float? EnhancedRespirationRate
		{
			get
			{
				Object val = GetFieldValue(108, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToSingle(val));

			}
			set
			{
				SetFieldValue(108, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the Grit field
		/// Comment: The grit score estimates how challenging a route could be for a cyclist in terms of time spent going over sharp turns or large grade slopes.</summary>
		/// <returns>Returns nullable float representing the Grit field</returns>
		public float? Grit
		{
			get
			{
				Object val = GetFieldValue(114, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToSingle(val));

			}
			set
			{
				SetFieldValue(114, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the Flow field
		/// Comment: The flow score estimates how long distance wise a cyclist deaccelerates over intervals where deacceleration is unnecessary such as smooth turns or small grade angle intervals.</summary>
		/// <returns>Returns nullable float representing the Flow field</returns>
		public float? Flow
		{
			get
			{
				Object val = GetFieldValue(115, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToSingle(val));

			}
			set
			{
				SetFieldValue(115, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the CurrentStress field
		/// Comment: Current Stress value</summary>
		/// <returns>Returns nullable float representing the CurrentStress field</returns>
		public float? CurrentStress
		{
			get
			{
				Object val = GetFieldValue(116, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToSingle(val));

			}
			set
			{
				SetFieldValue(116, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the EbikeTravelRange field
		/// Units: km</summary>
		/// <returns>Returns nullable ushort representing the EbikeTravelRange field</returns>
		public ushort? EbikeTravelRange
		{
			get
			{
				Object val = GetFieldValue(117, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToUInt16(val));

			}
			set
			{
				SetFieldValue(117, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the EbikeBatteryLevel field
		/// Units: percent</summary>
		/// <returns>Returns nullable byte representing the EbikeBatteryLevel field</returns>
		public byte? EbikeBatteryLevel
		{
			get
			{
				Object val = GetFieldValue(118, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToByte(val));

			}
			set
			{
				SetFieldValue(118, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the EbikeAssistMode field
		/// Units: depends on sensor</summary>
		/// <returns>Returns nullable byte representing the EbikeAssistMode field</returns>
		public byte? EbikeAssistMode
		{
			get
			{
				Object val = GetFieldValue(119, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToByte(val));

			}
			set
			{
				SetFieldValue(119, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the EbikeAssistLevelPercent field
		/// Units: percent</summary>
		/// <returns>Returns nullable byte representing the EbikeAssistLevelPercent field</returns>
		public byte? EbikeAssistLevelPercent
		{
			get
			{
				Object val = GetFieldValue(120, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToByte(val));

			}
			set
			{
				SetFieldValue(120, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the AirTimeRemaining field
		/// Units: s</summary>
		/// <returns>Returns nullable uint representing the AirTimeRemaining field</returns>
		public uint? AirTimeRemaining
		{
			get
			{
				Object val = GetFieldValue(123, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToUInt32(val));

			}
			set
			{
				SetFieldValue(123, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the PressureSac field
		/// Units: bar/min
		/// Comment: Pressure-based surface air consumption</summary>
		/// <returns>Returns nullable float representing the PressureSac field</returns>
		public float? PressureSac
		{
			get
			{
				Object val = GetFieldValue(124, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToSingle(val));

			}
			set
			{
				SetFieldValue(124, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the VolumeSac field
		/// Units: L/min
		/// Comment: Volumetric surface air consumption</summary>
		/// <returns>Returns nullable float representing the VolumeSac field</returns>
		public float? VolumeSac
		{
			get
			{
				Object val = GetFieldValue(125, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToSingle(val));

			}
			set
			{
				SetFieldValue(125, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the Rmv field
		/// Units: L/min
		/// Comment: Respiratory minute volume</summary>
		/// <returns>Returns nullable float representing the Rmv field</returns>
		public float? Rmv
		{
			get
			{
				Object val = GetFieldValue(126, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToSingle(val));

			}
			set
			{
				SetFieldValue(126, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the AscentRate field
		/// Units: m/s</summary>
		/// <returns>Returns nullable float representing the AscentRate field</returns>
		public float? AscentRate
		{
			get
			{
				Object val = GetFieldValue(127, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToSingle(val));

			}
			set
			{
				SetFieldValue(127, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the Po2 field
		/// Units: percent
		/// Comment: Current partial pressure of oxygen</summary>
		/// <returns>Returns nullable float representing the Po2 field</returns>
		public float? Po2
		{
			get
			{
				Object val = GetFieldValue(129, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToSingle(val));

			}
			set
			{
				SetFieldValue(129, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the CoreTemperature field
		/// Units: C</summary>
		/// <returns>Returns nullable float representing the CoreTemperature field</returns>
		public float? CoreTemperature
		{
			get
			{
				Object val = GetFieldValue(139, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToSingle(val));

			}
			set
			{
				SetFieldValue(139, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		#endregion // Methods
	} // Class
} // namespace
