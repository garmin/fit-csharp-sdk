#region Copyright
/////////////////////////////////////////////////////////////////////////////////////////////
// Copyright 2024 Garmin International, Inc.
// Licensed under the Flexible and Interoperable Data Transfer (FIT) Protocol License; you
// may not use this file except in compliance with the Flexible and Interoperable Data
// Transfer (FIT) Protocol License.
/////////////////////////////////////////////////////////////////////////////////////////////
// ****WARNING****  This file is auto-generated!  Do NOT edit this file.
// Profile Version = 21.158.0Release
// Tag = production/release/21.158.0-0-gc9428aa
/////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Text;
using System.IO;
using System.Linq;

namespace Dynastream.Fit
{
	/// <summary>
	/// Implements the Lap profile message.
	/// </summary>
	public class LapMesg : Mesg
	{
		#region Fields
		static class TotalCyclesSubfield
		{
			public static ushort TotalStrides = 0;
			public static ushort TotalStrokes = 1;
			public static ushort Subfields = 2;
			public static ushort Active = Fit.SubfieldIndexActiveSubfield;
			public static ushort MainField = Fit.SubfieldIndexMainField;
		}
		static class AvgCadenceSubfield
		{
			public static ushort AvgRunningCadence = 0;
			public static ushort Subfields = 1;
			public static ushort Active = Fit.SubfieldIndexActiveSubfield;
			public static ushort MainField = Fit.SubfieldIndexMainField;
		}
		static class MaxCadenceSubfield
		{
			public static ushort MaxRunningCadence = 0;
			public static ushort Subfields = 1;
			public static ushort Active = Fit.SubfieldIndexActiveSubfield;
			public static ushort MainField = Fit.SubfieldIndexMainField;
		}
		#endregion

		/// <summary>
		/// Field Numbers for <see cref="LapMesg"/>
		/// </summary>
		public sealed class FieldDefNum
		{
			public const byte MessageIndex = 254;
			public const byte Timestamp = 253;
			public const byte Event = 0;
			public const byte EventType = 1;
			public const byte StartTime = 2;
			public const byte StartPositionLat = 3;
			public const byte StartPositionLong = 4;
			public const byte EndPositionLat = 5;
			public const byte EndPositionLong = 6;
			public const byte TotalElapsedTime = 7;
			public const byte TotalTimerTime = 8;
			public const byte TotalDistance = 9;
			public const byte TotalCycles = 10;
			public const byte TotalCalories = 11;
			public const byte TotalFatCalories = 12;
			public const byte AvgSpeed = 13;
			public const byte MaxSpeed = 14;
			public const byte AvgHeartRate = 15;
			public const byte MaxHeartRate = 16;
			public const byte AvgCadence = 17;
			public const byte MaxCadence = 18;
			public const byte AvgPower = 19;
			public const byte MaxPower = 20;
			public const byte TotalAscent = 21;
			public const byte TotalDescent = 22;
			public const byte Intensity = 23;
			public const byte LapTrigger = 24;
			public const byte Sport = 25;
			public const byte EventGroup = 26;
			public const byte NumLengths = 32;
			public const byte NormalizedPower = 33;
			public const byte LeftRightBalance = 34;
			public const byte FirstLengthIndex = 35;
			public const byte AvgStrokeDistance = 37;
			public const byte SwimStroke = 38;
			public const byte SubSport = 39;
			public const byte NumActiveLengths = 40;
			public const byte TotalWork = 41;
			public const byte AvgAltitude = 42;
			public const byte MaxAltitude = 43;
			public const byte GpsAccuracy = 44;
			public const byte AvgGrade = 45;
			public const byte AvgPosGrade = 46;
			public const byte AvgNegGrade = 47;
			public const byte MaxPosGrade = 48;
			public const byte MaxNegGrade = 49;
			public const byte AvgTemperature = 50;
			public const byte MaxTemperature = 51;
			public const byte TotalMovingTime = 52;
			public const byte AvgPosVerticalSpeed = 53;
			public const byte AvgNegVerticalSpeed = 54;
			public const byte MaxPosVerticalSpeed = 55;
			public const byte MaxNegVerticalSpeed = 56;
			public const byte TimeInHrZone = 57;
			public const byte TimeInSpeedZone = 58;
			public const byte TimeInCadenceZone = 59;
			public const byte TimeInPowerZone = 60;
			public const byte RepetitionNum = 61;
			public const byte MinAltitude = 62;
			public const byte MinHeartRate = 63;
			public const byte WktStepIndex = 71;
			public const byte OpponentScore = 74;
			public const byte StrokeCount = 75;
			public const byte ZoneCount = 76;
			public const byte AvgVerticalOscillation = 77;
			public const byte AvgStanceTimePercent = 78;
			public const byte AvgStanceTime = 79;
			public const byte AvgFractionalCadence = 80;
			public const byte MaxFractionalCadence = 81;
			public const byte TotalFractionalCycles = 82;
			public const byte PlayerScore = 83;
			public const byte AvgTotalHemoglobinConc = 84;
			public const byte MinTotalHemoglobinConc = 85;
			public const byte MaxTotalHemoglobinConc = 86;
			public const byte AvgSaturatedHemoglobinPercent = 87;
			public const byte MinSaturatedHemoglobinPercent = 88;
			public const byte MaxSaturatedHemoglobinPercent = 89;
			public const byte AvgLeftTorqueEffectiveness = 91;
			public const byte AvgRightTorqueEffectiveness = 92;
			public const byte AvgLeftPedalSmoothness = 93;
			public const byte AvgRightPedalSmoothness = 94;
			public const byte AvgCombinedPedalSmoothness = 95;
			public const byte TimeStanding = 98;
			public const byte StandCount = 99;
			public const byte AvgLeftPco = 100;
			public const byte AvgRightPco = 101;
			public const byte AvgLeftPowerPhase = 102;
			public const byte AvgLeftPowerPhasePeak = 103;
			public const byte AvgRightPowerPhase = 104;
			public const byte AvgRightPowerPhasePeak = 105;
			public const byte AvgPowerPosition = 106;
			public const byte MaxPowerPosition = 107;
			public const byte AvgCadencePosition = 108;
			public const byte MaxCadencePosition = 109;
			public const byte EnhancedAvgSpeed = 110;
			public const byte EnhancedMaxSpeed = 111;
			public const byte EnhancedAvgAltitude = 112;
			public const byte EnhancedMinAltitude = 113;
			public const byte EnhancedMaxAltitude = 114;
			public const byte AvgLevMotorPower = 115;
			public const byte MaxLevMotorPower = 116;
			public const byte LevBatteryConsumption = 117;
			public const byte AvgVerticalRatio = 118;
			public const byte AvgStanceTimeBalance = 119;
			public const byte AvgStepLength = 120;
			public const byte AvgVam = 121;
			public const byte AvgDepth = 122;
			public const byte MaxDepth = 123;
			public const byte MinTemperature = 124;
			public const byte EnhancedAvgRespirationRate = 136;
			public const byte EnhancedMaxRespirationRate = 137;
			public const byte AvgRespirationRate = 147;
			public const byte MaxRespirationRate = 148;
			public const byte TotalGrit = 149;
			public const byte TotalFlow = 150;
			public const byte JumpCount = 151;
			public const byte AvgGrit = 153;
			public const byte AvgFlow = 154;
			public const byte TotalFractionalAscent = 156;
			public const byte TotalFractionalDescent = 157;
			public const byte AvgCoreTemperature = 158;
			public const byte MinCoreTemperature = 159;
			public const byte MaxCoreTemperature = 160;
			public const byte Invalid = Fit.FieldNumInvalid;
		}

		#region Constructors
		public LapMesg() : base(Profile.GetMesg(MesgNum.Lap))
		{
		}

		public LapMesg(Mesg mesg) : base(mesg)
		{
		}
		#endregion // Constructors

		#region Methods
		///<summary>
		/// Retrieves the MessageIndex field</summary>
		/// <returns>Returns nullable ushort representing the MessageIndex field</returns>
		public ushort? MessageIndex
		{
			get
			{
				Object val = GetFieldValue(254, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToUInt16(val));

			}
			set
			{
				SetFieldValue(254, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the Timestamp field
		/// Units: s
		/// Comment: Lap end time.</summary>
		/// <returns>Returns DateTime representing the Timestamp field</returns>
		public DateTime Timestamp
		{
			get
			{
				Object val = GetFieldValue(253, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return TimestampToDateTime(Convert.ToUInt32(val));

			}
			set
			{
				SetFieldValue(253, 0, value.GetTimeStamp(), Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the Event field</summary>
		/// <returns>Returns nullable Event enum representing the Event field</returns>
		public Event? Event
		{
			get
			{
				object obj = GetFieldValue(0, 0, Fit.SubfieldIndexMainField);
				Event? value = obj == null ? (Event?)null : (Event)obj;
				return value;
			}
			set
			{
				SetFieldValue(0, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the EventType field</summary>
		/// <returns>Returns nullable EventType enum representing the EventType field</returns>
		public EventType? EventType
		{
			get
			{
				object obj = GetFieldValue(1, 0, Fit.SubfieldIndexMainField);
				EventType? value = obj == null ? (EventType?)null : (EventType)obj;
				return value;
			}
			set
			{
				SetFieldValue(1, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the StartTime field</summary>
		/// <returns>Returns DateTime representing the StartTime field</returns>
		public DateTime StartTime
		{
			get
			{
				Object val = GetFieldValue(2, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return TimestampToDateTime(Convert.ToUInt32(val));

			}
			set
			{
				SetFieldValue(2, 0, value.GetTimeStamp(), Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the StartPositionLat field
		/// Units: semicircles</summary>
		/// <returns>Returns nullable int representing the StartPositionLat field</returns>
		public int? StartPositionLat
		{
			get
			{
				Object val = GetFieldValue(3, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToInt32(val));

			}
			set
			{
				SetFieldValue(3, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the StartPositionLong field
		/// Units: semicircles</summary>
		/// <returns>Returns nullable int representing the StartPositionLong field</returns>
		public int? StartPositionLong
		{
			get
			{
				Object val = GetFieldValue(4, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToInt32(val));

			}
			set
			{
				SetFieldValue(4, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the EndPositionLat field
		/// Units: semicircles</summary>
		/// <returns>Returns nullable int representing the EndPositionLat field</returns>
		public int? EndPositionLat
		{
			get
			{
				Object val = GetFieldValue(5, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToInt32(val));

			}
			set
			{
				SetFieldValue(5, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the EndPositionLong field
		/// Units: semicircles</summary>
		/// <returns>Returns nullable int representing the EndPositionLong field</returns>
		public int? EndPositionLong
		{
			get
			{
				Object val = GetFieldValue(6, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToInt32(val));

			}
			set
			{
				SetFieldValue(6, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the TotalElapsedTime field
		/// Units: s
		/// Comment: Time (includes pauses)</summary>
		/// <returns>Returns nullable float representing the TotalElapsedTime field</returns>
		public float? TotalElapsedTime
		{
			get
			{
				Object val = GetFieldValue(7, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToSingle(val));

			}
			set
			{
				SetFieldValue(7, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the TotalTimerTime field
		/// Units: s
		/// Comment: Timer Time (excludes pauses)</summary>
		/// <returns>Returns nullable float representing the TotalTimerTime field</returns>
		public float? TotalTimerTime
		{
			get
			{
				Object val = GetFieldValue(8, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToSingle(val));

			}
			set
			{
				SetFieldValue(8, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the TotalDistance field
		/// Units: m</summary>
		/// <returns>Returns nullable float representing the TotalDistance field</returns>
		public float? TotalDistance
		{
			get
			{
				Object val = GetFieldValue(9, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToSingle(val));

			}
			set
			{
				SetFieldValue(9, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the TotalCycles field
		/// Units: cycles</summary>
		/// <returns>Returns nullable uint representing the TotalCycles field</returns>
		public uint? TotalCycles
		{
			get
			{
				Object val = GetFieldValue(10, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToUInt32(val));

			}
			set
			{
				SetFieldValue(10, 0, value, Fit.SubfieldIndexMainField);
			}
		}


		/// <summary>
		/// Retrieves the TotalStrides subfield
		/// Units: strides</summary>
		/// <returns>Nullable uint representing the TotalStrides subfield</returns>
		public uint? TotalStrides
		{
			get
			{
				Object val = GetFieldValue(10, 0, TotalCyclesSubfield.TotalStrides);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToUInt32(val));

			}
			set
			{
				SetFieldValue(10, 0, value, TotalCyclesSubfield.TotalStrides);
			}
		}

		/// <summary>
		/// Retrieves the TotalStrokes subfield
		/// Units: strokes</summary>
		/// <returns>Nullable uint representing the TotalStrokes subfield</returns>
		public uint? TotalStrokes
		{
			get
			{
				Object val = GetFieldValue(10, 0, TotalCyclesSubfield.TotalStrokes);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToUInt32(val));

			}
			set
			{
				SetFieldValue(10, 0, value, TotalCyclesSubfield.TotalStrokes);
			}
		}
		///<summary>
		/// Retrieves the TotalCalories field
		/// Units: kcal</summary>
		/// <returns>Returns nullable ushort representing the TotalCalories field</returns>
		public ushort? TotalCalories
		{
			get
			{
				Object val = GetFieldValue(11, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToUInt16(val));

			}
			set
			{
				SetFieldValue(11, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the TotalFatCalories field
		/// Units: kcal
		/// Comment: If New Leaf</summary>
		/// <returns>Returns nullable ushort representing the TotalFatCalories field</returns>
		public ushort? TotalFatCalories
		{
			get
			{
				Object val = GetFieldValue(12, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToUInt16(val));

			}
			set
			{
				SetFieldValue(12, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the AvgSpeed field
		/// Units: m/s</summary>
		/// <returns>Returns nullable float representing the AvgSpeed field</returns>
		public float? AvgSpeed
		{
			get
			{
				Object val = GetFieldValue(13, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToSingle(val));

			}
			set
			{
				SetFieldValue(13, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the MaxSpeed field
		/// Units: m/s</summary>
		/// <returns>Returns nullable float representing the MaxSpeed field</returns>
		public float? MaxSpeed
		{
			get
			{
				Object val = GetFieldValue(14, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToSingle(val));

			}
			set
			{
				SetFieldValue(14, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the AvgHeartRate field
		/// Units: bpm</summary>
		/// <returns>Returns nullable byte representing the AvgHeartRate field</returns>
		public byte? AvgHeartRate
		{
			get
			{
				Object val = GetFieldValue(15, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToByte(val));

			}
			set
			{
				SetFieldValue(15, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the MaxHeartRate field
		/// Units: bpm</summary>
		/// <returns>Returns nullable byte representing the MaxHeartRate field</returns>
		public byte? MaxHeartRate
		{
			get
			{
				Object val = GetFieldValue(16, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToByte(val));

			}
			set
			{
				SetFieldValue(16, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the AvgCadence field
		/// Units: rpm
		/// Comment: total_cycles / total_timer_time if non_zero_avg_cadence otherwise total_cycles / total_elapsed_time</summary>
		/// <returns>Returns nullable byte representing the AvgCadence field</returns>
		public byte? AvgCadence
		{
			get
			{
				Object val = GetFieldValue(17, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToByte(val));

			}
			set
			{
				SetFieldValue(17, 0, value, Fit.SubfieldIndexMainField);
			}
		}


		/// <summary>
		/// Retrieves the AvgRunningCadence subfield
		/// Units: strides/min</summary>
		/// <returns>Nullable byte representing the AvgRunningCadence subfield</returns>
		public byte? AvgRunningCadence
		{
			get
			{
				Object val = GetFieldValue(17, 0, AvgCadenceSubfield.AvgRunningCadence);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToByte(val));

			}
			set
			{
				SetFieldValue(17, 0, value, AvgCadenceSubfield.AvgRunningCadence);
			}
		}
		///<summary>
		/// Retrieves the MaxCadence field
		/// Units: rpm</summary>
		/// <returns>Returns nullable byte representing the MaxCadence field</returns>
		public byte? MaxCadence
		{
			get
			{
				Object val = GetFieldValue(18, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToByte(val));

			}
			set
			{
				SetFieldValue(18, 0, value, Fit.SubfieldIndexMainField);
			}
		}


		/// <summary>
		/// Retrieves the MaxRunningCadence subfield
		/// Units: strides/min</summary>
		/// <returns>Nullable byte representing the MaxRunningCadence subfield</returns>
		public byte? MaxRunningCadence
		{
			get
			{
				Object val = GetFieldValue(18, 0, MaxCadenceSubfield.MaxRunningCadence);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToByte(val));

			}
			set
			{
				SetFieldValue(18, 0, value, MaxCadenceSubfield.MaxRunningCadence);
			}
		}
		///<summary>
		/// Retrieves the AvgPower field
		/// Units: watts
		/// Comment: total_power / total_timer_time if non_zero_avg_power otherwise total_power / total_elapsed_time</summary>
		/// <returns>Returns nullable ushort representing the AvgPower field</returns>
		public ushort? AvgPower
		{
			get
			{
				Object val = GetFieldValue(19, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToUInt16(val));

			}
			set
			{
				SetFieldValue(19, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the MaxPower field
		/// Units: watts</summary>
		/// <returns>Returns nullable ushort representing the MaxPower field</returns>
		public ushort? MaxPower
		{
			get
			{
				Object val = GetFieldValue(20, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToUInt16(val));

			}
			set
			{
				SetFieldValue(20, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the TotalAscent field
		/// Units: m</summary>
		/// <returns>Returns nullable ushort representing the TotalAscent field</returns>
		public ushort? TotalAscent
		{
			get
			{
				Object val = GetFieldValue(21, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToUInt16(val));

			}
			set
			{
				SetFieldValue(21, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the TotalDescent field
		/// Units: m</summary>
		/// <returns>Returns nullable ushort representing the TotalDescent field</returns>
		public ushort? TotalDescent
		{
			get
			{
				Object val = GetFieldValue(22, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToUInt16(val));

			}
			set
			{
				SetFieldValue(22, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the Intensity field</summary>
		/// <returns>Returns nullable Intensity enum representing the Intensity field</returns>
		public Intensity? Intensity
		{
			get
			{
				object obj = GetFieldValue(23, 0, Fit.SubfieldIndexMainField);
				Intensity? value = obj == null ? (Intensity?)null : (Intensity)obj;
				return value;
			}
			set
			{
				SetFieldValue(23, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the LapTrigger field</summary>
		/// <returns>Returns nullable LapTrigger enum representing the LapTrigger field</returns>
		public LapTrigger? LapTrigger
		{
			get
			{
				object obj = GetFieldValue(24, 0, Fit.SubfieldIndexMainField);
				LapTrigger? value = obj == null ? (LapTrigger?)null : (LapTrigger)obj;
				return value;
			}
			set
			{
				SetFieldValue(24, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the Sport field</summary>
		/// <returns>Returns nullable Sport enum representing the Sport field</returns>
		public Sport? Sport
		{
			get
			{
				object obj = GetFieldValue(25, 0, Fit.SubfieldIndexMainField);
				Sport? value = obj == null ? (Sport?)null : (Sport)obj;
				return value;
			}
			set
			{
				SetFieldValue(25, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the EventGroup field</summary>
		/// <returns>Returns nullable byte representing the EventGroup field</returns>
		public byte? EventGroup
		{
			get
			{
				Object val = GetFieldValue(26, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToByte(val));

			}
			set
			{
				SetFieldValue(26, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the NumLengths field
		/// Units: lengths
		/// Comment: # of lengths of swim pool</summary>
		/// <returns>Returns nullable ushort representing the NumLengths field</returns>
		public ushort? NumLengths
		{
			get
			{
				Object val = GetFieldValue(32, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToUInt16(val));

			}
			set
			{
				SetFieldValue(32, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the NormalizedPower field
		/// Units: watts</summary>
		/// <returns>Returns nullable ushort representing the NormalizedPower field</returns>
		public ushort? NormalizedPower
		{
			get
			{
				Object val = GetFieldValue(33, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToUInt16(val));

			}
			set
			{
				SetFieldValue(33, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the LeftRightBalance field</summary>
		/// <returns>Returns nullable ushort representing the LeftRightBalance field</returns>
		public ushort? LeftRightBalance
		{
			get
			{
				Object val = GetFieldValue(34, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToUInt16(val));

			}
			set
			{
				SetFieldValue(34, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the FirstLengthIndex field</summary>
		/// <returns>Returns nullable ushort representing the FirstLengthIndex field</returns>
		public ushort? FirstLengthIndex
		{
			get
			{
				Object val = GetFieldValue(35, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToUInt16(val));

			}
			set
			{
				SetFieldValue(35, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the AvgStrokeDistance field
		/// Units: m</summary>
		/// <returns>Returns nullable float representing the AvgStrokeDistance field</returns>
		public float? AvgStrokeDistance
		{
			get
			{
				Object val = GetFieldValue(37, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToSingle(val));

			}
			set
			{
				SetFieldValue(37, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the SwimStroke field</summary>
		/// <returns>Returns nullable SwimStroke enum representing the SwimStroke field</returns>
		public SwimStroke? SwimStroke
		{
			get
			{
				object obj = GetFieldValue(38, 0, Fit.SubfieldIndexMainField);
				SwimStroke? value = obj == null ? (SwimStroke?)null : (SwimStroke)obj;
				return value;
			}
			set
			{
				SetFieldValue(38, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the SubSport field</summary>
		/// <returns>Returns nullable SubSport enum representing the SubSport field</returns>
		public SubSport? SubSport
		{
			get
			{
				object obj = GetFieldValue(39, 0, Fit.SubfieldIndexMainField);
				SubSport? value = obj == null ? (SubSport?)null : (SubSport)obj;
				return value;
			}
			set
			{
				SetFieldValue(39, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the NumActiveLengths field
		/// Units: lengths
		/// Comment: # of active lengths of swim pool</summary>
		/// <returns>Returns nullable ushort representing the NumActiveLengths field</returns>
		public ushort? NumActiveLengths
		{
			get
			{
				Object val = GetFieldValue(40, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToUInt16(val));

			}
			set
			{
				SetFieldValue(40, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the TotalWork field
		/// Units: J</summary>
		/// <returns>Returns nullable uint representing the TotalWork field</returns>
		public uint? TotalWork
		{
			get
			{
				Object val = GetFieldValue(41, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToUInt32(val));

			}
			set
			{
				SetFieldValue(41, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the AvgAltitude field
		/// Units: m</summary>
		/// <returns>Returns nullable float representing the AvgAltitude field</returns>
		public float? AvgAltitude
		{
			get
			{
				Object val = GetFieldValue(42, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToSingle(val));

			}
			set
			{
				SetFieldValue(42, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the MaxAltitude field
		/// Units: m</summary>
		/// <returns>Returns nullable float representing the MaxAltitude field</returns>
		public float? MaxAltitude
		{
			get
			{
				Object val = GetFieldValue(43, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToSingle(val));

			}
			set
			{
				SetFieldValue(43, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the GpsAccuracy field
		/// Units: m</summary>
		/// <returns>Returns nullable byte representing the GpsAccuracy field</returns>
		public byte? GpsAccuracy
		{
			get
			{
				Object val = GetFieldValue(44, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToByte(val));

			}
			set
			{
				SetFieldValue(44, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the AvgGrade field
		/// Units: %</summary>
		/// <returns>Returns nullable float representing the AvgGrade field</returns>
		public float? AvgGrade
		{
			get
			{
				Object val = GetFieldValue(45, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToSingle(val));

			}
			set
			{
				SetFieldValue(45, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the AvgPosGrade field
		/// Units: %</summary>
		/// <returns>Returns nullable float representing the AvgPosGrade field</returns>
		public float? AvgPosGrade
		{
			get
			{
				Object val = GetFieldValue(46, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToSingle(val));

			}
			set
			{
				SetFieldValue(46, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the AvgNegGrade field
		/// Units: %</summary>
		/// <returns>Returns nullable float representing the AvgNegGrade field</returns>
		public float? AvgNegGrade
		{
			get
			{
				Object val = GetFieldValue(47, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToSingle(val));

			}
			set
			{
				SetFieldValue(47, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the MaxPosGrade field
		/// Units: %</summary>
		/// <returns>Returns nullable float representing the MaxPosGrade field</returns>
		public float? MaxPosGrade
		{
			get
			{
				Object val = GetFieldValue(48, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToSingle(val));

			}
			set
			{
				SetFieldValue(48, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the MaxNegGrade field
		/// Units: %</summary>
		/// <returns>Returns nullable float representing the MaxNegGrade field</returns>
		public float? MaxNegGrade
		{
			get
			{
				Object val = GetFieldValue(49, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToSingle(val));

			}
			set
			{
				SetFieldValue(49, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the AvgTemperature field
		/// Units: C</summary>
		/// <returns>Returns nullable sbyte representing the AvgTemperature field</returns>
		public sbyte? AvgTemperature
		{
			get
			{
				Object val = GetFieldValue(50, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToSByte(val));

			}
			set
			{
				SetFieldValue(50, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the MaxTemperature field
		/// Units: C</summary>
		/// <returns>Returns nullable sbyte representing the MaxTemperature field</returns>
		public sbyte? MaxTemperature
		{
			get
			{
				Object val = GetFieldValue(51, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToSByte(val));

			}
			set
			{
				SetFieldValue(51, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the TotalMovingTime field
		/// Units: s</summary>
		/// <returns>Returns nullable float representing the TotalMovingTime field</returns>
		public float? TotalMovingTime
		{
			get
			{
				Object val = GetFieldValue(52, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToSingle(val));

			}
			set
			{
				SetFieldValue(52, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the AvgPosVerticalSpeed field
		/// Units: m/s</summary>
		/// <returns>Returns nullable float representing the AvgPosVerticalSpeed field</returns>
		public float? AvgPosVerticalSpeed
		{
			get
			{
				Object val = GetFieldValue(53, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToSingle(val));

			}
			set
			{
				SetFieldValue(53, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the AvgNegVerticalSpeed field
		/// Units: m/s</summary>
		/// <returns>Returns nullable float representing the AvgNegVerticalSpeed field</returns>
		public float? AvgNegVerticalSpeed
		{
			get
			{
				Object val = GetFieldValue(54, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToSingle(val));

			}
			set
			{
				SetFieldValue(54, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the MaxPosVerticalSpeed field
		/// Units: m/s</summary>
		/// <returns>Returns nullable float representing the MaxPosVerticalSpeed field</returns>
		public float? MaxPosVerticalSpeed
		{
			get
			{
				Object val = GetFieldValue(55, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToSingle(val));

			}
			set
			{
				SetFieldValue(55, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the MaxNegVerticalSpeed field
		/// Units: m/s</summary>
		/// <returns>Returns nullable float representing the MaxNegVerticalSpeed field</returns>
		public float? MaxNegVerticalSpeed
		{
			get
			{
				Object val = GetFieldValue(56, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToSingle(val));

			}
			set
			{
				SetFieldValue(56, 0, value, Fit.SubfieldIndexMainField);
			}
		}


		/// <summary>
		///
		/// </summary>
		/// <returns>returns number of elements in field TimeInHrZone</returns>
		public int GetNumTimeInHrZone()
		{
			return GetNumFieldValues(57, Fit.SubfieldIndexMainField);
		}

		///<summary>
		/// Retrieves the TimeInHrZone field
		/// Units: s</summary>
		/// <param name="index">0 based index of TimeInHrZone element to retrieve</param>
		/// <returns>Returns nullable float representing the TimeInHrZone field</returns>
		public float? GetTimeInHrZone(int index)
		{
			Object val = GetFieldValue(57, index, Fit.SubfieldIndexMainField);
			if (val == null)
			{
				return null;
			}

			return (Convert.ToSingle(val));

		}

		/// <summary>
		/// Set TimeInHrZone field
		/// Units: s</summary>
		/// <param name="index">0 based index of time_in_hr_zone</param>
		/// <param name="timeInHrZone_">Nullable field value to be set</param>
		public void SetTimeInHrZone(int index, float? timeInHrZone_)
		{
			SetFieldValue(57, index, timeInHrZone_, Fit.SubfieldIndexMainField);
		}


		/// <summary>
		///
		/// </summary>
		/// <returns>returns number of elements in field TimeInSpeedZone</returns>
		public int GetNumTimeInSpeedZone()
		{
			return GetNumFieldValues(58, Fit.SubfieldIndexMainField);
		}

		///<summary>
		/// Retrieves the TimeInSpeedZone field
		/// Units: s</summary>
		/// <param name="index">0 based index of TimeInSpeedZone element to retrieve</param>
		/// <returns>Returns nullable float representing the TimeInSpeedZone field</returns>
		public float? GetTimeInSpeedZone(int index)
		{
			Object val = GetFieldValue(58, index, Fit.SubfieldIndexMainField);
			if (val == null)
			{
				return null;
			}

			return (Convert.ToSingle(val));

		}

		/// <summary>
		/// Set TimeInSpeedZone field
		/// Units: s</summary>
		/// <param name="index">0 based index of time_in_speed_zone</param>
		/// <param name="timeInSpeedZone_">Nullable field value to be set</param>
		public void SetTimeInSpeedZone(int index, float? timeInSpeedZone_)
		{
			SetFieldValue(58, index, timeInSpeedZone_, Fit.SubfieldIndexMainField);
		}


		/// <summary>
		///
		/// </summary>
		/// <returns>returns number of elements in field TimeInCadenceZone</returns>
		public int GetNumTimeInCadenceZone()
		{
			return GetNumFieldValues(59, Fit.SubfieldIndexMainField);
		}

		///<summary>
		/// Retrieves the TimeInCadenceZone field
		/// Units: s</summary>
		/// <param name="index">0 based index of TimeInCadenceZone element to retrieve</param>
		/// <returns>Returns nullable float representing the TimeInCadenceZone field</returns>
		public float? GetTimeInCadenceZone(int index)
		{
			Object val = GetFieldValue(59, index, Fit.SubfieldIndexMainField);
			if (val == null)
			{
				return null;
			}

			return (Convert.ToSingle(val));

		}

		/// <summary>
		/// Set TimeInCadenceZone field
		/// Units: s</summary>
		/// <param name="index">0 based index of time_in_cadence_zone</param>
		/// <param name="timeInCadenceZone_">Nullable field value to be set</param>
		public void SetTimeInCadenceZone(int index, float? timeInCadenceZone_)
		{
			SetFieldValue(59, index, timeInCadenceZone_, Fit.SubfieldIndexMainField);
		}


		/// <summary>
		///
		/// </summary>
		/// <returns>returns number of elements in field TimeInPowerZone</returns>
		public int GetNumTimeInPowerZone()
		{
			return GetNumFieldValues(60, Fit.SubfieldIndexMainField);
		}

		///<summary>
		/// Retrieves the TimeInPowerZone field
		/// Units: s</summary>
		/// <param name="index">0 based index of TimeInPowerZone element to retrieve</param>
		/// <returns>Returns nullable float representing the TimeInPowerZone field</returns>
		public float? GetTimeInPowerZone(int index)
		{
			Object val = GetFieldValue(60, index, Fit.SubfieldIndexMainField);
			if (val == null)
			{
				return null;
			}

			return (Convert.ToSingle(val));

		}

		/// <summary>
		/// Set TimeInPowerZone field
		/// Units: s</summary>
		/// <param name="index">0 based index of time_in_power_zone</param>
		/// <param name="timeInPowerZone_">Nullable field value to be set</param>
		public void SetTimeInPowerZone(int index, float? timeInPowerZone_)
		{
			SetFieldValue(60, index, timeInPowerZone_, Fit.SubfieldIndexMainField);
		}

		///<summary>
		/// Retrieves the RepetitionNum field</summary>
		/// <returns>Returns nullable ushort representing the RepetitionNum field</returns>
		public ushort? RepetitionNum
		{
			get
			{
				Object val = GetFieldValue(61, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToUInt16(val));

			}
			set
			{
				SetFieldValue(61, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the MinAltitude field
		/// Units: m</summary>
		/// <returns>Returns nullable float representing the MinAltitude field</returns>
		public float? MinAltitude
		{
			get
			{
				Object val = GetFieldValue(62, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToSingle(val));

			}
			set
			{
				SetFieldValue(62, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the MinHeartRate field
		/// Units: bpm</summary>
		/// <returns>Returns nullable byte representing the MinHeartRate field</returns>
		public byte? MinHeartRate
		{
			get
			{
				Object val = GetFieldValue(63, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToByte(val));

			}
			set
			{
				SetFieldValue(63, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the WktStepIndex field</summary>
		/// <returns>Returns nullable ushort representing the WktStepIndex field</returns>
		public ushort? WktStepIndex
		{
			get
			{
				Object val = GetFieldValue(71, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToUInt16(val));

			}
			set
			{
				SetFieldValue(71, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the OpponentScore field</summary>
		/// <returns>Returns nullable ushort representing the OpponentScore field</returns>
		public ushort? OpponentScore
		{
			get
			{
				Object val = GetFieldValue(74, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToUInt16(val));

			}
			set
			{
				SetFieldValue(74, 0, value, Fit.SubfieldIndexMainField);
			}
		}


		/// <summary>
		///
		/// </summary>
		/// <returns>returns number of elements in field StrokeCount</returns>
		public int GetNumStrokeCount()
		{
			return GetNumFieldValues(75, Fit.SubfieldIndexMainField);
		}

		///<summary>
		/// Retrieves the StrokeCount field
		/// Units: counts
		/// Comment: stroke_type enum used as the index</summary>
		/// <param name="index">0 based index of StrokeCount element to retrieve</param>
		/// <returns>Returns nullable ushort representing the StrokeCount field</returns>
		public ushort? GetStrokeCount(int index)
		{
			Object val = GetFieldValue(75, index, Fit.SubfieldIndexMainField);
			if (val == null)
			{
				return null;
			}

			return (Convert.ToUInt16(val));

		}

		/// <summary>
		/// Set StrokeCount field
		/// Units: counts
		/// Comment: stroke_type enum used as the index</summary>
		/// <param name="index">0 based index of stroke_count</param>
		/// <param name="strokeCount_">Nullable field value to be set</param>
		public void SetStrokeCount(int index, ushort? strokeCount_)
		{
			SetFieldValue(75, index, strokeCount_, Fit.SubfieldIndexMainField);
		}


		/// <summary>
		///
		/// </summary>
		/// <returns>returns number of elements in field ZoneCount</returns>
		public int GetNumZoneCount()
		{
			return GetNumFieldValues(76, Fit.SubfieldIndexMainField);
		}

		///<summary>
		/// Retrieves the ZoneCount field
		/// Units: counts
		/// Comment: zone number used as the index</summary>
		/// <param name="index">0 based index of ZoneCount element to retrieve</param>
		/// <returns>Returns nullable ushort representing the ZoneCount field</returns>
		public ushort? GetZoneCount(int index)
		{
			Object val = GetFieldValue(76, index, Fit.SubfieldIndexMainField);
			if (val == null)
			{
				return null;
			}

			return (Convert.ToUInt16(val));

		}

		/// <summary>
		/// Set ZoneCount field
		/// Units: counts
		/// Comment: zone number used as the index</summary>
		/// <param name="index">0 based index of zone_count</param>
		/// <param name="zoneCount_">Nullable field value to be set</param>
		public void SetZoneCount(int index, ushort? zoneCount_)
		{
			SetFieldValue(76, index, zoneCount_, Fit.SubfieldIndexMainField);
		}

		///<summary>
		/// Retrieves the AvgVerticalOscillation field
		/// Units: mm</summary>
		/// <returns>Returns nullable float representing the AvgVerticalOscillation field</returns>
		public float? AvgVerticalOscillation
		{
			get
			{
				Object val = GetFieldValue(77, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToSingle(val));

			}
			set
			{
				SetFieldValue(77, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the AvgStanceTimePercent field
		/// Units: percent</summary>
		/// <returns>Returns nullable float representing the AvgStanceTimePercent field</returns>
		public float? AvgStanceTimePercent
		{
			get
			{
				Object val = GetFieldValue(78, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToSingle(val));

			}
			set
			{
				SetFieldValue(78, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the AvgStanceTime field
		/// Units: ms</summary>
		/// <returns>Returns nullable float representing the AvgStanceTime field</returns>
		public float? AvgStanceTime
		{
			get
			{
				Object val = GetFieldValue(79, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToSingle(val));

			}
			set
			{
				SetFieldValue(79, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the AvgFractionalCadence field
		/// Units: rpm
		/// Comment: fractional part of the avg_cadence</summary>
		/// <returns>Returns nullable float representing the AvgFractionalCadence field</returns>
		public float? AvgFractionalCadence
		{
			get
			{
				Object val = GetFieldValue(80, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToSingle(val));

			}
			set
			{
				SetFieldValue(80, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the MaxFractionalCadence field
		/// Units: rpm
		/// Comment: fractional part of the max_cadence</summary>
		/// <returns>Returns nullable float representing the MaxFractionalCadence field</returns>
		public float? MaxFractionalCadence
		{
			get
			{
				Object val = GetFieldValue(81, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToSingle(val));

			}
			set
			{
				SetFieldValue(81, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the TotalFractionalCycles field
		/// Units: cycles
		/// Comment: fractional part of the total_cycles</summary>
		/// <returns>Returns nullable float representing the TotalFractionalCycles field</returns>
		public float? TotalFractionalCycles
		{
			get
			{
				Object val = GetFieldValue(82, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToSingle(val));

			}
			set
			{
				SetFieldValue(82, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the PlayerScore field</summary>
		/// <returns>Returns nullable ushort representing the PlayerScore field</returns>
		public ushort? PlayerScore
		{
			get
			{
				Object val = GetFieldValue(83, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToUInt16(val));

			}
			set
			{
				SetFieldValue(83, 0, value, Fit.SubfieldIndexMainField);
			}
		}


		/// <summary>
		///
		/// </summary>
		/// <returns>returns number of elements in field AvgTotalHemoglobinConc</returns>
		public int GetNumAvgTotalHemoglobinConc()
		{
			return GetNumFieldValues(84, Fit.SubfieldIndexMainField);
		}

		///<summary>
		/// Retrieves the AvgTotalHemoglobinConc field
		/// Units: g/dL
		/// Comment: Avg saturated and unsaturated hemoglobin</summary>
		/// <param name="index">0 based index of AvgTotalHemoglobinConc element to retrieve</param>
		/// <returns>Returns nullable float representing the AvgTotalHemoglobinConc field</returns>
		public float? GetAvgTotalHemoglobinConc(int index)
		{
			Object val = GetFieldValue(84, index, Fit.SubfieldIndexMainField);
			if (val == null)
			{
				return null;
			}

			return (Convert.ToSingle(val));

		}

		/// <summary>
		/// Set AvgTotalHemoglobinConc field
		/// Units: g/dL
		/// Comment: Avg saturated and unsaturated hemoglobin</summary>
		/// <param name="index">0 based index of avg_total_hemoglobin_conc</param>
		/// <param name="avgTotalHemoglobinConc_">Nullable field value to be set</param>
		public void SetAvgTotalHemoglobinConc(int index, float? avgTotalHemoglobinConc_)
		{
			SetFieldValue(84, index, avgTotalHemoglobinConc_, Fit.SubfieldIndexMainField);
		}


		/// <summary>
		///
		/// </summary>
		/// <returns>returns number of elements in field MinTotalHemoglobinConc</returns>
		public int GetNumMinTotalHemoglobinConc()
		{
			return GetNumFieldValues(85, Fit.SubfieldIndexMainField);
		}

		///<summary>
		/// Retrieves the MinTotalHemoglobinConc field
		/// Units: g/dL
		/// Comment: Min saturated and unsaturated hemoglobin</summary>
		/// <param name="index">0 based index of MinTotalHemoglobinConc element to retrieve</param>
		/// <returns>Returns nullable float representing the MinTotalHemoglobinConc field</returns>
		public float? GetMinTotalHemoglobinConc(int index)
		{
			Object val = GetFieldValue(85, index, Fit.SubfieldIndexMainField);
			if (val == null)
			{
				return null;
			}

			return (Convert.ToSingle(val));

		}

		/// <summary>
		/// Set MinTotalHemoglobinConc field
		/// Units: g/dL
		/// Comment: Min saturated and unsaturated hemoglobin</summary>
		/// <param name="index">0 based index of min_total_hemoglobin_conc</param>
		/// <param name="minTotalHemoglobinConc_">Nullable field value to be set</param>
		public void SetMinTotalHemoglobinConc(int index, float? minTotalHemoglobinConc_)
		{
			SetFieldValue(85, index, minTotalHemoglobinConc_, Fit.SubfieldIndexMainField);
		}


		/// <summary>
		///
		/// </summary>
		/// <returns>returns number of elements in field MaxTotalHemoglobinConc</returns>
		public int GetNumMaxTotalHemoglobinConc()
		{
			return GetNumFieldValues(86, Fit.SubfieldIndexMainField);
		}

		///<summary>
		/// Retrieves the MaxTotalHemoglobinConc field
		/// Units: g/dL
		/// Comment: Max saturated and unsaturated hemoglobin</summary>
		/// <param name="index">0 based index of MaxTotalHemoglobinConc element to retrieve</param>
		/// <returns>Returns nullable float representing the MaxTotalHemoglobinConc field</returns>
		public float? GetMaxTotalHemoglobinConc(int index)
		{
			Object val = GetFieldValue(86, index, Fit.SubfieldIndexMainField);
			if (val == null)
			{
				return null;
			}

			return (Convert.ToSingle(val));

		}

		/// <summary>
		/// Set MaxTotalHemoglobinConc field
		/// Units: g/dL
		/// Comment: Max saturated and unsaturated hemoglobin</summary>
		/// <param name="index">0 based index of max_total_hemoglobin_conc</param>
		/// <param name="maxTotalHemoglobinConc_">Nullable field value to be set</param>
		public void SetMaxTotalHemoglobinConc(int index, float? maxTotalHemoglobinConc_)
		{
			SetFieldValue(86, index, maxTotalHemoglobinConc_, Fit.SubfieldIndexMainField);
		}


		/// <summary>
		///
		/// </summary>
		/// <returns>returns number of elements in field AvgSaturatedHemoglobinPercent</returns>
		public int GetNumAvgSaturatedHemoglobinPercent()
		{
			return GetNumFieldValues(87, Fit.SubfieldIndexMainField);
		}

		///<summary>
		/// Retrieves the AvgSaturatedHemoglobinPercent field
		/// Units: %
		/// Comment: Avg percentage of hemoglobin saturated with oxygen</summary>
		/// <param name="index">0 based index of AvgSaturatedHemoglobinPercent element to retrieve</param>
		/// <returns>Returns nullable float representing the AvgSaturatedHemoglobinPercent field</returns>
		public float? GetAvgSaturatedHemoglobinPercent(int index)
		{
			Object val = GetFieldValue(87, index, Fit.SubfieldIndexMainField);
			if (val == null)
			{
				return null;
			}

			return (Convert.ToSingle(val));

		}

		/// <summary>
		/// Set AvgSaturatedHemoglobinPercent field
		/// Units: %
		/// Comment: Avg percentage of hemoglobin saturated with oxygen</summary>
		/// <param name="index">0 based index of avg_saturated_hemoglobin_percent</param>
		/// <param name="avgSaturatedHemoglobinPercent_">Nullable field value to be set</param>
		public void SetAvgSaturatedHemoglobinPercent(int index, float? avgSaturatedHemoglobinPercent_)
		{
			SetFieldValue(87, index, avgSaturatedHemoglobinPercent_, Fit.SubfieldIndexMainField);
		}


		/// <summary>
		///
		/// </summary>
		/// <returns>returns number of elements in field MinSaturatedHemoglobinPercent</returns>
		public int GetNumMinSaturatedHemoglobinPercent()
		{
			return GetNumFieldValues(88, Fit.SubfieldIndexMainField);
		}

		///<summary>
		/// Retrieves the MinSaturatedHemoglobinPercent field
		/// Units: %
		/// Comment: Min percentage of hemoglobin saturated with oxygen</summary>
		/// <param name="index">0 based index of MinSaturatedHemoglobinPercent element to retrieve</param>
		/// <returns>Returns nullable float representing the MinSaturatedHemoglobinPercent field</returns>
		public float? GetMinSaturatedHemoglobinPercent(int index)
		{
			Object val = GetFieldValue(88, index, Fit.SubfieldIndexMainField);
			if (val == null)
			{
				return null;
			}

			return (Convert.ToSingle(val));

		}

		/// <summary>
		/// Set MinSaturatedHemoglobinPercent field
		/// Units: %
		/// Comment: Min percentage of hemoglobin saturated with oxygen</summary>
		/// <param name="index">0 based index of min_saturated_hemoglobin_percent</param>
		/// <param name="minSaturatedHemoglobinPercent_">Nullable field value to be set</param>
		public void SetMinSaturatedHemoglobinPercent(int index, float? minSaturatedHemoglobinPercent_)
		{
			SetFieldValue(88, index, minSaturatedHemoglobinPercent_, Fit.SubfieldIndexMainField);
		}


		/// <summary>
		///
		/// </summary>
		/// <returns>returns number of elements in field MaxSaturatedHemoglobinPercent</returns>
		public int GetNumMaxSaturatedHemoglobinPercent()
		{
			return GetNumFieldValues(89, Fit.SubfieldIndexMainField);
		}

		///<summary>
		/// Retrieves the MaxSaturatedHemoglobinPercent field
		/// Units: %
		/// Comment: Max percentage of hemoglobin saturated with oxygen</summary>
		/// <param name="index">0 based index of MaxSaturatedHemoglobinPercent element to retrieve</param>
		/// <returns>Returns nullable float representing the MaxSaturatedHemoglobinPercent field</returns>
		public float? GetMaxSaturatedHemoglobinPercent(int index)
		{
			Object val = GetFieldValue(89, index, Fit.SubfieldIndexMainField);
			if (val == null)
			{
				return null;
			}

			return (Convert.ToSingle(val));

		}

		/// <summary>
		/// Set MaxSaturatedHemoglobinPercent field
		/// Units: %
		/// Comment: Max percentage of hemoglobin saturated with oxygen</summary>
		/// <param name="index">0 based index of max_saturated_hemoglobin_percent</param>
		/// <param name="maxSaturatedHemoglobinPercent_">Nullable field value to be set</param>
		public void SetMaxSaturatedHemoglobinPercent(int index, float? maxSaturatedHemoglobinPercent_)
		{
			SetFieldValue(89, index, maxSaturatedHemoglobinPercent_, Fit.SubfieldIndexMainField);
		}

		///<summary>
		/// Retrieves the AvgLeftTorqueEffectiveness field
		/// Units: percent</summary>
		/// <returns>Returns nullable float representing the AvgLeftTorqueEffectiveness field</returns>
		public float? AvgLeftTorqueEffectiveness
		{
			get
			{
				Object val = GetFieldValue(91, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToSingle(val));

			}
			set
			{
				SetFieldValue(91, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the AvgRightTorqueEffectiveness field
		/// Units: percent</summary>
		/// <returns>Returns nullable float representing the AvgRightTorqueEffectiveness field</returns>
		public float? AvgRightTorqueEffectiveness
		{
			get
			{
				Object val = GetFieldValue(92, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToSingle(val));

			}
			set
			{
				SetFieldValue(92, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the AvgLeftPedalSmoothness field
		/// Units: percent</summary>
		/// <returns>Returns nullable float representing the AvgLeftPedalSmoothness field</returns>
		public float? AvgLeftPedalSmoothness
		{
			get
			{
				Object val = GetFieldValue(93, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToSingle(val));

			}
			set
			{
				SetFieldValue(93, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the AvgRightPedalSmoothness field
		/// Units: percent</summary>
		/// <returns>Returns nullable float representing the AvgRightPedalSmoothness field</returns>
		public float? AvgRightPedalSmoothness
		{
			get
			{
				Object val = GetFieldValue(94, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToSingle(val));

			}
			set
			{
				SetFieldValue(94, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the AvgCombinedPedalSmoothness field
		/// Units: percent</summary>
		/// <returns>Returns nullable float representing the AvgCombinedPedalSmoothness field</returns>
		public float? AvgCombinedPedalSmoothness
		{
			get
			{
				Object val = GetFieldValue(95, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToSingle(val));

			}
			set
			{
				SetFieldValue(95, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the TimeStanding field
		/// Units: s
		/// Comment: Total time spent in the standing position</summary>
		/// <returns>Returns nullable float representing the TimeStanding field</returns>
		public float? TimeStanding
		{
			get
			{
				Object val = GetFieldValue(98, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToSingle(val));

			}
			set
			{
				SetFieldValue(98, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the StandCount field
		/// Comment: Number of transitions to the standing state</summary>
		/// <returns>Returns nullable ushort representing the StandCount field</returns>
		public ushort? StandCount
		{
			get
			{
				Object val = GetFieldValue(99, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToUInt16(val));

			}
			set
			{
				SetFieldValue(99, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the AvgLeftPco field
		/// Units: mm
		/// Comment: Average left platform center offset</summary>
		/// <returns>Returns nullable sbyte representing the AvgLeftPco field</returns>
		public sbyte? AvgLeftPco
		{
			get
			{
				Object val = GetFieldValue(100, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToSByte(val));

			}
			set
			{
				SetFieldValue(100, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the AvgRightPco field
		/// Units: mm
		/// Comment: Average right platform center offset</summary>
		/// <returns>Returns nullable sbyte representing the AvgRightPco field</returns>
		public sbyte? AvgRightPco
		{
			get
			{
				Object val = GetFieldValue(101, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToSByte(val));

			}
			set
			{
				SetFieldValue(101, 0, value, Fit.SubfieldIndexMainField);
			}
		}


		/// <summary>
		///
		/// </summary>
		/// <returns>returns number of elements in field AvgLeftPowerPhase</returns>
		public int GetNumAvgLeftPowerPhase()
		{
			return GetNumFieldValues(102, Fit.SubfieldIndexMainField);
		}

		///<summary>
		/// Retrieves the AvgLeftPowerPhase field
		/// Units: degrees
		/// Comment: Average left power phase angles. Data value indexes defined by power_phase_type.</summary>
		/// <param name="index">0 based index of AvgLeftPowerPhase element to retrieve</param>
		/// <returns>Returns nullable float representing the AvgLeftPowerPhase field</returns>
		public float? GetAvgLeftPowerPhase(int index)
		{
			Object val = GetFieldValue(102, index, Fit.SubfieldIndexMainField);
			if (val == null)
			{
				return null;
			}

			return (Convert.ToSingle(val));

		}

		/// <summary>
		/// Set AvgLeftPowerPhase field
		/// Units: degrees
		/// Comment: Average left power phase angles. Data value indexes defined by power_phase_type.</summary>
		/// <param name="index">0 based index of avg_left_power_phase</param>
		/// <param name="avgLeftPowerPhase_">Nullable field value to be set</param>
		public void SetAvgLeftPowerPhase(int index, float? avgLeftPowerPhase_)
		{
			SetFieldValue(102, index, avgLeftPowerPhase_, Fit.SubfieldIndexMainField);
		}


		/// <summary>
		///
		/// </summary>
		/// <returns>returns number of elements in field AvgLeftPowerPhasePeak</returns>
		public int GetNumAvgLeftPowerPhasePeak()
		{
			return GetNumFieldValues(103, Fit.SubfieldIndexMainField);
		}

		///<summary>
		/// Retrieves the AvgLeftPowerPhasePeak field
		/// Units: degrees
		/// Comment: Average left power phase peak angles. Data value indexes defined by power_phase_type.</summary>
		/// <param name="index">0 based index of AvgLeftPowerPhasePeak element to retrieve</param>
		/// <returns>Returns nullable float representing the AvgLeftPowerPhasePeak field</returns>
		public float? GetAvgLeftPowerPhasePeak(int index)
		{
			Object val = GetFieldValue(103, index, Fit.SubfieldIndexMainField);
			if (val == null)
			{
				return null;
			}

			return (Convert.ToSingle(val));

		}

		/// <summary>
		/// Set AvgLeftPowerPhasePeak field
		/// Units: degrees
		/// Comment: Average left power phase peak angles. Data value indexes defined by power_phase_type.</summary>
		/// <param name="index">0 based index of avg_left_power_phase_peak</param>
		/// <param name="avgLeftPowerPhasePeak_">Nullable field value to be set</param>
		public void SetAvgLeftPowerPhasePeak(int index, float? avgLeftPowerPhasePeak_)
		{
			SetFieldValue(103, index, avgLeftPowerPhasePeak_, Fit.SubfieldIndexMainField);
		}


		/// <summary>
		///
		/// </summary>
		/// <returns>returns number of elements in field AvgRightPowerPhase</returns>
		public int GetNumAvgRightPowerPhase()
		{
			return GetNumFieldValues(104, Fit.SubfieldIndexMainField);
		}

		///<summary>
		/// Retrieves the AvgRightPowerPhase field
		/// Units: degrees
		/// Comment: Average right power phase angles. Data value indexes defined by power_phase_type.</summary>
		/// <param name="index">0 based index of AvgRightPowerPhase element to retrieve</param>
		/// <returns>Returns nullable float representing the AvgRightPowerPhase field</returns>
		public float? GetAvgRightPowerPhase(int index)
		{
			Object val = GetFieldValue(104, index, Fit.SubfieldIndexMainField);
			if (val == null)
			{
				return null;
			}

			return (Convert.ToSingle(val));

		}

		/// <summary>
		/// Set AvgRightPowerPhase field
		/// Units: degrees
		/// Comment: Average right power phase angles. Data value indexes defined by power_phase_type.</summary>
		/// <param name="index">0 based index of avg_right_power_phase</param>
		/// <param name="avgRightPowerPhase_">Nullable field value to be set</param>
		public void SetAvgRightPowerPhase(int index, float? avgRightPowerPhase_)
		{
			SetFieldValue(104, index, avgRightPowerPhase_, Fit.SubfieldIndexMainField);
		}


		/// <summary>
		///
		/// </summary>
		/// <returns>returns number of elements in field AvgRightPowerPhasePeak</returns>
		public int GetNumAvgRightPowerPhasePeak()
		{
			return GetNumFieldValues(105, Fit.SubfieldIndexMainField);
		}

		///<summary>
		/// Retrieves the AvgRightPowerPhasePeak field
		/// Units: degrees
		/// Comment: Average right power phase peak angles. Data value indexes defined by power_phase_type.</summary>
		/// <param name="index">0 based index of AvgRightPowerPhasePeak element to retrieve</param>
		/// <returns>Returns nullable float representing the AvgRightPowerPhasePeak field</returns>
		public float? GetAvgRightPowerPhasePeak(int index)
		{
			Object val = GetFieldValue(105, index, Fit.SubfieldIndexMainField);
			if (val == null)
			{
				return null;
			}

			return (Convert.ToSingle(val));

		}

		/// <summary>
		/// Set AvgRightPowerPhasePeak field
		/// Units: degrees
		/// Comment: Average right power phase peak angles. Data value indexes defined by power_phase_type.</summary>
		/// <param name="index">0 based index of avg_right_power_phase_peak</param>
		/// <param name="avgRightPowerPhasePeak_">Nullable field value to be set</param>
		public void SetAvgRightPowerPhasePeak(int index, float? avgRightPowerPhasePeak_)
		{
			SetFieldValue(105, index, avgRightPowerPhasePeak_, Fit.SubfieldIndexMainField);
		}


		/// <summary>
		///
		/// </summary>
		/// <returns>returns number of elements in field AvgPowerPosition</returns>
		public int GetNumAvgPowerPosition()
		{
			return GetNumFieldValues(106, Fit.SubfieldIndexMainField);
		}

		///<summary>
		/// Retrieves the AvgPowerPosition field
		/// Units: watts
		/// Comment: Average power by position. Data value indexes defined by rider_position_type.</summary>
		/// <param name="index">0 based index of AvgPowerPosition element to retrieve</param>
		/// <returns>Returns nullable ushort representing the AvgPowerPosition field</returns>
		public ushort? GetAvgPowerPosition(int index)
		{
			Object val = GetFieldValue(106, index, Fit.SubfieldIndexMainField);
			if (val == null)
			{
				return null;
			}

			return (Convert.ToUInt16(val));

		}

		/// <summary>
		/// Set AvgPowerPosition field
		/// Units: watts
		/// Comment: Average power by position. Data value indexes defined by rider_position_type.</summary>
		/// <param name="index">0 based index of avg_power_position</param>
		/// <param name="avgPowerPosition_">Nullable field value to be set</param>
		public void SetAvgPowerPosition(int index, ushort? avgPowerPosition_)
		{
			SetFieldValue(106, index, avgPowerPosition_, Fit.SubfieldIndexMainField);
		}


		/// <summary>
		///
		/// </summary>
		/// <returns>returns number of elements in field MaxPowerPosition</returns>
		public int GetNumMaxPowerPosition()
		{
			return GetNumFieldValues(107, Fit.SubfieldIndexMainField);
		}

		///<summary>
		/// Retrieves the MaxPowerPosition field
		/// Units: watts
		/// Comment: Maximum power by position. Data value indexes defined by rider_position_type.</summary>
		/// <param name="index">0 based index of MaxPowerPosition element to retrieve</param>
		/// <returns>Returns nullable ushort representing the MaxPowerPosition field</returns>
		public ushort? GetMaxPowerPosition(int index)
		{
			Object val = GetFieldValue(107, index, Fit.SubfieldIndexMainField);
			if (val == null)
			{
				return null;
			}

			return (Convert.ToUInt16(val));

		}

		/// <summary>
		/// Set MaxPowerPosition field
		/// Units: watts
		/// Comment: Maximum power by position. Data value indexes defined by rider_position_type.</summary>
		/// <param name="index">0 based index of max_power_position</param>
		/// <param name="maxPowerPosition_">Nullable field value to be set</param>
		public void SetMaxPowerPosition(int index, ushort? maxPowerPosition_)
		{
			SetFieldValue(107, index, maxPowerPosition_, Fit.SubfieldIndexMainField);
		}


		/// <summary>
		///
		/// </summary>
		/// <returns>returns number of elements in field AvgCadencePosition</returns>
		public int GetNumAvgCadencePosition()
		{
			return GetNumFieldValues(108, Fit.SubfieldIndexMainField);
		}

		///<summary>
		/// Retrieves the AvgCadencePosition field
		/// Units: rpm
		/// Comment: Average cadence by position. Data value indexes defined by rider_position_type.</summary>
		/// <param name="index">0 based index of AvgCadencePosition element to retrieve</param>
		/// <returns>Returns nullable byte representing the AvgCadencePosition field</returns>
		public byte? GetAvgCadencePosition(int index)
		{
			Object val = GetFieldValue(108, index, Fit.SubfieldIndexMainField);
			if (val == null)
			{
				return null;
			}

			return (Convert.ToByte(val));

		}

		/// <summary>
		/// Set AvgCadencePosition field
		/// Units: rpm
		/// Comment: Average cadence by position. Data value indexes defined by rider_position_type.</summary>
		/// <param name="index">0 based index of avg_cadence_position</param>
		/// <param name="avgCadencePosition_">Nullable field value to be set</param>
		public void SetAvgCadencePosition(int index, byte? avgCadencePosition_)
		{
			SetFieldValue(108, index, avgCadencePosition_, Fit.SubfieldIndexMainField);
		}


		/// <summary>
		///
		/// </summary>
		/// <returns>returns number of elements in field MaxCadencePosition</returns>
		public int GetNumMaxCadencePosition()
		{
			return GetNumFieldValues(109, Fit.SubfieldIndexMainField);
		}

		///<summary>
		/// Retrieves the MaxCadencePosition field
		/// Units: rpm
		/// Comment: Maximum cadence by position. Data value indexes defined by rider_position_type.</summary>
		/// <param name="index">0 based index of MaxCadencePosition element to retrieve</param>
		/// <returns>Returns nullable byte representing the MaxCadencePosition field</returns>
		public byte? GetMaxCadencePosition(int index)
		{
			Object val = GetFieldValue(109, index, Fit.SubfieldIndexMainField);
			if (val == null)
			{
				return null;
			}

			return (Convert.ToByte(val));

		}

		/// <summary>
		/// Set MaxCadencePosition field
		/// Units: rpm
		/// Comment: Maximum cadence by position. Data value indexes defined by rider_position_type.</summary>
		/// <param name="index">0 based index of max_cadence_position</param>
		/// <param name="maxCadencePosition_">Nullable field value to be set</param>
		public void SetMaxCadencePosition(int index, byte? maxCadencePosition_)
		{
			SetFieldValue(109, index, maxCadencePosition_, Fit.SubfieldIndexMainField);
		}

		///<summary>
		/// Retrieves the EnhancedAvgSpeed field
		/// Units: m/s</summary>
		/// <returns>Returns nullable float representing the EnhancedAvgSpeed field</returns>
		public float? EnhancedAvgSpeed
		{
			get
			{
				Object val = GetFieldValue(110, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToSingle(val));

			}
			set
			{
				SetFieldValue(110, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the EnhancedMaxSpeed field
		/// Units: m/s</summary>
		/// <returns>Returns nullable float representing the EnhancedMaxSpeed field</returns>
		public float? EnhancedMaxSpeed
		{
			get
			{
				Object val = GetFieldValue(111, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToSingle(val));

			}
			set
			{
				SetFieldValue(111, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the EnhancedAvgAltitude field
		/// Units: m</summary>
		/// <returns>Returns nullable float representing the EnhancedAvgAltitude field</returns>
		public float? EnhancedAvgAltitude
		{
			get
			{
				Object val = GetFieldValue(112, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToSingle(val));

			}
			set
			{
				SetFieldValue(112, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the EnhancedMinAltitude field
		/// Units: m</summary>
		/// <returns>Returns nullable float representing the EnhancedMinAltitude field</returns>
		public float? EnhancedMinAltitude
		{
			get
			{
				Object val = GetFieldValue(113, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToSingle(val));

			}
			set
			{
				SetFieldValue(113, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the EnhancedMaxAltitude field
		/// Units: m</summary>
		/// <returns>Returns nullable float representing the EnhancedMaxAltitude field</returns>
		public float? EnhancedMaxAltitude
		{
			get
			{
				Object val = GetFieldValue(114, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToSingle(val));

			}
			set
			{
				SetFieldValue(114, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the AvgLevMotorPower field
		/// Units: watts
		/// Comment: lev average motor power during lap</summary>
		/// <returns>Returns nullable ushort representing the AvgLevMotorPower field</returns>
		public ushort? AvgLevMotorPower
		{
			get
			{
				Object val = GetFieldValue(115, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToUInt16(val));

			}
			set
			{
				SetFieldValue(115, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the MaxLevMotorPower field
		/// Units: watts
		/// Comment: lev maximum motor power during lap</summary>
		/// <returns>Returns nullable ushort representing the MaxLevMotorPower field</returns>
		public ushort? MaxLevMotorPower
		{
			get
			{
				Object val = GetFieldValue(116, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToUInt16(val));

			}
			set
			{
				SetFieldValue(116, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the LevBatteryConsumption field
		/// Units: percent
		/// Comment: lev battery consumption during lap</summary>
		/// <returns>Returns nullable float representing the LevBatteryConsumption field</returns>
		public float? LevBatteryConsumption
		{
			get
			{
				Object val = GetFieldValue(117, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToSingle(val));

			}
			set
			{
				SetFieldValue(117, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the AvgVerticalRatio field
		/// Units: percent</summary>
		/// <returns>Returns nullable float representing the AvgVerticalRatio field</returns>
		public float? AvgVerticalRatio
		{
			get
			{
				Object val = GetFieldValue(118, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToSingle(val));

			}
			set
			{
				SetFieldValue(118, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the AvgStanceTimeBalance field
		/// Units: percent</summary>
		/// <returns>Returns nullable float representing the AvgStanceTimeBalance field</returns>
		public float? AvgStanceTimeBalance
		{
			get
			{
				Object val = GetFieldValue(119, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToSingle(val));

			}
			set
			{
				SetFieldValue(119, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the AvgStepLength field
		/// Units: mm</summary>
		/// <returns>Returns nullable float representing the AvgStepLength field</returns>
		public float? AvgStepLength
		{
			get
			{
				Object val = GetFieldValue(120, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToSingle(val));

			}
			set
			{
				SetFieldValue(120, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the AvgVam field
		/// Units: m/s</summary>
		/// <returns>Returns nullable float representing the AvgVam field</returns>
		public float? AvgVam
		{
			get
			{
				Object val = GetFieldValue(121, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToSingle(val));

			}
			set
			{
				SetFieldValue(121, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the AvgDepth field
		/// Units: m
		/// Comment: 0 if above water</summary>
		/// <returns>Returns nullable float representing the AvgDepth field</returns>
		public float? AvgDepth
		{
			get
			{
				Object val = GetFieldValue(122, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToSingle(val));

			}
			set
			{
				SetFieldValue(122, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the MaxDepth field
		/// Units: m
		/// Comment: 0 if above water</summary>
		/// <returns>Returns nullable float representing the MaxDepth field</returns>
		public float? MaxDepth
		{
			get
			{
				Object val = GetFieldValue(123, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToSingle(val));

			}
			set
			{
				SetFieldValue(123, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the MinTemperature field
		/// Units: C</summary>
		/// <returns>Returns nullable sbyte representing the MinTemperature field</returns>
		public sbyte? MinTemperature
		{
			get
			{
				Object val = GetFieldValue(124, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToSByte(val));

			}
			set
			{
				SetFieldValue(124, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the EnhancedAvgRespirationRate field
		/// Units: Breaths/min</summary>
		/// <returns>Returns nullable float representing the EnhancedAvgRespirationRate field</returns>
		public float? EnhancedAvgRespirationRate
		{
			get
			{
				Object val = GetFieldValue(136, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToSingle(val));

			}
			set
			{
				SetFieldValue(136, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the EnhancedMaxRespirationRate field
		/// Units: Breaths/min</summary>
		/// <returns>Returns nullable float representing the EnhancedMaxRespirationRate field</returns>
		public float? EnhancedMaxRespirationRate
		{
			get
			{
				Object val = GetFieldValue(137, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToSingle(val));

			}
			set
			{
				SetFieldValue(137, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the AvgRespirationRate field</summary>
		/// <returns>Returns nullable byte representing the AvgRespirationRate field</returns>
		public byte? AvgRespirationRate
		{
			get
			{
				Object val = GetFieldValue(147, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToByte(val));

			}
			set
			{
				SetFieldValue(147, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the MaxRespirationRate field</summary>
		/// <returns>Returns nullable byte representing the MaxRespirationRate field</returns>
		public byte? MaxRespirationRate
		{
			get
			{
				Object val = GetFieldValue(148, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToByte(val));

			}
			set
			{
				SetFieldValue(148, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the TotalGrit field
		/// Units: kGrit
		/// Comment: The grit score estimates how challenging a route could be for a cyclist in terms of time spent going over sharp turns or large grade slopes.</summary>
		/// <returns>Returns nullable float representing the TotalGrit field</returns>
		public float? TotalGrit
		{
			get
			{
				Object val = GetFieldValue(149, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToSingle(val));

			}
			set
			{
				SetFieldValue(149, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the TotalFlow field
		/// Units: Flow
		/// Comment: The flow score estimates how long distance wise a cyclist deaccelerates over intervals where deacceleration is unnecessary such as smooth turns or small grade angle intervals.</summary>
		/// <returns>Returns nullable float representing the TotalFlow field</returns>
		public float? TotalFlow
		{
			get
			{
				Object val = GetFieldValue(150, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToSingle(val));

			}
			set
			{
				SetFieldValue(150, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the JumpCount field</summary>
		/// <returns>Returns nullable ushort representing the JumpCount field</returns>
		public ushort? JumpCount
		{
			get
			{
				Object val = GetFieldValue(151, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToUInt16(val));

			}
			set
			{
				SetFieldValue(151, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the AvgGrit field
		/// Units: kGrit
		/// Comment: The grit score estimates how challenging a route could be for a cyclist in terms of time spent going over sharp turns or large grade slopes.</summary>
		/// <returns>Returns nullable float representing the AvgGrit field</returns>
		public float? AvgGrit
		{
			get
			{
				Object val = GetFieldValue(153, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToSingle(val));

			}
			set
			{
				SetFieldValue(153, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the AvgFlow field
		/// Units: Flow
		/// Comment: The flow score estimates how long distance wise a cyclist deaccelerates over intervals where deacceleration is unnecessary such as smooth turns or small grade angle intervals.</summary>
		/// <returns>Returns nullable float representing the AvgFlow field</returns>
		public float? AvgFlow
		{
			get
			{
				Object val = GetFieldValue(154, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToSingle(val));

			}
			set
			{
				SetFieldValue(154, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the TotalFractionalAscent field
		/// Units: m
		/// Comment: fractional part of total_ascent</summary>
		/// <returns>Returns nullable float representing the TotalFractionalAscent field</returns>
		public float? TotalFractionalAscent
		{
			get
			{
				Object val = GetFieldValue(156, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToSingle(val));

			}
			set
			{
				SetFieldValue(156, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the TotalFractionalDescent field
		/// Units: m
		/// Comment: fractional part of total_descent</summary>
		/// <returns>Returns nullable float representing the TotalFractionalDescent field</returns>
		public float? TotalFractionalDescent
		{
			get
			{
				Object val = GetFieldValue(157, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToSingle(val));

			}
			set
			{
				SetFieldValue(157, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the AvgCoreTemperature field
		/// Units: C</summary>
		/// <returns>Returns nullable float representing the AvgCoreTemperature field</returns>
		public float? AvgCoreTemperature
		{
			get
			{
				Object val = GetFieldValue(158, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToSingle(val));

			}
			set
			{
				SetFieldValue(158, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the MinCoreTemperature field
		/// Units: C</summary>
		/// <returns>Returns nullable float representing the MinCoreTemperature field</returns>
		public float? MinCoreTemperature
		{
			get
			{
				Object val = GetFieldValue(159, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToSingle(val));

			}
			set
			{
				SetFieldValue(159, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the MaxCoreTemperature field
		/// Units: C</summary>
		/// <returns>Returns nullable float representing the MaxCoreTemperature field</returns>
		public float? MaxCoreTemperature
		{
			get
			{
				Object val = GetFieldValue(160, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToSingle(val));

			}
			set
			{
				SetFieldValue(160, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		#endregion // Methods
	} // Class
} // namespace
