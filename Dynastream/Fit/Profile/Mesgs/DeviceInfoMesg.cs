#region Copyright
/////////////////////////////////////////////////////////////////////////////////////////////
// Copyright 2024 Garmin International, Inc.
// Licensed under the Flexible and Interoperable Data Transfer (FIT) Protocol License; you
// may not use this file except in compliance with the Flexible and Interoperable Data
// Transfer (FIT) Protocol License.
/////////////////////////////////////////////////////////////////////////////////////////////
// ****WARNING****  This file is auto-generated!  Do NOT edit this file.
// Profile Version = 21.158.0Release
// Tag = production/release/21.158.0-0-gc9428aa
/////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Text;
using System.IO;
using System.Linq;

namespace Dynastream.Fit
{
	/// <summary>
	/// Implements the DeviceInfo profile message.
	/// </summary>
	public class DeviceInfoMesg : Mesg
	{
		#region Fields
		static class DeviceTypeSubfield
		{
			public static ushort BleDeviceType = 0;
			public static ushort AntplusDeviceType = 1;
			public static ushort AntDeviceType = 2;
			public static ushort LocalDeviceType = 3;
			public static ushort Subfields = 4;
			public static ushort Active = Fit.SubfieldIndexActiveSubfield;
			public static ushort MainField = Fit.SubfieldIndexMainField;
		}
		static class ProductSubfield
		{
			public static ushort FaveroProduct = 0;
			public static ushort GarminProduct = 1;
			public static ushort Subfields = 2;
			public static ushort Active = Fit.SubfieldIndexActiveSubfield;
			public static ushort MainField = Fit.SubfieldIndexMainField;
		}
		#endregion

		/// <summary>
		/// Field Numbers for <see cref="DeviceInfoMesg"/>
		/// </summary>
		public sealed class FieldDefNum
		{
			public const byte Timestamp = 253;
			public const byte DeviceIndex = 0;
			public const byte DeviceType = 1;
			public const byte Manufacturer = 2;
			public const byte SerialNumber = 3;
			public const byte Product = 4;
			public const byte SoftwareVersion = 5;
			public const byte HardwareVersion = 6;
			public const byte CumOperatingTime = 7;
			public const byte BatteryVoltage = 10;
			public const byte BatteryStatus = 11;
			public const byte SensorPosition = 18;
			public const byte Descriptor = 19;
			public const byte AntTransmissionType = 20;
			public const byte AntDeviceNumber = 21;
			public const byte AntNetwork = 22;
			public const byte SourceType = 25;
			public const byte ProductName = 27;
			public const byte BatteryLevel = 32;
			public const byte Invalid = Fit.FieldNumInvalid;
		}

		#region Constructors
		public DeviceInfoMesg() : base(Profile.GetMesg(MesgNum.DeviceInfo))
		{
		}

		public DeviceInfoMesg(Mesg mesg) : base(mesg)
		{
		}
		#endregion // Constructors

		#region Methods
		///<summary>
		/// Retrieves the Timestamp field
		/// Units: s</summary>
		/// <returns>Returns DateTime representing the Timestamp field</returns>
		public DateTime Timestamp
		{
			get
			{
				Object val = GetFieldValue(253, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return TimestampToDateTime(Convert.ToUInt32(val));

			}
			set
			{
				SetFieldValue(253, 0, value.GetTimeStamp(), Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the DeviceIndex field</summary>
		/// <returns>Returns nullable byte representing the DeviceIndex field</returns>
		public byte? DeviceIndex
		{
			get
			{
				Object val = GetFieldValue(0, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToByte(val));

			}
			set
			{
				SetFieldValue(0, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the DeviceType field</summary>
		/// <returns>Returns nullable byte representing the DeviceType field</returns>
		public byte? DeviceType
		{
			get
			{
				Object val = GetFieldValue(1, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToByte(val));

			}
			set
			{
				SetFieldValue(1, 0, value, Fit.SubfieldIndexMainField);
			}
		}


		/// <summary>
		/// Retrieves the BleDeviceType subfield</summary>
		/// <returns>Nullable byte representing the BleDeviceType subfield</returns>
		public byte? BleDeviceType
		{
			get
			{
				Object val = GetFieldValue(1, 0, DeviceTypeSubfield.BleDeviceType);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToByte(val));

			}
			set
			{
				SetFieldValue(1, 0, value, DeviceTypeSubfield.BleDeviceType);
			}
		}

		/// <summary>
		/// Retrieves the AntplusDeviceType subfield</summary>
		/// <returns>Nullable byte representing the AntplusDeviceType subfield</returns>
		public byte? AntplusDeviceType
		{
			get
			{
				Object val = GetFieldValue(1, 0, DeviceTypeSubfield.AntplusDeviceType);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToByte(val));

			}
			set
			{
				SetFieldValue(1, 0, value, DeviceTypeSubfield.AntplusDeviceType);
			}
		}

		/// <summary>
		/// Retrieves the AntDeviceType subfield</summary>
		/// <returns>Nullable byte representing the AntDeviceType subfield</returns>
		public byte? AntDeviceType
		{
			get
			{
				Object val = GetFieldValue(1, 0, DeviceTypeSubfield.AntDeviceType);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToByte(val));

			}
			set
			{
				SetFieldValue(1, 0, value, DeviceTypeSubfield.AntDeviceType);
			}
		}

		/// <summary>
		/// Retrieves the LocalDeviceType subfield</summary>
		/// <returns>Nullable byte representing the LocalDeviceType subfield</returns>
		public byte? LocalDeviceType
		{
			get
			{
				Object val = GetFieldValue(1, 0, DeviceTypeSubfield.LocalDeviceType);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToByte(val));

			}
			set
			{
				SetFieldValue(1, 0, value, DeviceTypeSubfield.LocalDeviceType);
			}
		}
		///<summary>
		/// Retrieves the Manufacturer field</summary>
		/// <returns>Returns nullable ushort representing the Manufacturer field</returns>
		public ushort? Manufacturer
		{
			get
			{
				Object val = GetFieldValue(2, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToUInt16(val));

			}
			set
			{
				SetFieldValue(2, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the SerialNumber field</summary>
		/// <returns>Returns nullable uint representing the SerialNumber field</returns>
		public uint? SerialNumber
		{
			get
			{
				Object val = GetFieldValue(3, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToUInt32(val));

			}
			set
			{
				SetFieldValue(3, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the Product field</summary>
		/// <returns>Returns nullable ushort representing the Product field</returns>
		public ushort? Product
		{
			get
			{
				Object val = GetFieldValue(4, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToUInt16(val));

			}
			set
			{
				SetFieldValue(4, 0, value, Fit.SubfieldIndexMainField);
			}
		}


		/// <summary>
		/// Retrieves the FaveroProduct subfield</summary>
		/// <returns>Nullable ushort representing the FaveroProduct subfield</returns>
		public ushort? FaveroProduct
		{
			get
			{
				Object val = GetFieldValue(4, 0, ProductSubfield.FaveroProduct);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToUInt16(val));

			}
			set
			{
				SetFieldValue(4, 0, value, ProductSubfield.FaveroProduct);
			}
		}

		/// <summary>
		/// Retrieves the GarminProduct subfield</summary>
		/// <returns>Nullable ushort representing the GarminProduct subfield</returns>
		public ushort? GarminProduct
		{
			get
			{
				Object val = GetFieldValue(4, 0, ProductSubfield.GarminProduct);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToUInt16(val));

			}
			set
			{
				SetFieldValue(4, 0, value, ProductSubfield.GarminProduct);
			}
		}
		///<summary>
		/// Retrieves the SoftwareVersion field</summary>
		/// <returns>Returns nullable float representing the SoftwareVersion field</returns>
		public float? SoftwareVersion
		{
			get
			{
				Object val = GetFieldValue(5, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToSingle(val));

			}
			set
			{
				SetFieldValue(5, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the HardwareVersion field</summary>
		/// <returns>Returns nullable byte representing the HardwareVersion field</returns>
		public byte? HardwareVersion
		{
			get
			{
				Object val = GetFieldValue(6, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToByte(val));

			}
			set
			{
				SetFieldValue(6, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the CumOperatingTime field
		/// Units: s
		/// Comment: Reset by new battery or charge.</summary>
		/// <returns>Returns nullable uint representing the CumOperatingTime field</returns>
		public uint? CumOperatingTime
		{
			get
			{
				Object val = GetFieldValue(7, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToUInt32(val));

			}
			set
			{
				SetFieldValue(7, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the BatteryVoltage field
		/// Units: V</summary>
		/// <returns>Returns nullable float representing the BatteryVoltage field</returns>
		public float? BatteryVoltage
		{
			get
			{
				Object val = GetFieldValue(10, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToSingle(val));

			}
			set
			{
				SetFieldValue(10, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the BatteryStatus field</summary>
		/// <returns>Returns nullable byte representing the BatteryStatus field</returns>
		public byte? BatteryStatus
		{
			get
			{
				Object val = GetFieldValue(11, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToByte(val));

			}
			set
			{
				SetFieldValue(11, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the SensorPosition field
		/// Comment: Indicates the location of the sensor</summary>
		/// <returns>Returns nullable BodyLocation enum representing the SensorPosition field</returns>
		public BodyLocation? SensorPosition
		{
			get
			{
				object obj = GetFieldValue(18, 0, Fit.SubfieldIndexMainField);
				BodyLocation? value = obj == null ? (BodyLocation?)null : (BodyLocation)obj;
				return value;
			}
			set
			{
				SetFieldValue(18, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the Descriptor field
		/// Comment: Used to describe the sensor or location</summary>
		/// <returns>Returns byte[] representing the Descriptor field</returns>
		public byte[] Descriptor
		{
			get
			{
				byte[] data = (byte[])GetFieldValue(19, 0, Fit.SubfieldIndexMainField);
				return data.Take(data.Length - 1).ToArray();
			}
			set
			{
				SetFieldValue(19, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the Descriptor field
		/// Comment: Used to describe the sensor or location</summary>
		/// <returns>Returns String representing the Descriptor field</returns>
		public String GetDescriptorAsString()
		{
			byte[] data = (byte[])GetFieldValue(19, 0, Fit.SubfieldIndexMainField);
			return data != null ? Encoding.UTF8.GetString(data, 0, data.Length - 1) : null;
		}

		///<summary>
		/// Set Descriptor field
		/// Comment: Used to describe the sensor or location</summary>
		/// <param name="descriptor_"> field value to be set</param>
		public void SetDescriptor(String descriptor_)
		{
			byte[] data = Encoding.UTF8.GetBytes(descriptor_);
			byte[] zdata = new byte[data.Length + 1];
			data.CopyTo(zdata, 0);
			SetFieldValue(19, 0, zdata, Fit.SubfieldIndexMainField);
		}

		///<summary>
		/// Retrieves the AntTransmissionType field</summary>
		/// <returns>Returns nullable byte representing the AntTransmissionType field</returns>
		public byte? AntTransmissionType
		{
			get
			{
				Object val = GetFieldValue(20, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToByte(val));

			}
			set
			{
				SetFieldValue(20, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the AntDeviceNumber field</summary>
		/// <returns>Returns nullable ushort representing the AntDeviceNumber field</returns>
		public ushort? AntDeviceNumber
		{
			get
			{
				Object val = GetFieldValue(21, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToUInt16(val));

			}
			set
			{
				SetFieldValue(21, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the AntNetwork field</summary>
		/// <returns>Returns nullable AntNetwork enum representing the AntNetwork field</returns>
		public AntNetwork? AntNetwork
		{
			get
			{
				object obj = GetFieldValue(22, 0, Fit.SubfieldIndexMainField);
				AntNetwork? value = obj == null ? (AntNetwork?)null : (AntNetwork)obj;
				return value;
			}
			set
			{
				SetFieldValue(22, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the SourceType field</summary>
		/// <returns>Returns nullable SourceType enum representing the SourceType field</returns>
		public SourceType? SourceType
		{
			get
			{
				object obj = GetFieldValue(25, 0, Fit.SubfieldIndexMainField);
				SourceType? value = obj == null ? (SourceType?)null : (SourceType)obj;
				return value;
			}
			set
			{
				SetFieldValue(25, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the ProductName field
		/// Comment: Optional free form string to indicate the devices name or model</summary>
		/// <returns>Returns byte[] representing the ProductName field</returns>
		public byte[] ProductName
		{
			get
			{
				byte[] data = (byte[])GetFieldValue(27, 0, Fit.SubfieldIndexMainField);
				return data.Take(data.Length - 1).ToArray();
			}
			set
			{
				SetFieldValue(27, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the ProductName field
		/// Comment: Optional free form string to indicate the devices name or model</summary>
		/// <returns>Returns String representing the ProductName field</returns>
		public String GetProductNameAsString()
		{
			byte[] data = (byte[])GetFieldValue(27, 0, Fit.SubfieldIndexMainField);
			return data != null ? Encoding.UTF8.GetString(data, 0, data.Length - 1) : null;
		}

		///<summary>
		/// Set ProductName field
		/// Comment: Optional free form string to indicate the devices name or model</summary>
		/// <param name="productName_"> field value to be set</param>
		public void SetProductName(String productName_)
		{
			byte[] data = Encoding.UTF8.GetBytes(productName_);
			byte[] zdata = new byte[data.Length + 1];
			data.CopyTo(zdata, 0);
			SetFieldValue(27, 0, zdata, Fit.SubfieldIndexMainField);
		}

		///<summary>
		/// Retrieves the BatteryLevel field
		/// Units: %</summary>
		/// <returns>Returns nullable byte representing the BatteryLevel field</returns>
		public byte? BatteryLevel
		{
			get
			{
				Object val = GetFieldValue(32, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToByte(val));

			}
			set
			{
				SetFieldValue(32, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		#endregion // Methods
	} // Class
} // namespace
