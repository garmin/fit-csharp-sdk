#region Copyright
/////////////////////////////////////////////////////////////////////////////////////////////
// Copyright 2024 Garmin International, Inc.
// Licensed under the Flexible and Interoperable Data Transfer (FIT) Protocol License; you
// may not use this file except in compliance with the Flexible and Interoperable Data
// Transfer (FIT) Protocol License.
/////////////////////////////////////////////////////////////////////////////////////////////
// ****WARNING****  This file is auto-generated!  Do NOT edit this file.
// Profile Version = 21.141.0Release
// Tag = production/release/21.141.0-0-g2aa27e1
/////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Text;
using System.IO;
using System.Linq;

namespace Dynastream.Fit
{
    /// <summary>
    /// Implements the SleepAssessment profile message.
    /// </summary>
    public class SleepAssessmentMesg : Mesg
    {
        #region Fields
        #endregion

        /// <summary>
        /// Field Numbers for <see cref="SleepAssessmentMesg"/>
        /// </summary>
        public sealed class FieldDefNum
        {
            public const byte CombinedAwakeScore = 0;
            public const byte AwakeTimeScore = 1;
            public const byte AwakeningsCountScore = 2;
            public const byte DeepSleepScore = 3;
            public const byte SleepDurationScore = 4;
            public const byte LightSleepScore = 5;
            public const byte OverallSleepScore = 6;
            public const byte SleepQualityScore = 7;
            public const byte SleepRecoveryScore = 8;
            public const byte RemSleepScore = 9;
            public const byte SleepRestlessnessScore = 10;
            public const byte AwakeningsCount = 11;
            public const byte InterruptionsScore = 14;
            public const byte AverageStressDuringSleep = 15;
            public const byte Invalid = Fit.FieldNumInvalid;
        }

        #region Constructors
        public SleepAssessmentMesg() : base(Profile.GetMesg(MesgNum.SleepAssessment))
        {
        }

        public SleepAssessmentMesg(Mesg mesg) : base(mesg)
        {
        }
        #endregion // Constructors

        #region Methods
        ///<summary>
        /// Retrieves the CombinedAwakeScore field
        /// Comment: Average of awake_time_score and awakenings_count_score. If valid: 0 (worst) to 100 (best). If unknown: FIT_UINT8_INVALID.</summary>
        /// <returns>Returns nullable byte representing the CombinedAwakeScore field</returns>
        public byte? GetCombinedAwakeScore()
        {
            Object val = GetFieldValue(0, 0, Fit.SubfieldIndexMainField);
            if(val == null)
            {
                return null;
            }

            return (Convert.ToByte(val));
            
        }

        /// <summary>
        /// Set CombinedAwakeScore field
        /// Comment: Average of awake_time_score and awakenings_count_score. If valid: 0 (worst) to 100 (best). If unknown: FIT_UINT8_INVALID.</summary>
        /// <param name="combinedAwakeScore_">Nullable field value to be set</param>
        public void SetCombinedAwakeScore(byte? combinedAwakeScore_)
        {
            SetFieldValue(0, 0, combinedAwakeScore_, Fit.SubfieldIndexMainField);
        }
        
        ///<summary>
        /// Retrieves the AwakeTimeScore field
        /// Comment: Score that evaluates the total time spent awake between sleep. If valid: 0 (worst) to 100 (best). If unknown: FIT_UINT8_INVALID.</summary>
        /// <returns>Returns nullable byte representing the AwakeTimeScore field</returns>
        public byte? GetAwakeTimeScore()
        {
            Object val = GetFieldValue(1, 0, Fit.SubfieldIndexMainField);
            if(val == null)
            {
                return null;
            }

            return (Convert.ToByte(val));
            
        }

        /// <summary>
        /// Set AwakeTimeScore field
        /// Comment: Score that evaluates the total time spent awake between sleep. If valid: 0 (worst) to 100 (best). If unknown: FIT_UINT8_INVALID.</summary>
        /// <param name="awakeTimeScore_">Nullable field value to be set</param>
        public void SetAwakeTimeScore(byte? awakeTimeScore_)
        {
            SetFieldValue(1, 0, awakeTimeScore_, Fit.SubfieldIndexMainField);
        }
        
        ///<summary>
        /// Retrieves the AwakeningsCountScore field
        /// Comment: Score that evaluates the number of awakenings that interrupt sleep. If valid: 0 (worst) to 100 (best). If unknown: FIT_UINT8_INVALID.</summary>
        /// <returns>Returns nullable byte representing the AwakeningsCountScore field</returns>
        public byte? GetAwakeningsCountScore()
        {
            Object val = GetFieldValue(2, 0, Fit.SubfieldIndexMainField);
            if(val == null)
            {
                return null;
            }

            return (Convert.ToByte(val));
            
        }

        /// <summary>
        /// Set AwakeningsCountScore field
        /// Comment: Score that evaluates the number of awakenings that interrupt sleep. If valid: 0 (worst) to 100 (best). If unknown: FIT_UINT8_INVALID.</summary>
        /// <param name="awakeningsCountScore_">Nullable field value to be set</param>
        public void SetAwakeningsCountScore(byte? awakeningsCountScore_)
        {
            SetFieldValue(2, 0, awakeningsCountScore_, Fit.SubfieldIndexMainField);
        }
        
        ///<summary>
        /// Retrieves the DeepSleepScore field
        /// Comment: Score that evaluates the amount of deep sleep. If valid: 0 (worst) to 100 (best). If unknown: FIT_UINT8_INVALID.</summary>
        /// <returns>Returns nullable byte representing the DeepSleepScore field</returns>
        public byte? GetDeepSleepScore()
        {
            Object val = GetFieldValue(3, 0, Fit.SubfieldIndexMainField);
            if(val == null)
            {
                return null;
            }

            return (Convert.ToByte(val));
            
        }

        /// <summary>
        /// Set DeepSleepScore field
        /// Comment: Score that evaluates the amount of deep sleep. If valid: 0 (worst) to 100 (best). If unknown: FIT_UINT8_INVALID.</summary>
        /// <param name="deepSleepScore_">Nullable field value to be set</param>
        public void SetDeepSleepScore(byte? deepSleepScore_)
        {
            SetFieldValue(3, 0, deepSleepScore_, Fit.SubfieldIndexMainField);
        }
        
        ///<summary>
        /// Retrieves the SleepDurationScore field
        /// Comment: Score that evaluates the quality of sleep based on sleep stages, heart-rate variability and possible awakenings during the night. If valid: 0 (worst) to 100 (best). If unknown: FIT_UINT8_INVALID.</summary>
        /// <returns>Returns nullable byte representing the SleepDurationScore field</returns>
        public byte? GetSleepDurationScore()
        {
            Object val = GetFieldValue(4, 0, Fit.SubfieldIndexMainField);
            if(val == null)
            {
                return null;
            }

            return (Convert.ToByte(val));
            
        }

        /// <summary>
        /// Set SleepDurationScore field
        /// Comment: Score that evaluates the quality of sleep based on sleep stages, heart-rate variability and possible awakenings during the night. If valid: 0 (worst) to 100 (best). If unknown: FIT_UINT8_INVALID.</summary>
        /// <param name="sleepDurationScore_">Nullable field value to be set</param>
        public void SetSleepDurationScore(byte? sleepDurationScore_)
        {
            SetFieldValue(4, 0, sleepDurationScore_, Fit.SubfieldIndexMainField);
        }
        
        ///<summary>
        /// Retrieves the LightSleepScore field
        /// Comment: Score that evaluates the amount of light sleep. If valid: 0 (worst) to 100 (best). If unknown: FIT_UINT8_INVALID.</summary>
        /// <returns>Returns nullable byte representing the LightSleepScore field</returns>
        public byte? GetLightSleepScore()
        {
            Object val = GetFieldValue(5, 0, Fit.SubfieldIndexMainField);
            if(val == null)
            {
                return null;
            }

            return (Convert.ToByte(val));
            
        }

        /// <summary>
        /// Set LightSleepScore field
        /// Comment: Score that evaluates the amount of light sleep. If valid: 0 (worst) to 100 (best). If unknown: FIT_UINT8_INVALID.</summary>
        /// <param name="lightSleepScore_">Nullable field value to be set</param>
        public void SetLightSleepScore(byte? lightSleepScore_)
        {
            SetFieldValue(5, 0, lightSleepScore_, Fit.SubfieldIndexMainField);
        }
        
        ///<summary>
        /// Retrieves the OverallSleepScore field
        /// Comment: Total score that summarizes the overall quality of sleep, combining sleep duration and quality. If valid: 0 (worst) to 100 (best). If unknown: FIT_UINT8_INVALID.</summary>
        /// <returns>Returns nullable byte representing the OverallSleepScore field</returns>
        public byte? GetOverallSleepScore()
        {
            Object val = GetFieldValue(6, 0, Fit.SubfieldIndexMainField);
            if(val == null)
            {
                return null;
            }

            return (Convert.ToByte(val));
            
        }

        /// <summary>
        /// Set OverallSleepScore field
        /// Comment: Total score that summarizes the overall quality of sleep, combining sleep duration and quality. If valid: 0 (worst) to 100 (best). If unknown: FIT_UINT8_INVALID.</summary>
        /// <param name="overallSleepScore_">Nullable field value to be set</param>
        public void SetOverallSleepScore(byte? overallSleepScore_)
        {
            SetFieldValue(6, 0, overallSleepScore_, Fit.SubfieldIndexMainField);
        }
        
        ///<summary>
        /// Retrieves the SleepQualityScore field
        /// Comment: Score that evaluates the quality of sleep based on sleep stages, heart-rate variability and possible awakenings during the night. If valid: 0 (worst) to 100 (best). If unknown: FIT_UINT8_INVALID.</summary>
        /// <returns>Returns nullable byte representing the SleepQualityScore field</returns>
        public byte? GetSleepQualityScore()
        {
            Object val = GetFieldValue(7, 0, Fit.SubfieldIndexMainField);
            if(val == null)
            {
                return null;
            }

            return (Convert.ToByte(val));
            
        }

        /// <summary>
        /// Set SleepQualityScore field
        /// Comment: Score that evaluates the quality of sleep based on sleep stages, heart-rate variability and possible awakenings during the night. If valid: 0 (worst) to 100 (best). If unknown: FIT_UINT8_INVALID.</summary>
        /// <param name="sleepQualityScore_">Nullable field value to be set</param>
        public void SetSleepQualityScore(byte? sleepQualityScore_)
        {
            SetFieldValue(7, 0, sleepQualityScore_, Fit.SubfieldIndexMainField);
        }
        
        ///<summary>
        /// Retrieves the SleepRecoveryScore field
        /// Comment: Score that evaluates stress and recovery during sleep. If valid: 0 (worst) to 100 (best). If unknown: FIT_UINT8_INVALID.</summary>
        /// <returns>Returns nullable byte representing the SleepRecoveryScore field</returns>
        public byte? GetSleepRecoveryScore()
        {
            Object val = GetFieldValue(8, 0, Fit.SubfieldIndexMainField);
            if(val == null)
            {
                return null;
            }

            return (Convert.ToByte(val));
            
        }

        /// <summary>
        /// Set SleepRecoveryScore field
        /// Comment: Score that evaluates stress and recovery during sleep. If valid: 0 (worst) to 100 (best). If unknown: FIT_UINT8_INVALID.</summary>
        /// <param name="sleepRecoveryScore_">Nullable field value to be set</param>
        public void SetSleepRecoveryScore(byte? sleepRecoveryScore_)
        {
            SetFieldValue(8, 0, sleepRecoveryScore_, Fit.SubfieldIndexMainField);
        }
        
        ///<summary>
        /// Retrieves the RemSleepScore field
        /// Comment: Score that evaluates the amount of REM sleep. If valid: 0 (worst) to 100 (best). If unknown: FIT_UINT8_INVALID.</summary>
        /// <returns>Returns nullable byte representing the RemSleepScore field</returns>
        public byte? GetRemSleepScore()
        {
            Object val = GetFieldValue(9, 0, Fit.SubfieldIndexMainField);
            if(val == null)
            {
                return null;
            }

            return (Convert.ToByte(val));
            
        }

        /// <summary>
        /// Set RemSleepScore field
        /// Comment: Score that evaluates the amount of REM sleep. If valid: 0 (worst) to 100 (best). If unknown: FIT_UINT8_INVALID.</summary>
        /// <param name="remSleepScore_">Nullable field value to be set</param>
        public void SetRemSleepScore(byte? remSleepScore_)
        {
            SetFieldValue(9, 0, remSleepScore_, Fit.SubfieldIndexMainField);
        }
        
        ///<summary>
        /// Retrieves the SleepRestlessnessScore field
        /// Comment: Score that evaluates the amount of restlessness during sleep. If valid: 0 (worst) to 100 (best). If unknown: FIT_UINT8_INVALID.</summary>
        /// <returns>Returns nullable byte representing the SleepRestlessnessScore field</returns>
        public byte? GetSleepRestlessnessScore()
        {
            Object val = GetFieldValue(10, 0, Fit.SubfieldIndexMainField);
            if(val == null)
            {
                return null;
            }

            return (Convert.ToByte(val));
            
        }

        /// <summary>
        /// Set SleepRestlessnessScore field
        /// Comment: Score that evaluates the amount of restlessness during sleep. If valid: 0 (worst) to 100 (best). If unknown: FIT_UINT8_INVALID.</summary>
        /// <param name="sleepRestlessnessScore_">Nullable field value to be set</param>
        public void SetSleepRestlessnessScore(byte? sleepRestlessnessScore_)
        {
            SetFieldValue(10, 0, sleepRestlessnessScore_, Fit.SubfieldIndexMainField);
        }
        
        ///<summary>
        /// Retrieves the AwakeningsCount field
        /// Comment: The number of awakenings during sleep.</summary>
        /// <returns>Returns nullable byte representing the AwakeningsCount field</returns>
        public byte? GetAwakeningsCount()
        {
            Object val = GetFieldValue(11, 0, Fit.SubfieldIndexMainField);
            if(val == null)
            {
                return null;
            }

            return (Convert.ToByte(val));
            
        }

        /// <summary>
        /// Set AwakeningsCount field
        /// Comment: The number of awakenings during sleep.</summary>
        /// <param name="awakeningsCount_">Nullable field value to be set</param>
        public void SetAwakeningsCount(byte? awakeningsCount_)
        {
            SetFieldValue(11, 0, awakeningsCount_, Fit.SubfieldIndexMainField);
        }
        
        ///<summary>
        /// Retrieves the InterruptionsScore field
        /// Comment: Score that evaluates the sleep interruptions. If valid: 0 (worst) to 100 (best). If unknown: FIT_UINT8_INVALID.</summary>
        /// <returns>Returns nullable byte representing the InterruptionsScore field</returns>
        public byte? GetInterruptionsScore()
        {
            Object val = GetFieldValue(14, 0, Fit.SubfieldIndexMainField);
            if(val == null)
            {
                return null;
            }

            return (Convert.ToByte(val));
            
        }

        /// <summary>
        /// Set InterruptionsScore field
        /// Comment: Score that evaluates the sleep interruptions. If valid: 0 (worst) to 100 (best). If unknown: FIT_UINT8_INVALID.</summary>
        /// <param name="interruptionsScore_">Nullable field value to be set</param>
        public void SetInterruptionsScore(byte? interruptionsScore_)
        {
            SetFieldValue(14, 0, interruptionsScore_, Fit.SubfieldIndexMainField);
        }
        
        ///<summary>
        /// Retrieves the AverageStressDuringSleep field
        /// Comment: Excludes stress during awake periods in the sleep window</summary>
        /// <returns>Returns nullable float representing the AverageStressDuringSleep field</returns>
        public float? GetAverageStressDuringSleep()
        {
            Object val = GetFieldValue(15, 0, Fit.SubfieldIndexMainField);
            if(val == null)
            {
                return null;
            }

            return (Convert.ToSingle(val));
            
        }

        /// <summary>
        /// Set AverageStressDuringSleep field
        /// Comment: Excludes stress during awake periods in the sleep window</summary>
        /// <param name="averageStressDuringSleep_">Nullable field value to be set</param>
        public void SetAverageStressDuringSleep(float? averageStressDuringSleep_)
        {
            SetFieldValue(15, 0, averageStressDuringSleep_, Fit.SubfieldIndexMainField);
        }
        
        #endregion // Methods
    } // Class
} // namespace
