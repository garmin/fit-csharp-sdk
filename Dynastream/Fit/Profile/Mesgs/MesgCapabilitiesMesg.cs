#region Copyright
/////////////////////////////////////////////////////////////////////////////////////////////
// Copyright 2024 Garmin International, Inc.
// Licensed under the Flexible and Interoperable Data Transfer (FIT) Protocol License; you
// may not use this file except in compliance with the Flexible and Interoperable Data
// Transfer (FIT) Protocol License.
/////////////////////////////////////////////////////////////////////////////////////////////
// ****WARNING****  This file is auto-generated!  Do NOT edit this file.
// Profile Version = 21.158.0Release
// Tag = production/release/21.158.0-0-gc9428aa
/////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Text;
using System.IO;
using System.Linq;

namespace Dynastream.Fit
{
	/// <summary>
	/// Implements the MesgCapabilities profile message.
	/// </summary>
	public class MesgCapabilitiesMesg : Mesg
	{
		#region Fields
		static class CountSubfield
		{
			public static ushort NumPerFile = 0;
			public static ushort MaxPerFile = 1;
			public static ushort MaxPerFileType = 2;
			public static ushort Subfields = 3;
			public static ushort Active = Fit.SubfieldIndexActiveSubfield;
			public static ushort MainField = Fit.SubfieldIndexMainField;
		}
		#endregion

		/// <summary>
		/// Field Numbers for <see cref="MesgCapabilitiesMesg"/>
		/// </summary>
		public sealed class FieldDefNum
		{
			public const byte MessageIndex = 254;
			public const byte File = 0;
			public const byte MesgNum = 1;
			public const byte CountType = 2;
			public const byte Count = 3;
			public const byte Invalid = Fit.FieldNumInvalid;
		}

		#region Constructors
		public MesgCapabilitiesMesg() : base(Profile.GetMesg(Dynastream.Fit.MesgNum.MesgCapabilities))
		{
		}

		public MesgCapabilitiesMesg(Mesg mesg) : base(mesg)
		{
		}
		#endregion // Constructors

		#region Methods
		///<summary>
		/// Retrieves the MessageIndex field</summary>
		/// <returns>Returns nullable ushort representing the MessageIndex field</returns>
		public ushort? MessageIndex
		{
			get
			{
				Object val = GetFieldValue(254, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToUInt16(val));

			}
			set
			{
				SetFieldValue(254, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the File field</summary>
		/// <returns>Returns nullable File enum representing the File field</returns>
		public File? File
		{
			get
			{
				object obj = GetFieldValue(0, 0, Fit.SubfieldIndexMainField);
				File? value = obj == null ? (File?)null : (File)obj;
				return value;
			}
			set
			{
				SetFieldValue(0, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the MesgNum field</summary>
		/// <returns>Returns nullable ushort representing the MesgNum field</returns>
		public ushort? MesgNum
		{
			get
			{
				Object val = GetFieldValue(1, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToUInt16(val));

			}
			set
			{
				SetFieldValue(1, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the CountType field</summary>
		/// <returns>Returns nullable MesgCount enum representing the CountType field</returns>
		public MesgCount? CountType
		{
			get
			{
				object obj = GetFieldValue(2, 0, Fit.SubfieldIndexMainField);
				MesgCount? value = obj == null ? (MesgCount?)null : (MesgCount)obj;
				return value;
			}
			set
			{
				SetFieldValue(2, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the Count field</summary>
		/// <returns>Returns nullable ushort representing the Count field</returns>
		public ushort? Count
		{
			get
			{
				Object val = GetFieldValue(3, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToUInt16(val));

			}
			set
			{
				SetFieldValue(3, 0, value, Fit.SubfieldIndexMainField);
			}
		}


		/// <summary>
		/// Retrieves the NumPerFile subfield</summary>
		/// <returns>Nullable ushort representing the NumPerFile subfield</returns>
		public ushort? NumPerFile
		{
			get
			{
				Object val = GetFieldValue(3, 0, CountSubfield.NumPerFile);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToUInt16(val));

			}
			set
			{
				SetFieldValue(3, 0, value, CountSubfield.NumPerFile);
			}
		}

		/// <summary>
		/// Retrieves the MaxPerFile subfield</summary>
		/// <returns>Nullable ushort representing the MaxPerFile subfield</returns>
		public ushort? MaxPerFile
		{
			get
			{
				Object val = GetFieldValue(3, 0, CountSubfield.MaxPerFile);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToUInt16(val));

			}
			set
			{
				SetFieldValue(3, 0, value, CountSubfield.MaxPerFile);
			}
		}

		/// <summary>
		/// Retrieves the MaxPerFileType subfield</summary>
		/// <returns>Nullable ushort representing the MaxPerFileType subfield</returns>
		public ushort? MaxPerFileType
		{
			get
			{
				Object val = GetFieldValue(3, 0, CountSubfield.MaxPerFileType);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToUInt16(val));

			}
			set
			{
				SetFieldValue(3, 0, value, CountSubfield.MaxPerFileType);
			}
		}
		#endregion // Methods
	} // Class
} // namespace
