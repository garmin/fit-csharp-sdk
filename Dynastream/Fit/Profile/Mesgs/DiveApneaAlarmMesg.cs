#region Copyright
/////////////////////////////////////////////////////////////////////////////////////////////
// Copyright 2024 Garmin International, Inc.
// Licensed under the Flexible and Interoperable Data Transfer (FIT) Protocol License; you
// may not use this file except in compliance with the Flexible and Interoperable Data
// Transfer (FIT) Protocol License.
/////////////////////////////////////////////////////////////////////////////////////////////
// ****WARNING****  This file is auto-generated!  Do NOT edit this file.
// Profile Version = 21.158.0Release
// Tag = production/release/21.158.0-0-gc9428aa
/////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Text;
using System.IO;
using System.Linq;

namespace Dynastream.Fit
{
	/// <summary>
	/// Implements the DiveApneaAlarm profile message.
	/// </summary>
	public class DiveApneaAlarmMesg : Mesg
	{
		#region Fields
		#endregion

		/// <summary>
		/// Field Numbers for <see cref="DiveApneaAlarmMesg"/>
		/// </summary>
		public sealed class FieldDefNum
		{
			public const byte MessageIndex = 254;
			public const byte Depth = 0;
			public const byte Time = 1;
			public const byte Enabled = 2;
			public const byte AlarmType = 3;
			public const byte Sound = 4;
			public const byte DiveTypes = 5;
			public const byte Id = 6;
			public const byte PopupEnabled = 7;
			public const byte TriggerOnDescent = 8;
			public const byte TriggerOnAscent = 9;
			public const byte Repeating = 10;
			public const byte Speed = 11;
			public const byte Invalid = Fit.FieldNumInvalid;
		}

		#region Constructors
		public DiveApneaAlarmMesg() : base(Profile.GetMesg(MesgNum.DiveApneaAlarm))
		{
		}

		public DiveApneaAlarmMesg(Mesg mesg) : base(mesg)
		{
		}
		#endregion // Constructors

		#region Methods
		///<summary>
		/// Retrieves the MessageIndex field
		/// Comment: Index of the alarm</summary>
		/// <returns>Returns nullable ushort representing the MessageIndex field</returns>
		public ushort? MessageIndex
		{
			get
			{
				Object val = GetFieldValue(254, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToUInt16(val));

			}
			set
			{
				SetFieldValue(254, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the Depth field
		/// Units: m
		/// Comment: Depth setting (m) for depth type alarms</summary>
		/// <returns>Returns nullable float representing the Depth field</returns>
		public float? Depth
		{
			get
			{
				Object val = GetFieldValue(0, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToSingle(val));

			}
			set
			{
				SetFieldValue(0, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the Time field
		/// Units: s
		/// Comment: Time setting (s) for time type alarms</summary>
		/// <returns>Returns nullable int representing the Time field</returns>
		public int? Time
		{
			get
			{
				Object val = GetFieldValue(1, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToInt32(val));

			}
			set
			{
				SetFieldValue(1, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the Enabled field
		/// Comment: Enablement flag</summary>
		/// <returns>Returns nullable Bool enum representing the Enabled field</returns>
		public Bool? Enabled
		{
			get
			{
				object obj = GetFieldValue(2, 0, Fit.SubfieldIndexMainField);
				Bool? value = obj == null ? (Bool?)null : (Bool)obj;
				return value;
			}
			set
			{
				SetFieldValue(2, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the AlarmType field
		/// Comment: Alarm type setting</summary>
		/// <returns>Returns nullable DiveAlarmType enum representing the AlarmType field</returns>
		public DiveAlarmType? AlarmType
		{
			get
			{
				object obj = GetFieldValue(3, 0, Fit.SubfieldIndexMainField);
				DiveAlarmType? value = obj == null ? (DiveAlarmType?)null : (DiveAlarmType)obj;
				return value;
			}
			set
			{
				SetFieldValue(3, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the Sound field
		/// Comment: Tone and Vibe setting for the alarm.</summary>
		/// <returns>Returns nullable Tone enum representing the Sound field</returns>
		public Tone? Sound
		{
			get
			{
				object obj = GetFieldValue(4, 0, Fit.SubfieldIndexMainField);
				Tone? value = obj == null ? (Tone?)null : (Tone)obj;
				return value;
			}
			set
			{
				SetFieldValue(4, 0, value, Fit.SubfieldIndexMainField);
			}
		}


		/// <summary>
		///
		/// </summary>
		/// <returns>returns number of elements in field DiveTypes</returns>
		public int GetNumDiveTypes()
		{
			return GetNumFieldValues(5, Fit.SubfieldIndexMainField);
		}

		///<summary>
		/// Retrieves the DiveTypes field
		/// Comment: Dive types the alarm will trigger on</summary>
		/// <param name="index">0 based index of DiveTypes element to retrieve</param>
		/// <returns>Returns nullable SubSport enum representing the DiveTypes field</returns>
		public SubSport? GetDiveTypes(int index)
		{
			object obj = GetFieldValue(5, index, Fit.SubfieldIndexMainField);
			SubSport? value = obj == null ? (SubSport?)null : (SubSport)obj;
			return value;
		}

		/// <summary>
		/// Set DiveTypes field
		/// Comment: Dive types the alarm will trigger on</summary>
		/// <param name="index">0 based index of dive_types</param>
		/// <param name="diveTypes_">Nullable field value to be set</param>
		public void SetDiveTypes(int index, SubSport? diveTypes_)
		{
			SetFieldValue(5, index, diveTypes_, Fit.SubfieldIndexMainField);
		}

		///<summary>
		/// Retrieves the Id field
		/// Comment: Alarm ID</summary>
		/// <returns>Returns nullable uint representing the Id field</returns>
		public uint? Id
		{
			get
			{
				Object val = GetFieldValue(6, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToUInt32(val));

			}
			set
			{
				SetFieldValue(6, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the PopupEnabled field
		/// Comment: Show a visible pop-up for this alarm</summary>
		/// <returns>Returns nullable Bool enum representing the PopupEnabled field</returns>
		public Bool? PopupEnabled
		{
			get
			{
				object obj = GetFieldValue(7, 0, Fit.SubfieldIndexMainField);
				Bool? value = obj == null ? (Bool?)null : (Bool)obj;
				return value;
			}
			set
			{
				SetFieldValue(7, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the TriggerOnDescent field
		/// Comment: Trigger the alarm on descent</summary>
		/// <returns>Returns nullable Bool enum representing the TriggerOnDescent field</returns>
		public Bool? TriggerOnDescent
		{
			get
			{
				object obj = GetFieldValue(8, 0, Fit.SubfieldIndexMainField);
				Bool? value = obj == null ? (Bool?)null : (Bool)obj;
				return value;
			}
			set
			{
				SetFieldValue(8, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the TriggerOnAscent field
		/// Comment: Trigger the alarm on ascent</summary>
		/// <returns>Returns nullable Bool enum representing the TriggerOnAscent field</returns>
		public Bool? TriggerOnAscent
		{
			get
			{
				object obj = GetFieldValue(9, 0, Fit.SubfieldIndexMainField);
				Bool? value = obj == null ? (Bool?)null : (Bool)obj;
				return value;
			}
			set
			{
				SetFieldValue(9, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the Repeating field
		/// Comment: Repeat alarm each time threshold is crossed?</summary>
		/// <returns>Returns nullable Bool enum representing the Repeating field</returns>
		public Bool? Repeating
		{
			get
			{
				object obj = GetFieldValue(10, 0, Fit.SubfieldIndexMainField);
				Bool? value = obj == null ? (Bool?)null : (Bool)obj;
				return value;
			}
			set
			{
				SetFieldValue(10, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the Speed field
		/// Units: mps
		/// Comment: Ascent/descent rate (mps) setting for speed type alarms</summary>
		/// <returns>Returns nullable float representing the Speed field</returns>
		public float? Speed
		{
			get
			{
				Object val = GetFieldValue(11, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToSingle(val));

			}
			set
			{
				SetFieldValue(11, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		#endregion // Methods
	} // Class
} // namespace
