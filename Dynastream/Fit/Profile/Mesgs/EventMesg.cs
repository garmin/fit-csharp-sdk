#region Copyright
/////////////////////////////////////////////////////////////////////////////////////////////
// Copyright 2024 Garmin International, Inc.
// Licensed under the Flexible and Interoperable Data Transfer (FIT) Protocol License; you
// may not use this file except in compliance with the Flexible and Interoperable Data
// Transfer (FIT) Protocol License.
/////////////////////////////////////////////////////////////////////////////////////////////
// ****WARNING****  This file is auto-generated!  Do NOT edit this file.
// Profile Version = 21.158.0Release
// Tag = production/release/21.158.0-0-gc9428aa
/////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Text;
using System.IO;
using System.Linq;

namespace Dynastream.Fit
{
	/// <summary>
	/// Implements the Event profile message.
	/// </summary>
	public class EventMesg : Mesg
	{
		#region Fields
		static class DataSubfield
		{
			public static ushort TimerTrigger = 0;
			public static ushort CoursePointIndex = 1;
			public static ushort BatteryLevel = 2;
			public static ushort VirtualPartnerSpeed = 3;
			public static ushort HrHighAlert = 4;
			public static ushort HrLowAlert = 5;
			public static ushort SpeedHighAlert = 6;
			public static ushort SpeedLowAlert = 7;
			public static ushort CadHighAlert = 8;
			public static ushort CadLowAlert = 9;
			public static ushort PowerHighAlert = 10;
			public static ushort PowerLowAlert = 11;
			public static ushort TimeDurationAlert = 12;
			public static ushort DistanceDurationAlert = 13;
			public static ushort CalorieDurationAlert = 14;
			public static ushort FitnessEquipmentState = 15;
			public static ushort SportPoint = 16;
			public static ushort GearChangeData = 17;
			public static ushort RiderPosition = 18;
			public static ushort CommTimeout = 19;
			public static ushort DiveAlert = 20;
			public static ushort AutoActivityDetectDuration = 21;
			public static ushort RadarThreatAlert = 22;
			public static ushort Subfields = 23;
			public static ushort Active = Fit.SubfieldIndexActiveSubfield;
			public static ushort MainField = Fit.SubfieldIndexMainField;
		}
		static class StartTimestampSubfield
		{
			public static ushort AutoActivityDetectStartTimestamp = 0;
			public static ushort Subfields = 1;
			public static ushort Active = Fit.SubfieldIndexActiveSubfield;
			public static ushort MainField = Fit.SubfieldIndexMainField;
		}
		#endregion

		/// <summary>
		/// Field Numbers for <see cref="EventMesg"/>
		/// </summary>
		public sealed class FieldDefNum
		{
			public const byte Timestamp = 253;
			public const byte Event = 0;
			public const byte EventType = 1;
			public const byte Data16 = 2;
			public const byte Data = 3;
			public const byte EventGroup = 4;
			public const byte Score = 7;
			public const byte OpponentScore = 8;
			public const byte FrontGearNum = 9;
			public const byte FrontGear = 10;
			public const byte RearGearNum = 11;
			public const byte RearGear = 12;
			public const byte DeviceIndex = 13;
			public const byte ActivityType = 14;
			public const byte StartTimestamp = 15;
			public const byte RadarThreatLevelMax = 21;
			public const byte RadarThreatCount = 22;
			public const byte RadarThreatAvgApproachSpeed = 23;
			public const byte RadarThreatMaxApproachSpeed = 24;
			public const byte Invalid = Fit.FieldNumInvalid;
		}

		#region Constructors
		public EventMesg() : base(Profile.GetMesg(MesgNum.Event))
		{
		}

		public EventMesg(Mesg mesg) : base(mesg)
		{
		}
		#endregion // Constructors

		#region Methods
		///<summary>
		/// Retrieves the Timestamp field
		/// Units: s</summary>
		/// <returns>Returns DateTime representing the Timestamp field</returns>
		public DateTime Timestamp
		{
			get
			{
				Object val = GetFieldValue(253, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return TimestampToDateTime(Convert.ToUInt32(val));

			}
			set
			{
				SetFieldValue(253, 0, value.GetTimeStamp(), Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the Event field</summary>
		/// <returns>Returns nullable Event enum representing the Event field</returns>
		public Event? Event
		{
			get
			{
				object obj = GetFieldValue(0, 0, Fit.SubfieldIndexMainField);
				Event? value = obj == null ? (Event?)null : (Event)obj;
				return value;
			}
			set
			{
				SetFieldValue(0, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the EventType field</summary>
		/// <returns>Returns nullable EventType enum representing the EventType field</returns>
		public EventType? EventType
		{
			get
			{
				object obj = GetFieldValue(1, 0, Fit.SubfieldIndexMainField);
				EventType? value = obj == null ? (EventType?)null : (EventType)obj;
				return value;
			}
			set
			{
				SetFieldValue(1, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the Data16 field</summary>
		/// <returns>Returns nullable ushort representing the Data16 field</returns>
		public ushort? Data16
		{
			get
			{
				Object val = GetFieldValue(2, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToUInt16(val));

			}
			set
			{
				SetFieldValue(2, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the Data field</summary>
		/// <returns>Returns nullable uint representing the Data field</returns>
		public uint? Data
		{
			get
			{
				Object val = GetFieldValue(3, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToUInt32(val));

			}
			set
			{
				SetFieldValue(3, 0, value, Fit.SubfieldIndexMainField);
			}
		}


		/// <summary>
		/// Retrieves the TimerTrigger subfield</summary>
		/// <returns>Nullable TimerTrigger enum representing the TimerTrigger subfield</returns>
		public TimerTrigger? GetTimerTrigger()
		{
			return (TimerTrigger?)GetFieldValue(3, 0, DataSubfield.TimerTrigger);
		}

		/// <summary>
		///
		/// Set TimerTrigger subfield</summary>
		/// <param name="timerTrigger">Subfield value to be set</param>
		public void SetTimerTrigger(byte? timerTrigger)
		{
			SetFieldValue(3, 0, timerTrigger, DataSubfield.TimerTrigger);
		}

		/// <summary>
		/// Retrieves the CoursePointIndex subfield</summary>
		/// <returns>Nullable ushort representing the CoursePointIndex subfield</returns>
		public ushort? CoursePointIndex
		{
			get
			{
				Object val = GetFieldValue(3, 0, DataSubfield.CoursePointIndex);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToUInt16(val));

			}
			set
			{
				SetFieldValue(3, 0, value, DataSubfield.CoursePointIndex);
			}
		}

		/// <summary>
		/// Retrieves the BatteryLevel subfield
		/// Units: V</summary>
		/// <returns>Nullable float representing the BatteryLevel subfield</returns>
		public float? BatteryLevel
		{
			get
			{
				Object val = GetFieldValue(3, 0, DataSubfield.BatteryLevel);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToSingle(val));

			}
			set
			{
				SetFieldValue(3, 0, value, DataSubfield.BatteryLevel);
			}
		}

		/// <summary>
		/// Retrieves the VirtualPartnerSpeed subfield
		/// Units: m/s</summary>
		/// <returns>Nullable float representing the VirtualPartnerSpeed subfield</returns>
		public float? VirtualPartnerSpeed
		{
			get
			{
				Object val = GetFieldValue(3, 0, DataSubfield.VirtualPartnerSpeed);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToSingle(val));

			}
			set
			{
				SetFieldValue(3, 0, value, DataSubfield.VirtualPartnerSpeed);
			}
		}

		/// <summary>
		/// Retrieves the HrHighAlert subfield
		/// Units: bpm</summary>
		/// <returns>Nullable byte representing the HrHighAlert subfield</returns>
		public byte? HrHighAlert
		{
			get
			{
				Object val = GetFieldValue(3, 0, DataSubfield.HrHighAlert);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToByte(val));

			}
			set
			{
				SetFieldValue(3, 0, value, DataSubfield.HrHighAlert);
			}
		}

		/// <summary>
		/// Retrieves the HrLowAlert subfield
		/// Units: bpm</summary>
		/// <returns>Nullable byte representing the HrLowAlert subfield</returns>
		public byte? HrLowAlert
		{
			get
			{
				Object val = GetFieldValue(3, 0, DataSubfield.HrLowAlert);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToByte(val));

			}
			set
			{
				SetFieldValue(3, 0, value, DataSubfield.HrLowAlert);
			}
		}

		/// <summary>
		/// Retrieves the SpeedHighAlert subfield
		/// Units: m/s</summary>
		/// <returns>Nullable float representing the SpeedHighAlert subfield</returns>
		public float? SpeedHighAlert
		{
			get
			{
				Object val = GetFieldValue(3, 0, DataSubfield.SpeedHighAlert);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToSingle(val));

			}
			set
			{
				SetFieldValue(3, 0, value, DataSubfield.SpeedHighAlert);
			}
		}

		/// <summary>
		/// Retrieves the SpeedLowAlert subfield
		/// Units: m/s</summary>
		/// <returns>Nullable float representing the SpeedLowAlert subfield</returns>
		public float? SpeedLowAlert
		{
			get
			{
				Object val = GetFieldValue(3, 0, DataSubfield.SpeedLowAlert);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToSingle(val));

			}
			set
			{
				SetFieldValue(3, 0, value, DataSubfield.SpeedLowAlert);
			}
		}

		/// <summary>
		/// Retrieves the CadHighAlert subfield
		/// Units: rpm</summary>
		/// <returns>Nullable ushort representing the CadHighAlert subfield</returns>
		public ushort? CadHighAlert
		{
			get
			{
				Object val = GetFieldValue(3, 0, DataSubfield.CadHighAlert);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToUInt16(val));

			}
			set
			{
				SetFieldValue(3, 0, value, DataSubfield.CadHighAlert);
			}
		}

		/// <summary>
		/// Retrieves the CadLowAlert subfield
		/// Units: rpm</summary>
		/// <returns>Nullable ushort representing the CadLowAlert subfield</returns>
		public ushort? CadLowAlert
		{
			get
			{
				Object val = GetFieldValue(3, 0, DataSubfield.CadLowAlert);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToUInt16(val));

			}
			set
			{
				SetFieldValue(3, 0, value, DataSubfield.CadLowAlert);
			}
		}

		/// <summary>
		/// Retrieves the PowerHighAlert subfield
		/// Units: watts</summary>
		/// <returns>Nullable ushort representing the PowerHighAlert subfield</returns>
		public ushort? PowerHighAlert
		{
			get
			{
				Object val = GetFieldValue(3, 0, DataSubfield.PowerHighAlert);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToUInt16(val));

			}
			set
			{
				SetFieldValue(3, 0, value, DataSubfield.PowerHighAlert);
			}
		}

		/// <summary>
		/// Retrieves the PowerLowAlert subfield
		/// Units: watts</summary>
		/// <returns>Nullable ushort representing the PowerLowAlert subfield</returns>
		public ushort? PowerLowAlert
		{
			get
			{
				Object val = GetFieldValue(3, 0, DataSubfield.PowerLowAlert);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToUInt16(val));

			}
			set
			{
				SetFieldValue(3, 0, value, DataSubfield.PowerLowAlert);
			}
		}

		/// <summary>
		/// Retrieves the TimeDurationAlert subfield
		/// Units: s</summary>
		/// <returns>Nullable float representing the TimeDurationAlert subfield</returns>
		public float? TimeDurationAlert
		{
			get
			{
				Object val = GetFieldValue(3, 0, DataSubfield.TimeDurationAlert);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToSingle(val));

			}
			set
			{
				SetFieldValue(3, 0, value, DataSubfield.TimeDurationAlert);
			}
		}

		/// <summary>
		/// Retrieves the DistanceDurationAlert subfield
		/// Units: m</summary>
		/// <returns>Nullable float representing the DistanceDurationAlert subfield</returns>
		public float? DistanceDurationAlert
		{
			get
			{
				Object val = GetFieldValue(3, 0, DataSubfield.DistanceDurationAlert);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToSingle(val));

			}
			set
			{
				SetFieldValue(3, 0, value, DataSubfield.DistanceDurationAlert);
			}
		}

		/// <summary>
		/// Retrieves the CalorieDurationAlert subfield
		/// Units: calories</summary>
		/// <returns>Nullable uint representing the CalorieDurationAlert subfield</returns>
		public uint? CalorieDurationAlert
		{
			get
			{
				Object val = GetFieldValue(3, 0, DataSubfield.CalorieDurationAlert);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToUInt32(val));

			}
			set
			{
				SetFieldValue(3, 0, value, DataSubfield.CalorieDurationAlert);
			}
		}

		/// <summary>
		/// Retrieves the FitnessEquipmentState subfield</summary>
		/// <returns>Nullable FitnessEquipmentState enum representing the FitnessEquipmentState subfield</returns>
		public FitnessEquipmentState? GetFitnessEquipmentState()
		{
			return (FitnessEquipmentState?)GetFieldValue(3, 0, DataSubfield.FitnessEquipmentState);
		}

		/// <summary>
		///
		/// Set FitnessEquipmentState subfield</summary>
		/// <param name="fitnessEquipmentState">Subfield value to be set</param>
		public void SetFitnessEquipmentState(byte? fitnessEquipmentState)
		{
			SetFieldValue(3, 0, fitnessEquipmentState, DataSubfield.FitnessEquipmentState);
		}

		/// <summary>
		/// Retrieves the SportPoint subfield</summary>
		/// <returns>Nullable uint representing the SportPoint subfield</returns>
		public uint? SportPoint
		{
			get
			{
				Object val = GetFieldValue(3, 0, DataSubfield.SportPoint);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToUInt32(val));

			}
			set
			{
				SetFieldValue(3, 0, value, DataSubfield.SportPoint);
			}
		}

		/// <summary>
		/// Retrieves the GearChangeData subfield</summary>
		/// <returns>Nullable uint representing the GearChangeData subfield</returns>
		public uint? GearChangeData
		{
			get
			{
				Object val = GetFieldValue(3, 0, DataSubfield.GearChangeData);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToUInt32(val));

			}
			set
			{
				SetFieldValue(3, 0, value, DataSubfield.GearChangeData);
			}
		}

		/// <summary>
		/// Retrieves the RiderPosition subfield
		/// Comment: Indicates the rider position value.</summary>
		/// <returns>Nullable RiderPositionType enum representing the RiderPosition subfield</returns>
		public RiderPositionType? GetRiderPosition()
		{
			return (RiderPositionType?)GetFieldValue(3, 0, DataSubfield.RiderPosition);
		}

		/// <summary>
		///
		/// Set RiderPosition subfield
		/// Comment: Indicates the rider position value.</summary>
		/// <param name="riderPosition">Subfield value to be set</param>
		public void SetRiderPosition(byte? riderPosition)
		{
			SetFieldValue(3, 0, riderPosition, DataSubfield.RiderPosition);
		}

		/// <summary>
		/// Retrieves the CommTimeout subfield</summary>
		/// <returns>Nullable ushort representing the CommTimeout subfield</returns>
		public ushort? CommTimeout
		{
			get
			{
				Object val = GetFieldValue(3, 0, DataSubfield.CommTimeout);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToUInt16(val));

			}
			set
			{
				SetFieldValue(3, 0, value, DataSubfield.CommTimeout);
			}
		}

		/// <summary>
		/// Retrieves the DiveAlert subfield</summary>
		/// <returns>Nullable DiveAlert enum representing the DiveAlert subfield</returns>
		public DiveAlert? GetDiveAlert()
		{
			return (DiveAlert?)GetFieldValue(3, 0, DataSubfield.DiveAlert);
		}

		/// <summary>
		///
		/// Set DiveAlert subfield</summary>
		/// <param name="diveAlert">Subfield value to be set</param>
		public void SetDiveAlert(byte? diveAlert)
		{
			SetFieldValue(3, 0, diveAlert, DataSubfield.DiveAlert);
		}

		/// <summary>
		/// Retrieves the AutoActivityDetectDuration subfield
		/// Units: min</summary>
		/// <returns>Nullable ushort representing the AutoActivityDetectDuration subfield</returns>
		public ushort? AutoActivityDetectDuration
		{
			get
			{
				Object val = GetFieldValue(3, 0, DataSubfield.AutoActivityDetectDuration);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToUInt16(val));

			}
			set
			{
				SetFieldValue(3, 0, value, DataSubfield.AutoActivityDetectDuration);
			}
		}

		/// <summary>
		/// Retrieves the RadarThreatAlert subfield
		/// Comment: The first byte is the radar_threat_level_max, the second byte is the radar_threat_count, third bytes is the average approach speed, and the 4th byte is the max approach speed</summary>
		/// <returns>Nullable uint representing the RadarThreatAlert subfield</returns>
		public uint? RadarThreatAlert
		{
			get
			{
				Object val = GetFieldValue(3, 0, DataSubfield.RadarThreatAlert);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToUInt32(val));

			}
			set
			{
				SetFieldValue(3, 0, value, DataSubfield.RadarThreatAlert);
			}
		}
		///<summary>
		/// Retrieves the EventGroup field</summary>
		/// <returns>Returns nullable byte representing the EventGroup field</returns>
		public byte? EventGroup
		{
			get
			{
				Object val = GetFieldValue(4, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToByte(val));

			}
			set
			{
				SetFieldValue(4, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the Score field
		/// Comment: Do not populate directly. Autogenerated by decoder for sport_point subfield components</summary>
		/// <returns>Returns nullable ushort representing the Score field</returns>
		public ushort? Score
		{
			get
			{
				Object val = GetFieldValue(7, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToUInt16(val));

			}
			set
			{
				SetFieldValue(7, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the OpponentScore field
		/// Comment: Do not populate directly. Autogenerated by decoder for sport_point subfield components</summary>
		/// <returns>Returns nullable ushort representing the OpponentScore field</returns>
		public ushort? OpponentScore
		{
			get
			{
				Object val = GetFieldValue(8, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToUInt16(val));

			}
			set
			{
				SetFieldValue(8, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the FrontGearNum field
		/// Comment: Do not populate directly. Autogenerated by decoder for gear_change subfield components. Front gear number. 1 is innermost.</summary>
		/// <returns>Returns nullable byte representing the FrontGearNum field</returns>
		public byte? FrontGearNum
		{
			get
			{
				Object val = GetFieldValue(9, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToByte(val));

			}
			set
			{
				SetFieldValue(9, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the FrontGear field
		/// Comment: Do not populate directly. Autogenerated by decoder for gear_change subfield components. Number of front teeth.</summary>
		/// <returns>Returns nullable byte representing the FrontGear field</returns>
		public byte? FrontGear
		{
			get
			{
				Object val = GetFieldValue(10, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToByte(val));

			}
			set
			{
				SetFieldValue(10, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the RearGearNum field
		/// Comment: Do not populate directly. Autogenerated by decoder for gear_change subfield components. Rear gear number. 1 is innermost.</summary>
		/// <returns>Returns nullable byte representing the RearGearNum field</returns>
		public byte? RearGearNum
		{
			get
			{
				Object val = GetFieldValue(11, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToByte(val));

			}
			set
			{
				SetFieldValue(11, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the RearGear field
		/// Comment: Do not populate directly. Autogenerated by decoder for gear_change subfield components. Number of rear teeth.</summary>
		/// <returns>Returns nullable byte representing the RearGear field</returns>
		public byte? RearGear
		{
			get
			{
				Object val = GetFieldValue(12, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToByte(val));

			}
			set
			{
				SetFieldValue(12, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the DeviceIndex field</summary>
		/// <returns>Returns nullable byte representing the DeviceIndex field</returns>
		public byte? DeviceIndex
		{
			get
			{
				Object val = GetFieldValue(13, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToByte(val));

			}
			set
			{
				SetFieldValue(13, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the ActivityType field
		/// Comment: Activity Type associated with an auto_activity_detect event</summary>
		/// <returns>Returns nullable ActivityType enum representing the ActivityType field</returns>
		public ActivityType? ActivityType
		{
			get
			{
				object obj = GetFieldValue(14, 0, Fit.SubfieldIndexMainField);
				ActivityType? value = obj == null ? (ActivityType?)null : (ActivityType)obj;
				return value;
			}
			set
			{
				SetFieldValue(14, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the StartTimestamp field
		/// Units: s
		/// Comment: Timestamp of when the event started</summary>
		/// <returns>Returns DateTime representing the StartTimestamp field</returns>
		public DateTime StartTimestamp
		{
			get
			{
				Object val = GetFieldValue(15, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return TimestampToDateTime(Convert.ToUInt32(val));

			}
			set
			{
				SetFieldValue(15, 0, value.GetTimeStamp(), Fit.SubfieldIndexMainField);
			}
		}


		/// <summary>
		/// Retrieves the AutoActivityDetectStartTimestamp subfield
		/// Units: s
		/// Comment: Auto Activity Detect Start Timestamp.</summary>
		/// <returns>Nullable uint representing the AutoActivityDetectStartTimestamp subfield</returns>
		public DateTime AutoActivityDetectStartTimestamp
		{
			get
			{
				Object val = GetFieldValue(15, 0, StartTimestampSubfield.AutoActivityDetectStartTimestamp);
				if (val == null)
				{
					return null;
				}

				return TimestampToDateTime(Convert.ToUInt32(val));

			}
			set
			{
				SetFieldValue(15, 0, value.GetTimeStamp(), StartTimestampSubfield.AutoActivityDetectStartTimestamp);
			}
		}
		///<summary>
		/// Retrieves the RadarThreatLevelMax field
		/// Comment: Do not populate directly. Autogenerated by decoder for threat_alert subfield components.</summary>
		/// <returns>Returns nullable RadarThreatLevelType enum representing the RadarThreatLevelMax field</returns>
		public RadarThreatLevelType? RadarThreatLevelMax
		{
			get
			{
				object obj = GetFieldValue(21, 0, Fit.SubfieldIndexMainField);
				RadarThreatLevelType? value = obj == null ? (RadarThreatLevelType?)null : (RadarThreatLevelType)obj;
				return value;
			}
			set
			{
				SetFieldValue(21, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the RadarThreatCount field
		/// Comment: Do not populate directly. Autogenerated by decoder for threat_alert subfield components.</summary>
		/// <returns>Returns nullable byte representing the RadarThreatCount field</returns>
		public byte? RadarThreatCount
		{
			get
			{
				Object val = GetFieldValue(22, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToByte(val));

			}
			set
			{
				SetFieldValue(22, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the RadarThreatAvgApproachSpeed field
		/// Units: m/s
		/// Comment: Do not populate directly. Autogenerated by decoder for radar_threat_alert subfield components</summary>
		/// <returns>Returns nullable float representing the RadarThreatAvgApproachSpeed field</returns>
		public float? RadarThreatAvgApproachSpeed
		{
			get
			{
				Object val = GetFieldValue(23, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToSingle(val));

			}
			set
			{
				SetFieldValue(23, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the RadarThreatMaxApproachSpeed field
		/// Units: m/s
		/// Comment: Do not populate directly. Autogenerated by decoder for radar_threat_alert subfield components</summary>
		/// <returns>Returns nullable float representing the RadarThreatMaxApproachSpeed field</returns>
		public float? RadarThreatMaxApproachSpeed
		{
			get
			{
				Object val = GetFieldValue(24, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToSingle(val));

			}
			set
			{
				SetFieldValue(24, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		#endregion // Methods
	} // Class
} // namespace
