#region Copyright
/////////////////////////////////////////////////////////////////////////////////////////////
// Copyright 2024 Garmin International, Inc.
// Licensed under the Flexible and Interoperable Data Transfer (FIT) Protocol License; you
// may not use this file except in compliance with the Flexible and Interoperable Data
// Transfer (FIT) Protocol License.
/////////////////////////////////////////////////////////////////////////////////////////////
// ****WARNING****  This file is auto-generated!  Do NOT edit this file.
// Profile Version = 21.158.0Release
// Tag = production/release/21.158.0-0-gc9428aa
/////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Text;
using System.IO;
using System.Linq;

namespace Dynastream.Fit
{
	/// <summary>
	/// Implements the SegmentId profile message.
	/// </summary>
	public class SegmentIdMesg : Mesg
	{
		#region Fields
		#endregion

		/// <summary>
		/// Field Numbers for <see cref="SegmentIdMesg"/>
		/// </summary>
		public sealed class FieldDefNum
		{
			public const byte Name = 0;
			public const byte Uuid = 1;
			public const byte Sport = 2;
			public const byte Enabled = 3;
			public const byte UserProfilePrimaryKey = 4;
			public const byte DeviceId = 5;
			public const byte DefaultRaceLeader = 6;
			public const byte DeleteStatus = 7;
			public const byte SelectionType = 8;
			public const byte Invalid = Fit.FieldNumInvalid;
		}

		#region Constructors
		public SegmentIdMesg() : base(Profile.GetMesg(MesgNum.SegmentId))
		{
		}

		public SegmentIdMesg(Mesg mesg) : base(mesg)
		{
		}
		#endregion // Constructors

		#region Methods
		///<summary>
		/// Retrieves the Name field
		/// Comment: Friendly name assigned to segment</summary>
		/// <returns>Returns byte[] representing the Name field</returns>
		public byte[] Name
		{
			get
			{
				byte[] data = (byte[])GetFieldValue(0, 0, Fit.SubfieldIndexMainField);
				return data.Take(data.Length - 1).ToArray();
			}
			set
			{
				SetFieldValue(0, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the Name field
		/// Comment: Friendly name assigned to segment</summary>
		/// <returns>Returns String representing the Name field</returns>
		public String GetNameAsString()
		{
			byte[] data = (byte[])GetFieldValue(0, 0, Fit.SubfieldIndexMainField);
			return data != null ? Encoding.UTF8.GetString(data, 0, data.Length - 1) : null;
		}

		///<summary>
		/// Set Name field
		/// Comment: Friendly name assigned to segment</summary>
		/// <param name="name_"> field value to be set</param>
		public void SetName(String name_)
		{
			byte[] data = Encoding.UTF8.GetBytes(name_);
			byte[] zdata = new byte[data.Length + 1];
			data.CopyTo(zdata, 0);
			SetFieldValue(0, 0, zdata, Fit.SubfieldIndexMainField);
		}

		///<summary>
		/// Retrieves the Uuid field
		/// Comment: UUID of the segment</summary>
		/// <returns>Returns byte[] representing the Uuid field</returns>
		public byte[] Uuid
		{
			get
			{
				byte[] data = (byte[])GetFieldValue(1, 0, Fit.SubfieldIndexMainField);
				return data.Take(data.Length - 1).ToArray();
			}
			set
			{
				SetFieldValue(1, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the Uuid field
		/// Comment: UUID of the segment</summary>
		/// <returns>Returns String representing the Uuid field</returns>
		public String GetUuidAsString()
		{
			byte[] data = (byte[])GetFieldValue(1, 0, Fit.SubfieldIndexMainField);
			return data != null ? Encoding.UTF8.GetString(data, 0, data.Length - 1) : null;
		}

		///<summary>
		/// Set Uuid field
		/// Comment: UUID of the segment</summary>
		/// <param name="uuid_"> field value to be set</param>
		public void SetUuid(String uuid_)
		{
			byte[] data = Encoding.UTF8.GetBytes(uuid_);
			byte[] zdata = new byte[data.Length + 1];
			data.CopyTo(zdata, 0);
			SetFieldValue(1, 0, zdata, Fit.SubfieldIndexMainField);
		}

		///<summary>
		/// Retrieves the Sport field
		/// Comment: Sport associated with the segment</summary>
		/// <returns>Returns nullable Sport enum representing the Sport field</returns>
		public Sport? Sport
		{
			get
			{
				object obj = GetFieldValue(2, 0, Fit.SubfieldIndexMainField);
				Sport? value = obj == null ? (Sport?)null : (Sport)obj;
				return value;
			}
			set
			{
				SetFieldValue(2, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the Enabled field
		/// Comment: Segment enabled for evaluation</summary>
		/// <returns>Returns nullable Bool enum representing the Enabled field</returns>
		public Bool? Enabled
		{
			get
			{
				object obj = GetFieldValue(3, 0, Fit.SubfieldIndexMainField);
				Bool? value = obj == null ? (Bool?)null : (Bool)obj;
				return value;
			}
			set
			{
				SetFieldValue(3, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the UserProfilePrimaryKey field
		/// Comment: Primary key of the user that created the segment</summary>
		/// <returns>Returns nullable uint representing the UserProfilePrimaryKey field</returns>
		public uint? UserProfilePrimaryKey
		{
			get
			{
				Object val = GetFieldValue(4, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToUInt32(val));

			}
			set
			{
				SetFieldValue(4, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the DeviceId field
		/// Comment: ID of the device that created the segment</summary>
		/// <returns>Returns nullable uint representing the DeviceId field</returns>
		public uint? DeviceId
		{
			get
			{
				Object val = GetFieldValue(5, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToUInt32(val));

			}
			set
			{
				SetFieldValue(5, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the DefaultRaceLeader field
		/// Comment: Index for the Leader Board entry selected as the default race participant</summary>
		/// <returns>Returns nullable byte representing the DefaultRaceLeader field</returns>
		public byte? DefaultRaceLeader
		{
			get
			{
				Object val = GetFieldValue(6, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToByte(val));

			}
			set
			{
				SetFieldValue(6, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the DeleteStatus field
		/// Comment: Indicates if any segments should be deleted</summary>
		/// <returns>Returns nullable SegmentDeleteStatus enum representing the DeleteStatus field</returns>
		public SegmentDeleteStatus? DeleteStatus
		{
			get
			{
				object obj = GetFieldValue(7, 0, Fit.SubfieldIndexMainField);
				SegmentDeleteStatus? value = obj == null ? (SegmentDeleteStatus?)null : (SegmentDeleteStatus)obj;
				return value;
			}
			set
			{
				SetFieldValue(7, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the SelectionType field
		/// Comment: Indicates how the segment was selected to be sent to the device</summary>
		/// <returns>Returns nullable SegmentSelectionType enum representing the SelectionType field</returns>
		public SegmentSelectionType? SelectionType
		{
			get
			{
				object obj = GetFieldValue(8, 0, Fit.SubfieldIndexMainField);
				SegmentSelectionType? value = obj == null ? (SegmentSelectionType?)null : (SegmentSelectionType)obj;
				return value;
			}
			set
			{
				SetFieldValue(8, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		#endregion // Methods
	} // Class
} // namespace
