#region Copyright
/////////////////////////////////////////////////////////////////////////////////////////////
// Copyright 2024 Garmin International, Inc.
// Licensed under the Flexible and Interoperable Data Transfer (FIT) Protocol License; you
// may not use this file except in compliance with the Flexible and Interoperable Data
// Transfer (FIT) Protocol License.
/////////////////////////////////////////////////////////////////////////////////////////////
// ****WARNING****  This file is auto-generated!  Do NOT edit this file.
// Profile Version = 21.158.0Release
// Tag = production/release/21.158.0-0-gc9428aa
/////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Text;
using System.IO;
using System.Linq;

namespace Dynastream.Fit
{
	/// <summary>
	/// Implements the HsaHeartRateData profile message.
	/// </summary>
	public class HsaHeartRateDataMesg : Mesg
	{
		#region Fields
		#endregion

		/// <summary>
		/// Field Numbers for <see cref="HsaHeartRateDataMesg"/>
		/// </summary>
		public sealed class FieldDefNum
		{
			public const byte Timestamp = 253;
			public const byte ProcessingInterval = 0;
			public const byte Status = 1;
			public const byte HeartRate = 2;
			public const byte Invalid = Fit.FieldNumInvalid;
		}

		#region Constructors
		public HsaHeartRateDataMesg() : base(Profile.GetMesg(MesgNum.HsaHeartRateData))
		{
		}

		public HsaHeartRateDataMesg(Mesg mesg) : base(mesg)
		{
		}
		#endregion // Constructors

		#region Methods
		///<summary>
		/// Retrieves the Timestamp field
		/// Units: s</summary>
		/// <returns>Returns DateTime representing the Timestamp field</returns>
		public DateTime Timestamp
		{
			get
			{
				Object val = GetFieldValue(253, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return TimestampToDateTime(Convert.ToUInt32(val));

			}
			set
			{
				SetFieldValue(253, 0, value.GetTimeStamp(), Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the ProcessingInterval field
		/// Units: s
		/// Comment: Processing interval length in seconds</summary>
		/// <returns>Returns nullable ushort representing the ProcessingInterval field</returns>
		public ushort? ProcessingInterval
		{
			get
			{
				Object val = GetFieldValue(0, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToUInt16(val));

			}
			set
			{
				SetFieldValue(0, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the Status field
		/// Comment: Status of measurements in buffer - 0 indicates SEARCHING 1 indicates LOCKED</summary>
		/// <returns>Returns nullable byte representing the Status field</returns>
		public byte? Status
		{
			get
			{
				Object val = GetFieldValue(1, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToByte(val));

			}
			set
			{
				SetFieldValue(1, 0, value, Fit.SubfieldIndexMainField);
			}
		}


		/// <summary>
		///
		/// </summary>
		/// <returns>returns number of elements in field HeartRate</returns>
		public int GetNumHeartRate()
		{
			return GetNumFieldValues(2, Fit.SubfieldIndexMainField);
		}

		///<summary>
		/// Retrieves the HeartRate field
		/// Units: bpm
		/// Comment: Beats / min. Blank: 0</summary>
		/// <param name="index">0 based index of HeartRate element to retrieve</param>
		/// <returns>Returns nullable byte representing the HeartRate field</returns>
		public byte? GetHeartRate(int index)
		{
			Object val = GetFieldValue(2, index, Fit.SubfieldIndexMainField);
			if (val == null)
			{
				return null;
			}

			return (Convert.ToByte(val));

		}

		/// <summary>
		/// Set HeartRate field
		/// Units: bpm
		/// Comment: Beats / min. Blank: 0</summary>
		/// <param name="index">0 based index of heart_rate</param>
		/// <param name="heartRate_">Nullable field value to be set</param>
		public void SetHeartRate(int index, byte? heartRate_)
		{
			SetFieldValue(2, index, heartRate_, Fit.SubfieldIndexMainField);
		}

		#endregion // Methods
	} // Class
} // namespace
