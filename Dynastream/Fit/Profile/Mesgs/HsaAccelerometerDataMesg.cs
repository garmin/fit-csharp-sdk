#region Copyright
/////////////////////////////////////////////////////////////////////////////////////////////
// Copyright 2024 Garmin International, Inc.
// Licensed under the Flexible and Interoperable Data Transfer (FIT) Protocol License; you
// may not use this file except in compliance with the Flexible and Interoperable Data
// Transfer (FIT) Protocol License.
/////////////////////////////////////////////////////////////////////////////////////////////
// ****WARNING****  This file is auto-generated!  Do NOT edit this file.
// Profile Version = 21.141.0Release
// Tag = production/release/21.141.0-0-g2aa27e1
/////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Text;
using System.IO;
using System.Linq;

namespace Dynastream.Fit
{
    /// <summary>
    /// Implements the HsaAccelerometerData profile message.
    /// </summary>
    public class HsaAccelerometerDataMesg : Mesg
    {
        #region Fields
        #endregion

        /// <summary>
        /// Field Numbers for <see cref="HsaAccelerometerDataMesg"/>
        /// </summary>
        public sealed class FieldDefNum
        {
            public const byte Timestamp = 253;
            public const byte TimestampMs = 0;
            public const byte SamplingInterval = 1;
            public const byte AccelX = 2;
            public const byte AccelY = 3;
            public const byte AccelZ = 4;
            public const byte Timestamp32k = 5;
            public const byte Invalid = Fit.FieldNumInvalid;
        }

        #region Constructors
        public HsaAccelerometerDataMesg() : base(Profile.GetMesg(MesgNum.HsaAccelerometerData))
        {
        }

        public HsaAccelerometerDataMesg(Mesg mesg) : base(mesg)
        {
        }
        #endregion // Constructors

        #region Methods
        ///<summary>
        /// Retrieves the Timestamp field
        /// Units: s</summary>
        /// <returns>Returns DateTime representing the Timestamp field</returns>
        public DateTime GetTimestamp()
        {
            Object val = GetFieldValue(253, 0, Fit.SubfieldIndexMainField);
            if(val == null)
            {
                return null;
            }

            return TimestampToDateTime(Convert.ToUInt32(val));
            
        }

        /// <summary>
        /// Set Timestamp field
        /// Units: s</summary>
        /// <param name="timestamp_">Nullable field value to be set</param>
        public void SetTimestamp(DateTime timestamp_)
        {
            SetFieldValue(253, 0, timestamp_.GetTimeStamp(), Fit.SubfieldIndexMainField);
        }
        
        ///<summary>
        /// Retrieves the TimestampMs field
        /// Units: ms
        /// Comment: Millisecond resolution of the timestamp</summary>
        /// <returns>Returns nullable ushort representing the TimestampMs field</returns>
        public ushort? GetTimestampMs()
        {
            Object val = GetFieldValue(0, 0, Fit.SubfieldIndexMainField);
            if(val == null)
            {
                return null;
            }

            return (Convert.ToUInt16(val));
            
        }

        /// <summary>
        /// Set TimestampMs field
        /// Units: ms
        /// Comment: Millisecond resolution of the timestamp</summary>
        /// <param name="timestampMs_">Nullable field value to be set</param>
        public void SetTimestampMs(ushort? timestampMs_)
        {
            SetFieldValue(0, 0, timestampMs_, Fit.SubfieldIndexMainField);
        }
        
        ///<summary>
        /// Retrieves the SamplingInterval field
        /// Units: ms
        /// Comment: Sampling Interval in Milliseconds</summary>
        /// <returns>Returns nullable ushort representing the SamplingInterval field</returns>
        public ushort? GetSamplingInterval()
        {
            Object val = GetFieldValue(1, 0, Fit.SubfieldIndexMainField);
            if(val == null)
            {
                return null;
            }

            return (Convert.ToUInt16(val));
            
        }

        /// <summary>
        /// Set SamplingInterval field
        /// Units: ms
        /// Comment: Sampling Interval in Milliseconds</summary>
        /// <param name="samplingInterval_">Nullable field value to be set</param>
        public void SetSamplingInterval(ushort? samplingInterval_)
        {
            SetFieldValue(1, 0, samplingInterval_, Fit.SubfieldIndexMainField);
        }
        
        
        /// <summary>
        ///
        /// </summary>
        /// <returns>returns number of elements in field AccelX</returns>
        public int GetNumAccelX()
        {
            return GetNumFieldValues(2, Fit.SubfieldIndexMainField);
        }

        ///<summary>
        /// Retrieves the AccelX field
        /// Units: mG
        /// Comment: X-Axis Measurement</summary>
        /// <param name="index">0 based index of AccelX element to retrieve</param>
        /// <returns>Returns nullable float representing the AccelX field</returns>
        public float? GetAccelX(int index)
        {
            Object val = GetFieldValue(2, index, Fit.SubfieldIndexMainField);
            if(val == null)
            {
                return null;
            }

            return (Convert.ToSingle(val));
            
        }

        /// <summary>
        /// Set AccelX field
        /// Units: mG
        /// Comment: X-Axis Measurement</summary>
        /// <param name="index">0 based index of accel_x</param>
        /// <param name="accelX_">Nullable field value to be set</param>
        public void SetAccelX(int index, float? accelX_)
        {
            SetFieldValue(2, index, accelX_, Fit.SubfieldIndexMainField);
        }
        
        
        /// <summary>
        ///
        /// </summary>
        /// <returns>returns number of elements in field AccelY</returns>
        public int GetNumAccelY()
        {
            return GetNumFieldValues(3, Fit.SubfieldIndexMainField);
        }

        ///<summary>
        /// Retrieves the AccelY field
        /// Units: mG
        /// Comment: Y-Axis Measurement</summary>
        /// <param name="index">0 based index of AccelY element to retrieve</param>
        /// <returns>Returns nullable float representing the AccelY field</returns>
        public float? GetAccelY(int index)
        {
            Object val = GetFieldValue(3, index, Fit.SubfieldIndexMainField);
            if(val == null)
            {
                return null;
            }

            return (Convert.ToSingle(val));
            
        }

        /// <summary>
        /// Set AccelY field
        /// Units: mG
        /// Comment: Y-Axis Measurement</summary>
        /// <param name="index">0 based index of accel_y</param>
        /// <param name="accelY_">Nullable field value to be set</param>
        public void SetAccelY(int index, float? accelY_)
        {
            SetFieldValue(3, index, accelY_, Fit.SubfieldIndexMainField);
        }
        
        
        /// <summary>
        ///
        /// </summary>
        /// <returns>returns number of elements in field AccelZ</returns>
        public int GetNumAccelZ()
        {
            return GetNumFieldValues(4, Fit.SubfieldIndexMainField);
        }

        ///<summary>
        /// Retrieves the AccelZ field
        /// Units: mG
        /// Comment: Z-Axis Measurement</summary>
        /// <param name="index">0 based index of AccelZ element to retrieve</param>
        /// <returns>Returns nullable float representing the AccelZ field</returns>
        public float? GetAccelZ(int index)
        {
            Object val = GetFieldValue(4, index, Fit.SubfieldIndexMainField);
            if(val == null)
            {
                return null;
            }

            return (Convert.ToSingle(val));
            
        }

        /// <summary>
        /// Set AccelZ field
        /// Units: mG
        /// Comment: Z-Axis Measurement</summary>
        /// <param name="index">0 based index of accel_z</param>
        /// <param name="accelZ_">Nullable field value to be set</param>
        public void SetAccelZ(int index, float? accelZ_)
        {
            SetFieldValue(4, index, accelZ_, Fit.SubfieldIndexMainField);
        }
        
        ///<summary>
        /// Retrieves the Timestamp32k field
        /// Comment: 32 kHz timestamp</summary>
        /// <returns>Returns nullable uint representing the Timestamp32k field</returns>
        public uint? GetTimestamp32k()
        {
            Object val = GetFieldValue(5, 0, Fit.SubfieldIndexMainField);
            if(val == null)
            {
                return null;
            }

            return (Convert.ToUInt32(val));
            
        }

        /// <summary>
        /// Set Timestamp32k field
        /// Comment: 32 kHz timestamp</summary>
        /// <param name="timestamp32k_">Nullable field value to be set</param>
        public void SetTimestamp32k(uint? timestamp32k_)
        {
            SetFieldValue(5, 0, timestamp32k_, Fit.SubfieldIndexMainField);
        }
        
        #endregion // Methods
    } // Class
} // namespace
