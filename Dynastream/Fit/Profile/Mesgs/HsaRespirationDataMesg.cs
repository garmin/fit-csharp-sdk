#region Copyright
/////////////////////////////////////////////////////////////////////////////////////////////
// Copyright 2024 Garmin International, Inc.
// Licensed under the Flexible and Interoperable Data Transfer (FIT) Protocol License; you
// may not use this file except in compliance with the Flexible and Interoperable Data
// Transfer (FIT) Protocol License.
/////////////////////////////////////////////////////////////////////////////////////////////
// ****WARNING****  This file is auto-generated!  Do NOT edit this file.
// Profile Version = 21.141.0Release
// Tag = production/release/21.141.0-0-g2aa27e1
/////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Text;
using System.IO;
using System.Linq;

namespace Dynastream.Fit
{
    /// <summary>
    /// Implements the HsaRespirationData profile message.
    /// </summary>
    public class HsaRespirationDataMesg : Mesg
    {
        #region Fields
        #endregion

        /// <summary>
        /// Field Numbers for <see cref="HsaRespirationDataMesg"/>
        /// </summary>
        public sealed class FieldDefNum
        {
            public const byte Timestamp = 253;
            public const byte ProcessingInterval = 0;
            public const byte RespirationRate = 1;
            public const byte Invalid = Fit.FieldNumInvalid;
        }

        #region Constructors
        public HsaRespirationDataMesg() : base(Profile.GetMesg(MesgNum.HsaRespirationData))
        {
        }

        public HsaRespirationDataMesg(Mesg mesg) : base(mesg)
        {
        }
        #endregion // Constructors

        #region Methods
        ///<summary>
        /// Retrieves the Timestamp field
        /// Units: s</summary>
        /// <returns>Returns DateTime representing the Timestamp field</returns>
        public DateTime GetTimestamp()
        {
            Object val = GetFieldValue(253, 0, Fit.SubfieldIndexMainField);
            if(val == null)
            {
                return null;
            }

            return TimestampToDateTime(Convert.ToUInt32(val));
            
        }

        /// <summary>
        /// Set Timestamp field
        /// Units: s</summary>
        /// <param name="timestamp_">Nullable field value to be set</param>
        public void SetTimestamp(DateTime timestamp_)
        {
            SetFieldValue(253, 0, timestamp_.GetTimeStamp(), Fit.SubfieldIndexMainField);
        }
        
        ///<summary>
        /// Retrieves the ProcessingInterval field
        /// Units: s
        /// Comment: Processing interval length in seconds</summary>
        /// <returns>Returns nullable ushort representing the ProcessingInterval field</returns>
        public ushort? GetProcessingInterval()
        {
            Object val = GetFieldValue(0, 0, Fit.SubfieldIndexMainField);
            if(val == null)
            {
                return null;
            }

            return (Convert.ToUInt16(val));
            
        }

        /// <summary>
        /// Set ProcessingInterval field
        /// Units: s
        /// Comment: Processing interval length in seconds</summary>
        /// <param name="processingInterval_">Nullable field value to be set</param>
        public void SetProcessingInterval(ushort? processingInterval_)
        {
            SetFieldValue(0, 0, processingInterval_, Fit.SubfieldIndexMainField);
        }
        
        
        /// <summary>
        ///
        /// </summary>
        /// <returns>returns number of elements in field RespirationRate</returns>
        public int GetNumRespirationRate()
        {
            return GetNumFieldValues(1, Fit.SubfieldIndexMainField);
        }

        ///<summary>
        /// Retrieves the RespirationRate field
        /// Units: breaths/min
        /// Comment: Breaths * 100 /min -300 indicates invalid -200 indicates large motion -100 indicates off wrist</summary>
        /// <param name="index">0 based index of RespirationRate element to retrieve</param>
        /// <returns>Returns nullable float representing the RespirationRate field</returns>
        public float? GetRespirationRate(int index)
        {
            Object val = GetFieldValue(1, index, Fit.SubfieldIndexMainField);
            if(val == null)
            {
                return null;
            }

            return (Convert.ToSingle(val));
            
        }

        /// <summary>
        /// Set RespirationRate field
        /// Units: breaths/min
        /// Comment: Breaths * 100 /min -300 indicates invalid -200 indicates large motion -100 indicates off wrist</summary>
        /// <param name="index">0 based index of respiration_rate</param>
        /// <param name="respirationRate_">Nullable field value to be set</param>
        public void SetRespirationRate(int index, float? respirationRate_)
        {
            SetFieldValue(1, index, respirationRate_, Fit.SubfieldIndexMainField);
        }
        
        #endregion // Methods
    } // Class
} // namespace
