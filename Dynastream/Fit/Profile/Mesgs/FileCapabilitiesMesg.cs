#region Copyright
/////////////////////////////////////////////////////////////////////////////////////////////
// Copyright 2024 Garmin International, Inc.
// Licensed under the Flexible and Interoperable Data Transfer (FIT) Protocol License; you
// may not use this file except in compliance with the Flexible and Interoperable Data
// Transfer (FIT) Protocol License.
/////////////////////////////////////////////////////////////////////////////////////////////
// ****WARNING****  This file is auto-generated!  Do NOT edit this file.
// Profile Version = 21.158.0Release
// Tag = production/release/21.158.0-0-gc9428aa
/////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Text;
using System.IO;
using System.Linq;

namespace Dynastream.Fit
{
	/// <summary>
	/// Implements the FileCapabilities profile message.
	/// </summary>
	public class FileCapabilitiesMesg : Mesg
	{
		#region Fields
		#endregion

		/// <summary>
		/// Field Numbers for <see cref="FileCapabilitiesMesg"/>
		/// </summary>
		public sealed class FieldDefNum
		{
			public const byte MessageIndex = 254;
			public const byte Type = 0;
			public const byte Flags = 1;
			public const byte Directory = 2;
			public const byte MaxCount = 3;
			public const byte MaxSize = 4;
			public const byte Invalid = Fit.FieldNumInvalid;
		}

		#region Constructors
		public FileCapabilitiesMesg() : base(Profile.GetMesg(MesgNum.FileCapabilities))
		{
		}

		public FileCapabilitiesMesg(Mesg mesg) : base(mesg)
		{
		}
		#endregion // Constructors

		#region Methods
		///<summary>
		/// Retrieves the MessageIndex field</summary>
		/// <returns>Returns nullable ushort representing the MessageIndex field</returns>
		public ushort? MessageIndex
		{
			get
			{
				Object val = GetFieldValue(254, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToUInt16(val));

			}
			set
			{
				SetFieldValue(254, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the Type field</summary>
		/// <returns>Returns nullable File enum representing the Type field</returns>
		public File? Type
		{
			get
			{
				object obj = GetFieldValue(0, 0, Fit.SubfieldIndexMainField);
				File? value = obj == null ? (File?)null : (File)obj;
				return value;
			}
			set
			{
				SetFieldValue(0, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the Flags field</summary>
		/// <returns>Returns nullable byte representing the Flags field</returns>
		public byte? Flags
		{
			get
			{
				Object val = GetFieldValue(1, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToByte(val));

			}
			set
			{
				SetFieldValue(1, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the Directory field</summary>
		/// <returns>Returns byte[] representing the Directory field</returns>
		public byte[] Directory
		{
			get
			{
				byte[] data = (byte[])GetFieldValue(2, 0, Fit.SubfieldIndexMainField);
				return data.Take(data.Length - 1).ToArray();
			}
			set
			{
				SetFieldValue(2, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the Directory field</summary>
		/// <returns>Returns String representing the Directory field</returns>
		public String GetDirectoryAsString()
		{
			byte[] data = (byte[])GetFieldValue(2, 0, Fit.SubfieldIndexMainField);
			return data != null ? Encoding.UTF8.GetString(data, 0, data.Length - 1) : null;
		}

		///<summary>
		/// Set Directory field</summary>
		/// <param name="directory_"> field value to be set</param>
		public void SetDirectory(String directory_)
		{
			byte[] data = Encoding.UTF8.GetBytes(directory_);
			byte[] zdata = new byte[data.Length + 1];
			data.CopyTo(zdata, 0);
			SetFieldValue(2, 0, zdata, Fit.SubfieldIndexMainField);
		}

		///<summary>
		/// Retrieves the MaxCount field</summary>
		/// <returns>Returns nullable ushort representing the MaxCount field</returns>
		public ushort? MaxCount
		{
			get
			{
				Object val = GetFieldValue(3, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToUInt16(val));

			}
			set
			{
				SetFieldValue(3, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the MaxSize field
		/// Units: bytes</summary>
		/// <returns>Returns nullable uint representing the MaxSize field</returns>
		public uint? MaxSize
		{
			get
			{
				Object val = GetFieldValue(4, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToUInt32(val));

			}
			set
			{
				SetFieldValue(4, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		#endregion // Methods
	} // Class
} // namespace
