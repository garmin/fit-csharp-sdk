#region Copyright
/////////////////////////////////////////////////////////////////////////////////////////////
// Copyright 2024 Garmin International, Inc.
// Licensed under the Flexible and Interoperable Data Transfer (FIT) Protocol License; you
// may not use this file except in compliance with the Flexible and Interoperable Data
// Transfer (FIT) Protocol License.
/////////////////////////////////////////////////////////////////////////////////////////////
// ****WARNING****  This file is auto-generated!  Do NOT edit this file.
// Profile Version = 21.158.0Release
// Tag = production/release/21.158.0-0-gc9428aa
/////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Text;
using System.IO;
using System.Linq;

namespace Dynastream.Fit
{
	/// <summary>
	/// Implements the DiveSummary profile message.
	/// </summary>
	public class DiveSummaryMesg : Mesg
	{
		#region Fields
		#endregion

		/// <summary>
		/// Field Numbers for <see cref="DiveSummaryMesg"/>
		/// </summary>
		public sealed class FieldDefNum
		{
			public const byte Timestamp = 253;
			public const byte ReferenceMesg = 0;
			public const byte ReferenceIndex = 1;
			public const byte AvgDepth = 2;
			public const byte MaxDepth = 3;
			public const byte SurfaceInterval = 4;
			public const byte StartCns = 5;
			public const byte EndCns = 6;
			public const byte StartN2 = 7;
			public const byte EndN2 = 8;
			public const byte O2Toxicity = 9;
			public const byte DiveNumber = 10;
			public const byte BottomTime = 11;
			public const byte AvgPressureSac = 12;
			public const byte AvgVolumeSac = 13;
			public const byte AvgRmv = 14;
			public const byte DescentTime = 15;
			public const byte AscentTime = 16;
			public const byte AvgAscentRate = 17;
			public const byte AvgDescentRate = 22;
			public const byte MaxAscentRate = 23;
			public const byte MaxDescentRate = 24;
			public const byte HangTime = 25;
			public const byte Invalid = Fit.FieldNumInvalid;
		}

		#region Constructors
		public DiveSummaryMesg() : base(Profile.GetMesg(MesgNum.DiveSummary))
		{
		}

		public DiveSummaryMesg(Mesg mesg) : base(mesg)
		{
		}
		#endregion // Constructors

		#region Methods
		///<summary>
		/// Retrieves the Timestamp field
		/// Units: s</summary>
		/// <returns>Returns DateTime representing the Timestamp field</returns>
		public DateTime Timestamp
		{
			get
			{
				Object val = GetFieldValue(253, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return TimestampToDateTime(Convert.ToUInt32(val));

			}
			set
			{
				SetFieldValue(253, 0, value.GetTimeStamp(), Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the ReferenceMesg field</summary>
		/// <returns>Returns nullable ushort representing the ReferenceMesg field</returns>
		public ushort? ReferenceMesg
		{
			get
			{
				Object val = GetFieldValue(0, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToUInt16(val));

			}
			set
			{
				SetFieldValue(0, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the ReferenceIndex field</summary>
		/// <returns>Returns nullable ushort representing the ReferenceIndex field</returns>
		public ushort? ReferenceIndex
		{
			get
			{
				Object val = GetFieldValue(1, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToUInt16(val));

			}
			set
			{
				SetFieldValue(1, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the AvgDepth field
		/// Units: m
		/// Comment: 0 if above water</summary>
		/// <returns>Returns nullable float representing the AvgDepth field</returns>
		public float? AvgDepth
		{
			get
			{
				Object val = GetFieldValue(2, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToSingle(val));

			}
			set
			{
				SetFieldValue(2, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the MaxDepth field
		/// Units: m
		/// Comment: 0 if above water</summary>
		/// <returns>Returns nullable float representing the MaxDepth field</returns>
		public float? MaxDepth
		{
			get
			{
				Object val = GetFieldValue(3, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToSingle(val));

			}
			set
			{
				SetFieldValue(3, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the SurfaceInterval field
		/// Units: s
		/// Comment: Time since end of last dive</summary>
		/// <returns>Returns nullable uint representing the SurfaceInterval field</returns>
		public uint? SurfaceInterval
		{
			get
			{
				Object val = GetFieldValue(4, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToUInt32(val));

			}
			set
			{
				SetFieldValue(4, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the StartCns field
		/// Units: percent</summary>
		/// <returns>Returns nullable byte representing the StartCns field</returns>
		public byte? StartCns
		{
			get
			{
				Object val = GetFieldValue(5, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToByte(val));

			}
			set
			{
				SetFieldValue(5, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the EndCns field
		/// Units: percent</summary>
		/// <returns>Returns nullable byte representing the EndCns field</returns>
		public byte? EndCns
		{
			get
			{
				Object val = GetFieldValue(6, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToByte(val));

			}
			set
			{
				SetFieldValue(6, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the StartN2 field
		/// Units: percent</summary>
		/// <returns>Returns nullable ushort representing the StartN2 field</returns>
		public ushort? StartN2
		{
			get
			{
				Object val = GetFieldValue(7, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToUInt16(val));

			}
			set
			{
				SetFieldValue(7, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the EndN2 field
		/// Units: percent</summary>
		/// <returns>Returns nullable ushort representing the EndN2 field</returns>
		public ushort? EndN2
		{
			get
			{
				Object val = GetFieldValue(8, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToUInt16(val));

			}
			set
			{
				SetFieldValue(8, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the O2Toxicity field
		/// Units: OTUs</summary>
		/// <returns>Returns nullable ushort representing the O2Toxicity field</returns>
		public ushort? O2Toxicity
		{
			get
			{
				Object val = GetFieldValue(9, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToUInt16(val));

			}
			set
			{
				SetFieldValue(9, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the DiveNumber field</summary>
		/// <returns>Returns nullable uint representing the DiveNumber field</returns>
		public uint? DiveNumber
		{
			get
			{
				Object val = GetFieldValue(10, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToUInt32(val));

			}
			set
			{
				SetFieldValue(10, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the BottomTime field
		/// Units: s</summary>
		/// <returns>Returns nullable float representing the BottomTime field</returns>
		public float? BottomTime
		{
			get
			{
				Object val = GetFieldValue(11, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToSingle(val));

			}
			set
			{
				SetFieldValue(11, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the AvgPressureSac field
		/// Units: bar/min
		/// Comment: Average pressure-based surface air consumption</summary>
		/// <returns>Returns nullable float representing the AvgPressureSac field</returns>
		public float? AvgPressureSac
		{
			get
			{
				Object val = GetFieldValue(12, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToSingle(val));

			}
			set
			{
				SetFieldValue(12, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the AvgVolumeSac field
		/// Units: L/min
		/// Comment: Average volumetric surface air consumption</summary>
		/// <returns>Returns nullable float representing the AvgVolumeSac field</returns>
		public float? AvgVolumeSac
		{
			get
			{
				Object val = GetFieldValue(13, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToSingle(val));

			}
			set
			{
				SetFieldValue(13, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the AvgRmv field
		/// Units: L/min
		/// Comment: Average respiratory minute volume</summary>
		/// <returns>Returns nullable float representing the AvgRmv field</returns>
		public float? AvgRmv
		{
			get
			{
				Object val = GetFieldValue(14, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToSingle(val));

			}
			set
			{
				SetFieldValue(14, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the DescentTime field
		/// Units: s
		/// Comment: Time to reach deepest level stop</summary>
		/// <returns>Returns nullable float representing the DescentTime field</returns>
		public float? DescentTime
		{
			get
			{
				Object val = GetFieldValue(15, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToSingle(val));

			}
			set
			{
				SetFieldValue(15, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the AscentTime field
		/// Units: s
		/// Comment: Time after leaving bottom until reaching surface</summary>
		/// <returns>Returns nullable float representing the AscentTime field</returns>
		public float? AscentTime
		{
			get
			{
				Object val = GetFieldValue(16, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToSingle(val));

			}
			set
			{
				SetFieldValue(16, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the AvgAscentRate field
		/// Units: m/s
		/// Comment: Average ascent rate, not including descents or stops</summary>
		/// <returns>Returns nullable float representing the AvgAscentRate field</returns>
		public float? AvgAscentRate
		{
			get
			{
				Object val = GetFieldValue(17, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToSingle(val));

			}
			set
			{
				SetFieldValue(17, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the AvgDescentRate field
		/// Units: m/s
		/// Comment: Average descent rate, not including ascents or stops</summary>
		/// <returns>Returns nullable float representing the AvgDescentRate field</returns>
		public float? AvgDescentRate
		{
			get
			{
				Object val = GetFieldValue(22, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToSingle(val));

			}
			set
			{
				SetFieldValue(22, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the MaxAscentRate field
		/// Units: m/s
		/// Comment: Maximum ascent rate</summary>
		/// <returns>Returns nullable float representing the MaxAscentRate field</returns>
		public float? MaxAscentRate
		{
			get
			{
				Object val = GetFieldValue(23, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToSingle(val));

			}
			set
			{
				SetFieldValue(23, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the MaxDescentRate field
		/// Units: m/s
		/// Comment: Maximum descent rate</summary>
		/// <returns>Returns nullable float representing the MaxDescentRate field</returns>
		public float? MaxDescentRate
		{
			get
			{
				Object val = GetFieldValue(24, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToSingle(val));

			}
			set
			{
				SetFieldValue(24, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the HangTime field
		/// Units: s
		/// Comment: Time spent neither ascending nor descending</summary>
		/// <returns>Returns nullable float representing the HangTime field</returns>
		public float? HangTime
		{
			get
			{
				Object val = GetFieldValue(25, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToSingle(val));

			}
			set
			{
				SetFieldValue(25, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		#endregion // Methods
	} // Class
} // namespace
