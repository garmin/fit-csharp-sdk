#region Copyright
/////////////////////////////////////////////////////////////////////////////////////////////
// Copyright 2024 Garmin International, Inc.
// Licensed under the Flexible and Interoperable Data Transfer (FIT) Protocol License; you
// may not use this file except in compliance with the Flexible and Interoperable Data
// Transfer (FIT) Protocol License.
/////////////////////////////////////////////////////////////////////////////////////////////
// ****WARNING****  This file is auto-generated!  Do NOT edit this file.
// Profile Version = 21.158.0Release
// Tag = production/release/21.158.0-0-gc9428aa
/////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Text;
using System.IO;
using System.Linq;

namespace Dynastream.Fit
{
	/// <summary>
	/// Implements the Goal profile message.
	/// </summary>
	public class GoalMesg : Mesg
	{
		#region Fields
		#endregion

		/// <summary>
		/// Field Numbers for <see cref="GoalMesg"/>
		/// </summary>
		public sealed class FieldDefNum
		{
			public const byte MessageIndex = 254;
			public const byte Sport = 0;
			public const byte SubSport = 1;
			public const byte StartDate = 2;
			public const byte EndDate = 3;
			public const byte Type = 4;
			public const byte Value = 5;
			public const byte Repeat = 6;
			public const byte TargetValue = 7;
			public const byte Recurrence = 8;
			public const byte RecurrenceValue = 9;
			public const byte Enabled = 10;
			public const byte Source = 11;
			public const byte Invalid = Fit.FieldNumInvalid;
		}

		#region Constructors
		public GoalMesg() : base(Profile.GetMesg(MesgNum.Goal))
		{
		}

		public GoalMesg(Mesg mesg) : base(mesg)
		{
		}
		#endregion // Constructors

		#region Methods
		///<summary>
		/// Retrieves the MessageIndex field</summary>
		/// <returns>Returns nullable ushort representing the MessageIndex field</returns>
		public ushort? MessageIndex
		{
			get
			{
				Object val = GetFieldValue(254, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToUInt16(val));

			}
			set
			{
				SetFieldValue(254, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the Sport field</summary>
		/// <returns>Returns nullable Sport enum representing the Sport field</returns>
		public Sport? Sport
		{
			get
			{
				object obj = GetFieldValue(0, 0, Fit.SubfieldIndexMainField);
				Sport? value = obj == null ? (Sport?)null : (Sport)obj;
				return value;
			}
			set
			{
				SetFieldValue(0, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the SubSport field</summary>
		/// <returns>Returns nullable SubSport enum representing the SubSport field</returns>
		public SubSport? SubSport
		{
			get
			{
				object obj = GetFieldValue(1, 0, Fit.SubfieldIndexMainField);
				SubSport? value = obj == null ? (SubSport?)null : (SubSport)obj;
				return value;
			}
			set
			{
				SetFieldValue(1, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the StartDate field</summary>
		/// <returns>Returns DateTime representing the StartDate field</returns>
		public DateTime StartDate
		{
			get
			{
				Object val = GetFieldValue(2, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return TimestampToDateTime(Convert.ToUInt32(val));

			}
			set
			{
				SetFieldValue(2, 0, value.GetTimeStamp(), Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the EndDate field</summary>
		/// <returns>Returns DateTime representing the EndDate field</returns>
		public DateTime EndDate
		{
			get
			{
				Object val = GetFieldValue(3, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return TimestampToDateTime(Convert.ToUInt32(val));

			}
			set
			{
				SetFieldValue(3, 0, value.GetTimeStamp(), Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the Type field</summary>
		/// <returns>Returns nullable Goal enum representing the Type field</returns>
		public Goal? Type
		{
			get
			{
				object obj = GetFieldValue(4, 0, Fit.SubfieldIndexMainField);
				Goal? value = obj == null ? (Goal?)null : (Goal)obj;
				return value;
			}
			set
			{
				SetFieldValue(4, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the Value field</summary>
		/// <returns>Returns nullable uint representing the Value field</returns>
		public uint? Value
		{
			get
			{
				Object val = GetFieldValue(5, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToUInt32(val));

			}
			set
			{
				SetFieldValue(5, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the Repeat field</summary>
		/// <returns>Returns nullable Bool enum representing the Repeat field</returns>
		public Bool? Repeat
		{
			get
			{
				object obj = GetFieldValue(6, 0, Fit.SubfieldIndexMainField);
				Bool? value = obj == null ? (Bool?)null : (Bool)obj;
				return value;
			}
			set
			{
				SetFieldValue(6, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the TargetValue field</summary>
		/// <returns>Returns nullable uint representing the TargetValue field</returns>
		public uint? TargetValue
		{
			get
			{
				Object val = GetFieldValue(7, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToUInt32(val));

			}
			set
			{
				SetFieldValue(7, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the Recurrence field</summary>
		/// <returns>Returns nullable GoalRecurrence enum representing the Recurrence field</returns>
		public GoalRecurrence? Recurrence
		{
			get
			{
				object obj = GetFieldValue(8, 0, Fit.SubfieldIndexMainField);
				GoalRecurrence? value = obj == null ? (GoalRecurrence?)null : (GoalRecurrence)obj;
				return value;
			}
			set
			{
				SetFieldValue(8, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the RecurrenceValue field</summary>
		/// <returns>Returns nullable ushort representing the RecurrenceValue field</returns>
		public ushort? RecurrenceValue
		{
			get
			{
				Object val = GetFieldValue(9, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToUInt16(val));

			}
			set
			{
				SetFieldValue(9, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the Enabled field</summary>
		/// <returns>Returns nullable Bool enum representing the Enabled field</returns>
		public Bool? Enabled
		{
			get
			{
				object obj = GetFieldValue(10, 0, Fit.SubfieldIndexMainField);
				Bool? value = obj == null ? (Bool?)null : (Bool)obj;
				return value;
			}
			set
			{
				SetFieldValue(10, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the Source field</summary>
		/// <returns>Returns nullable GoalSource enum representing the Source field</returns>
		public GoalSource? Source
		{
			get
			{
				object obj = GetFieldValue(11, 0, Fit.SubfieldIndexMainField);
				GoalSource? value = obj == null ? (GoalSource?)null : (GoalSource)obj;
				return value;
			}
			set
			{
				SetFieldValue(11, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		#endregion // Methods
	} // Class
} // namespace
