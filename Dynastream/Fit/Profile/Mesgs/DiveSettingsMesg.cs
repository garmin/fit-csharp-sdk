#region Copyright
/////////////////////////////////////////////////////////////////////////////////////////////
// Copyright 2024 Garmin International, Inc.
// Licensed under the Flexible and Interoperable Data Transfer (FIT) Protocol License; you
// may not use this file except in compliance with the Flexible and Interoperable Data
// Transfer (FIT) Protocol License.
/////////////////////////////////////////////////////////////////////////////////////////////
// ****WARNING****  This file is auto-generated!  Do NOT edit this file.
// Profile Version = 21.158.0Release
// Tag = production/release/21.158.0-0-gc9428aa
/////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Text;
using System.IO;
using System.Linq;

namespace Dynastream.Fit
{
	/// <summary>
	/// Implements the DiveSettings profile message.
	/// </summary>
	public class DiveSettingsMesg : Mesg
	{
		#region Fields
		static class HeartRateSourceSubfield
		{
			public static ushort HeartRateAntplusDeviceType = 0;
			public static ushort HeartRateLocalDeviceType = 1;
			public static ushort Subfields = 2;
			public static ushort Active = Fit.SubfieldIndexActiveSubfield;
			public static ushort MainField = Fit.SubfieldIndexMainField;
		}
		#endregion

		/// <summary>
		/// Field Numbers for <see cref="DiveSettingsMesg"/>
		/// </summary>
		public sealed class FieldDefNum
		{
			public const byte Timestamp = 253;
			public const byte MessageIndex = 254;
			public const byte Name = 0;
			public const byte Model = 1;
			public const byte GfLow = 2;
			public const byte GfHigh = 3;
			public const byte WaterType = 4;
			public const byte WaterDensity = 5;
			public const byte Po2Warn = 6;
			public const byte Po2Critical = 7;
			public const byte Po2Deco = 8;
			public const byte SafetyStopEnabled = 9;
			public const byte BottomDepth = 10;
			public const byte BottomTime = 11;
			public const byte ApneaCountdownEnabled = 12;
			public const byte ApneaCountdownTime = 13;
			public const byte BacklightMode = 14;
			public const byte BacklightBrightness = 15;
			public const byte BacklightTimeout = 16;
			public const byte RepeatDiveInterval = 17;
			public const byte SafetyStopTime = 18;
			public const byte HeartRateSourceType = 19;
			public const byte HeartRateSource = 20;
			public const byte TravelGas = 21;
			public const byte CcrLowSetpointSwitchMode = 22;
			public const byte CcrLowSetpoint = 23;
			public const byte CcrLowSetpointDepth = 24;
			public const byte CcrHighSetpointSwitchMode = 25;
			public const byte CcrHighSetpoint = 26;
			public const byte CcrHighSetpointDepth = 27;
			public const byte GasConsumptionDisplay = 29;
			public const byte UpKeyEnabled = 30;
			public const byte DiveSounds = 35;
			public const byte LastStopMultiple = 36;
			public const byte NoFlyTimeMode = 37;
			public const byte Invalid = Fit.FieldNumInvalid;
		}

		#region Constructors
		public DiveSettingsMesg() : base(Profile.GetMesg(MesgNum.DiveSettings))
		{
		}

		public DiveSettingsMesg(Mesg mesg) : base(mesg)
		{
		}
		#endregion // Constructors

		#region Methods
		///<summary>
		/// Retrieves the Timestamp field</summary>
		/// <returns>Returns DateTime representing the Timestamp field</returns>
		public DateTime Timestamp
		{
			get
			{
				Object val = GetFieldValue(253, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return TimestampToDateTime(Convert.ToUInt32(val));

			}
			set
			{
				SetFieldValue(253, 0, value.GetTimeStamp(), Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the MessageIndex field</summary>
		/// <returns>Returns nullable ushort representing the MessageIndex field</returns>
		public ushort? MessageIndex
		{
			get
			{
				Object val = GetFieldValue(254, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToUInt16(val));

			}
			set
			{
				SetFieldValue(254, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the Name field</summary>
		/// <returns>Returns byte[] representing the Name field</returns>
		public byte[] Name
		{
			get
			{
				byte[] data = (byte[])GetFieldValue(0, 0, Fit.SubfieldIndexMainField);
				return data.Take(data.Length - 1).ToArray();
			}
			set
			{
				SetFieldValue(0, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the Name field</summary>
		/// <returns>Returns String representing the Name field</returns>
		public String GetNameAsString()
		{
			byte[] data = (byte[])GetFieldValue(0, 0, Fit.SubfieldIndexMainField);
			return data != null ? Encoding.UTF8.GetString(data, 0, data.Length - 1) : null;
		}

		///<summary>
		/// Set Name field</summary>
		/// <param name="name_"> field value to be set</param>
		public void SetName(String name_)
		{
			byte[] data = Encoding.UTF8.GetBytes(name_);
			byte[] zdata = new byte[data.Length + 1];
			data.CopyTo(zdata, 0);
			SetFieldValue(0, 0, zdata, Fit.SubfieldIndexMainField);
		}

		///<summary>
		/// Retrieves the Model field</summary>
		/// <returns>Returns nullable TissueModelType enum representing the Model field</returns>
		public TissueModelType? Model
		{
			get
			{
				object obj = GetFieldValue(1, 0, Fit.SubfieldIndexMainField);
				TissueModelType? value = obj == null ? (TissueModelType?)null : (TissueModelType)obj;
				return value;
			}
			set
			{
				SetFieldValue(1, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the GfLow field
		/// Units: percent</summary>
		/// <returns>Returns nullable byte representing the GfLow field</returns>
		public byte? GfLow
		{
			get
			{
				Object val = GetFieldValue(2, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToByte(val));

			}
			set
			{
				SetFieldValue(2, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the GfHigh field
		/// Units: percent</summary>
		/// <returns>Returns nullable byte representing the GfHigh field</returns>
		public byte? GfHigh
		{
			get
			{
				Object val = GetFieldValue(3, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToByte(val));

			}
			set
			{
				SetFieldValue(3, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the WaterType field</summary>
		/// <returns>Returns nullable WaterType enum representing the WaterType field</returns>
		public WaterType? WaterType
		{
			get
			{
				object obj = GetFieldValue(4, 0, Fit.SubfieldIndexMainField);
				WaterType? value = obj == null ? (WaterType?)null : (WaterType)obj;
				return value;
			}
			set
			{
				SetFieldValue(4, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the WaterDensity field
		/// Units: kg/m^3
		/// Comment: Fresh water is usually 1000; salt water is usually 1025</summary>
		/// <returns>Returns nullable float representing the WaterDensity field</returns>
		public float? WaterDensity
		{
			get
			{
				Object val = GetFieldValue(5, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToSingle(val));

			}
			set
			{
				SetFieldValue(5, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the Po2Warn field
		/// Units: percent
		/// Comment: Typically 1.40</summary>
		/// <returns>Returns nullable float representing the Po2Warn field</returns>
		public float? Po2Warn
		{
			get
			{
				Object val = GetFieldValue(6, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToSingle(val));

			}
			set
			{
				SetFieldValue(6, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the Po2Critical field
		/// Units: percent
		/// Comment: Typically 1.60</summary>
		/// <returns>Returns nullable float representing the Po2Critical field</returns>
		public float? Po2Critical
		{
			get
			{
				Object val = GetFieldValue(7, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToSingle(val));

			}
			set
			{
				SetFieldValue(7, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the Po2Deco field
		/// Units: percent</summary>
		/// <returns>Returns nullable float representing the Po2Deco field</returns>
		public float? Po2Deco
		{
			get
			{
				Object val = GetFieldValue(8, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToSingle(val));

			}
			set
			{
				SetFieldValue(8, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the SafetyStopEnabled field</summary>
		/// <returns>Returns nullable Bool enum representing the SafetyStopEnabled field</returns>
		public Bool? SafetyStopEnabled
		{
			get
			{
				object obj = GetFieldValue(9, 0, Fit.SubfieldIndexMainField);
				Bool? value = obj == null ? (Bool?)null : (Bool)obj;
				return value;
			}
			set
			{
				SetFieldValue(9, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the BottomDepth field</summary>
		/// <returns>Returns nullable float representing the BottomDepth field</returns>
		public float? BottomDepth
		{
			get
			{
				Object val = GetFieldValue(10, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToSingle(val));

			}
			set
			{
				SetFieldValue(10, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the BottomTime field</summary>
		/// <returns>Returns nullable uint representing the BottomTime field</returns>
		public uint? BottomTime
		{
			get
			{
				Object val = GetFieldValue(11, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToUInt32(val));

			}
			set
			{
				SetFieldValue(11, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the ApneaCountdownEnabled field</summary>
		/// <returns>Returns nullable Bool enum representing the ApneaCountdownEnabled field</returns>
		public Bool? ApneaCountdownEnabled
		{
			get
			{
				object obj = GetFieldValue(12, 0, Fit.SubfieldIndexMainField);
				Bool? value = obj == null ? (Bool?)null : (Bool)obj;
				return value;
			}
			set
			{
				SetFieldValue(12, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the ApneaCountdownTime field</summary>
		/// <returns>Returns nullable uint representing the ApneaCountdownTime field</returns>
		public uint? ApneaCountdownTime
		{
			get
			{
				Object val = GetFieldValue(13, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToUInt32(val));

			}
			set
			{
				SetFieldValue(13, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the BacklightMode field</summary>
		/// <returns>Returns nullable DiveBacklightMode enum representing the BacklightMode field</returns>
		public DiveBacklightMode? BacklightMode
		{
			get
			{
				object obj = GetFieldValue(14, 0, Fit.SubfieldIndexMainField);
				DiveBacklightMode? value = obj == null ? (DiveBacklightMode?)null : (DiveBacklightMode)obj;
				return value;
			}
			set
			{
				SetFieldValue(14, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the BacklightBrightness field</summary>
		/// <returns>Returns nullable byte representing the BacklightBrightness field</returns>
		public byte? BacklightBrightness
		{
			get
			{
				Object val = GetFieldValue(15, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToByte(val));

			}
			set
			{
				SetFieldValue(15, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the BacklightTimeout field</summary>
		/// <returns>Returns nullable byte representing the BacklightTimeout field</returns>
		public byte? BacklightTimeout
		{
			get
			{
				Object val = GetFieldValue(16, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToByte(val));

			}
			set
			{
				SetFieldValue(16, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the RepeatDiveInterval field
		/// Units: s
		/// Comment: Time between surfacing and ending the activity</summary>
		/// <returns>Returns nullable ushort representing the RepeatDiveInterval field</returns>
		public ushort? RepeatDiveInterval
		{
			get
			{
				Object val = GetFieldValue(17, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToUInt16(val));

			}
			set
			{
				SetFieldValue(17, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the SafetyStopTime field
		/// Units: s
		/// Comment: Time at safety stop (if enabled)</summary>
		/// <returns>Returns nullable ushort representing the SafetyStopTime field</returns>
		public ushort? SafetyStopTime
		{
			get
			{
				Object val = GetFieldValue(18, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToUInt16(val));

			}
			set
			{
				SetFieldValue(18, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the HeartRateSourceType field</summary>
		/// <returns>Returns nullable SourceType enum representing the HeartRateSourceType field</returns>
		public SourceType? HeartRateSourceType
		{
			get
			{
				object obj = GetFieldValue(19, 0, Fit.SubfieldIndexMainField);
				SourceType? value = obj == null ? (SourceType?)null : (SourceType)obj;
				return value;
			}
			set
			{
				SetFieldValue(19, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the HeartRateSource field</summary>
		/// <returns>Returns nullable byte representing the HeartRateSource field</returns>
		public byte? HeartRateSource
		{
			get
			{
				Object val = GetFieldValue(20, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToByte(val));

			}
			set
			{
				SetFieldValue(20, 0, value, Fit.SubfieldIndexMainField);
			}
		}


		/// <summary>
		/// Retrieves the HeartRateAntplusDeviceType subfield</summary>
		/// <returns>Nullable byte representing the HeartRateAntplusDeviceType subfield</returns>
		public byte? HeartRateAntplusDeviceType
		{
			get
			{
				Object val = GetFieldValue(20, 0, HeartRateSourceSubfield.HeartRateAntplusDeviceType);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToByte(val));

			}
			set
			{
				SetFieldValue(20, 0, value, HeartRateSourceSubfield.HeartRateAntplusDeviceType);
			}
		}

		/// <summary>
		/// Retrieves the HeartRateLocalDeviceType subfield</summary>
		/// <returns>Nullable byte representing the HeartRateLocalDeviceType subfield</returns>
		public byte? HeartRateLocalDeviceType
		{
			get
			{
				Object val = GetFieldValue(20, 0, HeartRateSourceSubfield.HeartRateLocalDeviceType);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToByte(val));

			}
			set
			{
				SetFieldValue(20, 0, value, HeartRateSourceSubfield.HeartRateLocalDeviceType);
			}
		}
		///<summary>
		/// Retrieves the TravelGas field
		/// Comment: Index of travel dive_gas message</summary>
		/// <returns>Returns nullable ushort representing the TravelGas field</returns>
		public ushort? TravelGas
		{
			get
			{
				Object val = GetFieldValue(21, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToUInt16(val));

			}
			set
			{
				SetFieldValue(21, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the CcrLowSetpointSwitchMode field
		/// Comment: If low PO2 should be switched to automatically</summary>
		/// <returns>Returns nullable CcrSetpointSwitchMode enum representing the CcrLowSetpointSwitchMode field</returns>
		public CcrSetpointSwitchMode? CcrLowSetpointSwitchMode
		{
			get
			{
				object obj = GetFieldValue(22, 0, Fit.SubfieldIndexMainField);
				CcrSetpointSwitchMode? value = obj == null ? (CcrSetpointSwitchMode?)null : (CcrSetpointSwitchMode)obj;
				return value;
			}
			set
			{
				SetFieldValue(22, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the CcrLowSetpoint field
		/// Units: percent
		/// Comment: Target PO2 when using low setpoint</summary>
		/// <returns>Returns nullable float representing the CcrLowSetpoint field</returns>
		public float? CcrLowSetpoint
		{
			get
			{
				Object val = GetFieldValue(23, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToSingle(val));

			}
			set
			{
				SetFieldValue(23, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the CcrLowSetpointDepth field
		/// Units: m
		/// Comment: Depth to switch to low setpoint in automatic mode</summary>
		/// <returns>Returns nullable float representing the CcrLowSetpointDepth field</returns>
		public float? CcrLowSetpointDepth
		{
			get
			{
				Object val = GetFieldValue(24, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToSingle(val));

			}
			set
			{
				SetFieldValue(24, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the CcrHighSetpointSwitchMode field
		/// Comment: If high PO2 should be switched to automatically</summary>
		/// <returns>Returns nullable CcrSetpointSwitchMode enum representing the CcrHighSetpointSwitchMode field</returns>
		public CcrSetpointSwitchMode? CcrHighSetpointSwitchMode
		{
			get
			{
				object obj = GetFieldValue(25, 0, Fit.SubfieldIndexMainField);
				CcrSetpointSwitchMode? value = obj == null ? (CcrSetpointSwitchMode?)null : (CcrSetpointSwitchMode)obj;
				return value;
			}
			set
			{
				SetFieldValue(25, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the CcrHighSetpoint field
		/// Units: percent
		/// Comment: Target PO2 when using high setpoint</summary>
		/// <returns>Returns nullable float representing the CcrHighSetpoint field</returns>
		public float? CcrHighSetpoint
		{
			get
			{
				Object val = GetFieldValue(26, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToSingle(val));

			}
			set
			{
				SetFieldValue(26, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the CcrHighSetpointDepth field
		/// Units: m
		/// Comment: Depth to switch to high setpoint in automatic mode</summary>
		/// <returns>Returns nullable float representing the CcrHighSetpointDepth field</returns>
		public float? CcrHighSetpointDepth
		{
			get
			{
				Object val = GetFieldValue(27, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToSingle(val));

			}
			set
			{
				SetFieldValue(27, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the GasConsumptionDisplay field
		/// Comment: Type of gas consumption rate to display. Some values are only valid if tank volume is known.</summary>
		/// <returns>Returns nullable GasConsumptionRateType enum representing the GasConsumptionDisplay field</returns>
		public GasConsumptionRateType? GasConsumptionDisplay
		{
			get
			{
				object obj = GetFieldValue(29, 0, Fit.SubfieldIndexMainField);
				GasConsumptionRateType? value = obj == null ? (GasConsumptionRateType?)null : (GasConsumptionRateType)obj;
				return value;
			}
			set
			{
				SetFieldValue(29, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the UpKeyEnabled field
		/// Comment: Indicates whether the up key is enabled during dives</summary>
		/// <returns>Returns nullable Bool enum representing the UpKeyEnabled field</returns>
		public Bool? UpKeyEnabled
		{
			get
			{
				object obj = GetFieldValue(30, 0, Fit.SubfieldIndexMainField);
				Bool? value = obj == null ? (Bool?)null : (Bool)obj;
				return value;
			}
			set
			{
				SetFieldValue(30, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the DiveSounds field
		/// Comment: Sounds and vibration enabled or disabled in-dive</summary>
		/// <returns>Returns nullable Tone enum representing the DiveSounds field</returns>
		public Tone? DiveSounds
		{
			get
			{
				object obj = GetFieldValue(35, 0, Fit.SubfieldIndexMainField);
				Tone? value = obj == null ? (Tone?)null : (Tone)obj;
				return value;
			}
			set
			{
				SetFieldValue(35, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the LastStopMultiple field
		/// Comment: Usually 1.0/1.5/2.0 representing 3/4.5/6m or 10/15/20ft</summary>
		/// <returns>Returns nullable float representing the LastStopMultiple field</returns>
		public float? LastStopMultiple
		{
			get
			{
				Object val = GetFieldValue(36, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToSingle(val));

			}
			set
			{
				SetFieldValue(36, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the NoFlyTimeMode field
		/// Comment: Indicates which guidelines to use for no-fly surface interval.</summary>
		/// <returns>Returns nullable NoFlyTimeMode enum representing the NoFlyTimeMode field</returns>
		public NoFlyTimeMode? NoFlyTimeMode
		{
			get
			{
				object obj = GetFieldValue(37, 0, Fit.SubfieldIndexMainField);
				NoFlyTimeMode? value = obj == null ? (NoFlyTimeMode?)null : (NoFlyTimeMode)obj;
				return value;
			}
			set
			{
				SetFieldValue(37, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		#endregion // Methods
	} // Class
} // namespace
