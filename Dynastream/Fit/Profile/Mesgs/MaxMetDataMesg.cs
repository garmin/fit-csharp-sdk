#region Copyright
/////////////////////////////////////////////////////////////////////////////////////////////
// Copyright 2024 Garmin International, Inc.
// Licensed under the Flexible and Interoperable Data Transfer (FIT) Protocol License; you
// may not use this file except in compliance with the Flexible and Interoperable Data
// Transfer (FIT) Protocol License.
/////////////////////////////////////////////////////////////////////////////////////////////
// ****WARNING****  This file is auto-generated!  Do NOT edit this file.
// Profile Version = 21.158.0Release
// Tag = production/release/21.158.0-0-gc9428aa
/////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Text;
using System.IO;
using System.Linq;

namespace Dynastream.Fit
{
	/// <summary>
	/// Implements the MaxMetData profile message.
	/// </summary>
	public class MaxMetDataMesg : Mesg
	{
		#region Fields
		#endregion

		/// <summary>
		/// Field Numbers for <see cref="MaxMetDataMesg"/>
		/// </summary>
		public sealed class FieldDefNum
		{
			public const byte UpdateTime = 0;
			public const byte Vo2Max = 2;
			public const byte Sport = 5;
			public const byte SubSport = 6;
			public const byte MaxMetCategory = 8;
			public const byte CalibratedData = 9;
			public const byte HrSource = 12;
			public const byte SpeedSource = 13;
			public const byte Invalid = Fit.FieldNumInvalid;
		}

		#region Constructors
		public MaxMetDataMesg() : base(Profile.GetMesg(MesgNum.MaxMetData))
		{
		}

		public MaxMetDataMesg(Mesg mesg) : base(mesg)
		{
		}
		#endregion // Constructors

		#region Methods
		///<summary>
		/// Retrieves the UpdateTime field
		/// Comment: Time maxMET and vo2 were calculated</summary>
		/// <returns>Returns DateTime representing the UpdateTime field</returns>
		public DateTime UpdateTime
		{
			get
			{
				Object val = GetFieldValue(0, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return TimestampToDateTime(Convert.ToUInt32(val));

			}
			set
			{
				SetFieldValue(0, 0, value.GetTimeStamp(), Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the Vo2Max field
		/// Units: mL/kg/min</summary>
		/// <returns>Returns nullable float representing the Vo2Max field</returns>
		public float? Vo2Max
		{
			get
			{
				Object val = GetFieldValue(2, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToSingle(val));

			}
			set
			{
				SetFieldValue(2, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the Sport field</summary>
		/// <returns>Returns nullable Sport enum representing the Sport field</returns>
		public Sport? Sport
		{
			get
			{
				object obj = GetFieldValue(5, 0, Fit.SubfieldIndexMainField);
				Sport? value = obj == null ? (Sport?)null : (Sport)obj;
				return value;
			}
			set
			{
				SetFieldValue(5, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the SubSport field</summary>
		/// <returns>Returns nullable SubSport enum representing the SubSport field</returns>
		public SubSport? SubSport
		{
			get
			{
				object obj = GetFieldValue(6, 0, Fit.SubfieldIndexMainField);
				SubSport? value = obj == null ? (SubSport?)null : (SubSport)obj;
				return value;
			}
			set
			{
				SetFieldValue(6, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the MaxMetCategory field</summary>
		/// <returns>Returns nullable MaxMetCategory enum representing the MaxMetCategory field</returns>
		public MaxMetCategory? MaxMetCategory
		{
			get
			{
				object obj = GetFieldValue(8, 0, Fit.SubfieldIndexMainField);
				MaxMetCategory? value = obj == null ? (MaxMetCategory?)null : (MaxMetCategory)obj;
				return value;
			}
			set
			{
				SetFieldValue(8, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the CalibratedData field
		/// Comment: Indicates if calibrated data was used in the calculation</summary>
		/// <returns>Returns nullable Bool enum representing the CalibratedData field</returns>
		public Bool? CalibratedData
		{
			get
			{
				object obj = GetFieldValue(9, 0, Fit.SubfieldIndexMainField);
				Bool? value = obj == null ? (Bool?)null : (Bool)obj;
				return value;
			}
			set
			{
				SetFieldValue(9, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the HrSource field
		/// Comment: Indicates if the estimate was obtained using a chest strap or wrist heart rate</summary>
		/// <returns>Returns nullable MaxMetHeartRateSource enum representing the HrSource field</returns>
		public MaxMetHeartRateSource? HrSource
		{
			get
			{
				object obj = GetFieldValue(12, 0, Fit.SubfieldIndexMainField);
				MaxMetHeartRateSource? value = obj == null ? (MaxMetHeartRateSource?)null : (MaxMetHeartRateSource)obj;
				return value;
			}
			set
			{
				SetFieldValue(12, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the SpeedSource field
		/// Comment: Indidcates if the estimate was obtained using onboard GPS or connected GPS</summary>
		/// <returns>Returns nullable MaxMetSpeedSource enum representing the SpeedSource field</returns>
		public MaxMetSpeedSource? SpeedSource
		{
			get
			{
				object obj = GetFieldValue(13, 0, Fit.SubfieldIndexMainField);
				MaxMetSpeedSource? value = obj == null ? (MaxMetSpeedSource?)null : (MaxMetSpeedSource)obj;
				return value;
			}
			set
			{
				SetFieldValue(13, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		#endregion // Methods
	} // Class
} // namespace
