#region Copyright
/////////////////////////////////////////////////////////////////////////////////////////////
// Copyright 2024 Garmin International, Inc.
// Licensed under the Flexible and Interoperable Data Transfer (FIT) Protocol License; you
// may not use this file except in compliance with the Flexible and Interoperable Data
// Transfer (FIT) Protocol License.
/////////////////////////////////////////////////////////////////////////////////////////////
// ****WARNING****  This file is auto-generated!  Do NOT edit this file.
// Profile Version = 21.158.0Release
// Tag = production/release/21.158.0-0-gc9428aa
/////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Text;
using System.IO;
using System.Linq;

namespace Dynastream.Fit
{
	/// <summary>
	/// Implements the UserProfile profile message.
	/// </summary>
	public class UserProfileMesg : Mesg
	{
		#region Fields
		#endregion

		/// <summary>
		/// Field Numbers for <see cref="UserProfileMesg"/>
		/// </summary>
		public sealed class FieldDefNum
		{
			public const byte MessageIndex = 254;
			public const byte FriendlyName = 0;
			public const byte Gender = 1;
			public const byte Age = 2;
			public const byte Height = 3;
			public const byte Weight = 4;
			public const byte Language = 5;
			public const byte ElevSetting = 6;
			public const byte WeightSetting = 7;
			public const byte RestingHeartRate = 8;
			public const byte DefaultMaxRunningHeartRate = 9;
			public const byte DefaultMaxBikingHeartRate = 10;
			public const byte DefaultMaxHeartRate = 11;
			public const byte HrSetting = 12;
			public const byte SpeedSetting = 13;
			public const byte DistSetting = 14;
			public const byte PowerSetting = 16;
			public const byte ActivityClass = 17;
			public const byte PositionSetting = 18;
			public const byte TemperatureSetting = 21;
			public const byte LocalId = 22;
			public const byte GlobalId = 23;
			public const byte WakeTime = 28;
			public const byte SleepTime = 29;
			public const byte HeightSetting = 30;
			public const byte UserRunningStepLength = 31;
			public const byte UserWalkingStepLength = 32;
			public const byte DepthSetting = 47;
			public const byte DiveCount = 49;
			public const byte Invalid = Fit.FieldNumInvalid;
		}

		#region Constructors
		public UserProfileMesg() : base(Profile.GetMesg(MesgNum.UserProfile))
		{
		}

		public UserProfileMesg(Mesg mesg) : base(mesg)
		{
		}
		#endregion // Constructors

		#region Methods
		///<summary>
		/// Retrieves the MessageIndex field</summary>
		/// <returns>Returns nullable ushort representing the MessageIndex field</returns>
		public ushort? MessageIndex
		{
			get
			{
				Object val = GetFieldValue(254, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToUInt16(val));

			}
			set
			{
				SetFieldValue(254, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the FriendlyName field
		/// Comment: Used for Morning Report greeting</summary>
		/// <returns>Returns byte[] representing the FriendlyName field</returns>
		public byte[] FriendlyName
		{
			get
			{
				byte[] data = (byte[])GetFieldValue(0, 0, Fit.SubfieldIndexMainField);
				return data.Take(data.Length - 1).ToArray();
			}
			set
			{
				SetFieldValue(0, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the FriendlyName field
		/// Comment: Used for Morning Report greeting</summary>
		/// <returns>Returns String representing the FriendlyName field</returns>
		public String GetFriendlyNameAsString()
		{
			byte[] data = (byte[])GetFieldValue(0, 0, Fit.SubfieldIndexMainField);
			return data != null ? Encoding.UTF8.GetString(data, 0, data.Length - 1) : null;
		}

		///<summary>
		/// Set FriendlyName field
		/// Comment: Used for Morning Report greeting</summary>
		/// <param name="friendlyName_"> field value to be set</param>
		public void SetFriendlyName(String friendlyName_)
		{
			byte[] data = Encoding.UTF8.GetBytes(friendlyName_);
			byte[] zdata = new byte[data.Length + 1];
			data.CopyTo(zdata, 0);
			SetFieldValue(0, 0, zdata, Fit.SubfieldIndexMainField);
		}

		///<summary>
		/// Retrieves the Gender field</summary>
		/// <returns>Returns nullable Gender enum representing the Gender field</returns>
		public Gender? Gender
		{
			get
			{
				object obj = GetFieldValue(1, 0, Fit.SubfieldIndexMainField);
				Gender? value = obj == null ? (Gender?)null : (Gender)obj;
				return value;
			}
			set
			{
				SetFieldValue(1, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the Age field
		/// Units: years</summary>
		/// <returns>Returns nullable byte representing the Age field</returns>
		public byte? Age
		{
			get
			{
				Object val = GetFieldValue(2, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToByte(val));

			}
			set
			{
				SetFieldValue(2, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the Height field
		/// Units: m</summary>
		/// <returns>Returns nullable float representing the Height field</returns>
		public float? Height
		{
			get
			{
				Object val = GetFieldValue(3, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToSingle(val));

			}
			set
			{
				SetFieldValue(3, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the Weight field
		/// Units: kg</summary>
		/// <returns>Returns nullable float representing the Weight field</returns>
		public float? Weight
		{
			get
			{
				Object val = GetFieldValue(4, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToSingle(val));

			}
			set
			{
				SetFieldValue(4, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the Language field</summary>
		/// <returns>Returns nullable Language enum representing the Language field</returns>
		public Language? Language
		{
			get
			{
				object obj = GetFieldValue(5, 0, Fit.SubfieldIndexMainField);
				Language? value = obj == null ? (Language?)null : (Language)obj;
				return value;
			}
			set
			{
				SetFieldValue(5, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the ElevSetting field</summary>
		/// <returns>Returns nullable DisplayMeasure enum representing the ElevSetting field</returns>
		public DisplayMeasure? ElevSetting
		{
			get
			{
				object obj = GetFieldValue(6, 0, Fit.SubfieldIndexMainField);
				DisplayMeasure? value = obj == null ? (DisplayMeasure?)null : (DisplayMeasure)obj;
				return value;
			}
			set
			{
				SetFieldValue(6, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the WeightSetting field</summary>
		/// <returns>Returns nullable DisplayMeasure enum representing the WeightSetting field</returns>
		public DisplayMeasure? WeightSetting
		{
			get
			{
				object obj = GetFieldValue(7, 0, Fit.SubfieldIndexMainField);
				DisplayMeasure? value = obj == null ? (DisplayMeasure?)null : (DisplayMeasure)obj;
				return value;
			}
			set
			{
				SetFieldValue(7, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the RestingHeartRate field
		/// Units: bpm</summary>
		/// <returns>Returns nullable byte representing the RestingHeartRate field</returns>
		public byte? RestingHeartRate
		{
			get
			{
				Object val = GetFieldValue(8, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToByte(val));

			}
			set
			{
				SetFieldValue(8, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the DefaultMaxRunningHeartRate field
		/// Units: bpm</summary>
		/// <returns>Returns nullable byte representing the DefaultMaxRunningHeartRate field</returns>
		public byte? DefaultMaxRunningHeartRate
		{
			get
			{
				Object val = GetFieldValue(9, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToByte(val));

			}
			set
			{
				SetFieldValue(9, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the DefaultMaxBikingHeartRate field
		/// Units: bpm</summary>
		/// <returns>Returns nullable byte representing the DefaultMaxBikingHeartRate field</returns>
		public byte? DefaultMaxBikingHeartRate
		{
			get
			{
				Object val = GetFieldValue(10, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToByte(val));

			}
			set
			{
				SetFieldValue(10, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the DefaultMaxHeartRate field
		/// Units: bpm</summary>
		/// <returns>Returns nullable byte representing the DefaultMaxHeartRate field</returns>
		public byte? DefaultMaxHeartRate
		{
			get
			{
				Object val = GetFieldValue(11, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToByte(val));

			}
			set
			{
				SetFieldValue(11, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the HrSetting field</summary>
		/// <returns>Returns nullable DisplayHeart enum representing the HrSetting field</returns>
		public DisplayHeart? HrSetting
		{
			get
			{
				object obj = GetFieldValue(12, 0, Fit.SubfieldIndexMainField);
				DisplayHeart? value = obj == null ? (DisplayHeart?)null : (DisplayHeart)obj;
				return value;
			}
			set
			{
				SetFieldValue(12, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the SpeedSetting field</summary>
		/// <returns>Returns nullable DisplayMeasure enum representing the SpeedSetting field</returns>
		public DisplayMeasure? SpeedSetting
		{
			get
			{
				object obj = GetFieldValue(13, 0, Fit.SubfieldIndexMainField);
				DisplayMeasure? value = obj == null ? (DisplayMeasure?)null : (DisplayMeasure)obj;
				return value;
			}
			set
			{
				SetFieldValue(13, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the DistSetting field</summary>
		/// <returns>Returns nullable DisplayMeasure enum representing the DistSetting field</returns>
		public DisplayMeasure? DistSetting
		{
			get
			{
				object obj = GetFieldValue(14, 0, Fit.SubfieldIndexMainField);
				DisplayMeasure? value = obj == null ? (DisplayMeasure?)null : (DisplayMeasure)obj;
				return value;
			}
			set
			{
				SetFieldValue(14, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the PowerSetting field</summary>
		/// <returns>Returns nullable DisplayPower enum representing the PowerSetting field</returns>
		public DisplayPower? PowerSetting
		{
			get
			{
				object obj = GetFieldValue(16, 0, Fit.SubfieldIndexMainField);
				DisplayPower? value = obj == null ? (DisplayPower?)null : (DisplayPower)obj;
				return value;
			}
			set
			{
				SetFieldValue(16, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the ActivityClass field</summary>
		/// <returns>Returns nullable ActivityClass enum representing the ActivityClass field</returns>
		public ActivityClass? ActivityClass
		{
			get
			{
				object obj = GetFieldValue(17, 0, Fit.SubfieldIndexMainField);
				ActivityClass? value = obj == null ? (ActivityClass?)null : (ActivityClass)obj;
				return value;
			}
			set
			{
				SetFieldValue(17, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the PositionSetting field</summary>
		/// <returns>Returns nullable DisplayPosition enum representing the PositionSetting field</returns>
		public DisplayPosition? PositionSetting
		{
			get
			{
				object obj = GetFieldValue(18, 0, Fit.SubfieldIndexMainField);
				DisplayPosition? value = obj == null ? (DisplayPosition?)null : (DisplayPosition)obj;
				return value;
			}
			set
			{
				SetFieldValue(18, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the TemperatureSetting field</summary>
		/// <returns>Returns nullable DisplayMeasure enum representing the TemperatureSetting field</returns>
		public DisplayMeasure? TemperatureSetting
		{
			get
			{
				object obj = GetFieldValue(21, 0, Fit.SubfieldIndexMainField);
				DisplayMeasure? value = obj == null ? (DisplayMeasure?)null : (DisplayMeasure)obj;
				return value;
			}
			set
			{
				SetFieldValue(21, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the LocalId field</summary>
		/// <returns>Returns nullable ushort representing the LocalId field</returns>
		public ushort? LocalId
		{
			get
			{
				Object val = GetFieldValue(22, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToUInt16(val));

			}
			set
			{
				SetFieldValue(22, 0, value, Fit.SubfieldIndexMainField);
			}
		}


		/// <summary>
		///
		/// </summary>
		/// <returns>returns number of elements in field GlobalId</returns>
		public int GetNumGlobalId()
		{
			return GetNumFieldValues(23, Fit.SubfieldIndexMainField);
		}

		///<summary>
		/// Retrieves the GlobalId field</summary>
		/// <param name="index">0 based index of GlobalId element to retrieve</param>
		/// <returns>Returns nullable byte representing the GlobalId field</returns>
		public byte? GetGlobalId(int index)
		{
			Object val = GetFieldValue(23, index, Fit.SubfieldIndexMainField);
			if (val == null)
			{
				return null;
			}

			return (Convert.ToByte(val));

		}

		/// <summary>
		/// Set GlobalId field</summary>
		/// <param name="index">0 based index of global_id</param>
		/// <param name="globalId_">Nullable field value to be set</param>
		public void SetGlobalId(int index, byte? globalId_)
		{
			SetFieldValue(23, index, globalId_, Fit.SubfieldIndexMainField);
		}

		///<summary>
		/// Retrieves the WakeTime field
		/// Comment: Typical wake time</summary>
		/// <returns>Returns nullable uint representing the WakeTime field</returns>
		public uint? WakeTime
		{
			get
			{
				Object val = GetFieldValue(28, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToUInt32(val));

			}
			set
			{
				SetFieldValue(28, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the SleepTime field
		/// Comment: Typical bed time</summary>
		/// <returns>Returns nullable uint representing the SleepTime field</returns>
		public uint? SleepTime
		{
			get
			{
				Object val = GetFieldValue(29, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToUInt32(val));

			}
			set
			{
				SetFieldValue(29, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the HeightSetting field</summary>
		/// <returns>Returns nullable DisplayMeasure enum representing the HeightSetting field</returns>
		public DisplayMeasure? HeightSetting
		{
			get
			{
				object obj = GetFieldValue(30, 0, Fit.SubfieldIndexMainField);
				DisplayMeasure? value = obj == null ? (DisplayMeasure?)null : (DisplayMeasure)obj;
				return value;
			}
			set
			{
				SetFieldValue(30, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the UserRunningStepLength field
		/// Units: m
		/// Comment: User defined running step length set to 0 for auto length</summary>
		/// <returns>Returns nullable float representing the UserRunningStepLength field</returns>
		public float? UserRunningStepLength
		{
			get
			{
				Object val = GetFieldValue(31, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToSingle(val));

			}
			set
			{
				SetFieldValue(31, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the UserWalkingStepLength field
		/// Units: m
		/// Comment: User defined walking step length set to 0 for auto length</summary>
		/// <returns>Returns nullable float representing the UserWalkingStepLength field</returns>
		public float? UserWalkingStepLength
		{
			get
			{
				Object val = GetFieldValue(32, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToSingle(val));

			}
			set
			{
				SetFieldValue(32, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the DepthSetting field</summary>
		/// <returns>Returns nullable DisplayMeasure enum representing the DepthSetting field</returns>
		public DisplayMeasure? DepthSetting
		{
			get
			{
				object obj = GetFieldValue(47, 0, Fit.SubfieldIndexMainField);
				DisplayMeasure? value = obj == null ? (DisplayMeasure?)null : (DisplayMeasure)obj;
				return value;
			}
			set
			{
				SetFieldValue(47, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		///<summary>
		/// Retrieves the DiveCount field</summary>
		/// <returns>Returns nullable uint representing the DiveCount field</returns>
		public uint? DiveCount
		{
			get
			{
				Object val = GetFieldValue(49, 0, Fit.SubfieldIndexMainField);
				if (val == null)
				{
					return null;
				}

				return (Convert.ToUInt32(val));

			}
			set
			{
				SetFieldValue(49, 0, value, Fit.SubfieldIndexMainField);
			}
		}

		#endregion // Methods
	} // Class
} // namespace
